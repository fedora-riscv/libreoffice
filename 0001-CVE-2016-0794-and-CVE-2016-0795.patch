From af9e6dedc93aa6cdb9988ac0fd9bd0d494c8006e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Caol=C3=A1n=20McNamara?= <caolanm@redhat.com>
Date: Sat, 24 Jan 2015 17:08:37 +0000
Subject: [PATCH] CVE-2016-0794 and CVE-2016-0795

cppcheck: memset on union containing floating pointer number

(cherry picked from commit 8bafc17bd7426c68b97287e8ab8a5c86378eb45f)

valgrind: uninitialised value

(cherry picked from commit 034e0a5967a459469eb99fc5dc2f47a2d298d266)

coverity#1266516 Useless call

(cherry picked from commit 18b290370da6d3256eb027985345781e42889397)

coverity#1266511 Useless call

(cherry picked from commit 80c0d3de5c855386ccf079501f3d6d77babb81e1)

coverity#1267647 Logically dead code

inspection shows its always non null

(cherry picked from commit 0a205a7185e6d5d6cc277746e04f60278f80b859)

coverity#1267650 Logically dead code

inspection shows they can never be null

(cherry picked from commit 1cc506626aa2173397e150835c1a2f08c5041490)

coverity#1267665 Logically dead code

inspection shows it can never be null

(cherry picked from commit bf831c231f92770d12f2f807dfe60dd2aa7f2f71)

coverity#1267642 Logically dead code

reviewed the 120+ callers and confirmed it is never NULL

(cherry picked from commit 03f52fb64ce489ba4bf48fa18cebcdf24805480b)

slightly odd stuff here

(cherry picked from commit d59358ee28f0cd3e1eb56a0a923f165304fc17c9)

lotuswordpro: PVS-Studio V674 comparing long to double

Not sure if the GetMRest is supposed to be multiplied with something,
but ~nobody knows or uses that format anyway so just suppress the warning.

(cherry picked from commit 91c059023f36217761cbdd281ba286d8e63258c9)

tdf#90028 avoid crash if style is not found

(cherry picked from commit 25c25f855169c98c30f3f7868fd1ad430e159ddc)

foo

these types come directly from the file itself

so while invalid they can appear here

(cherry picked from commit aad27e89564752a2bee3da4558f4d276685ba50a)

Consistently represent bullet char as OUString

(One difference is that for an XFListLevelBullet for which SetBulletChar has not
been called, ToXml will use an empty string now instead of a string containing a
single NUL character.  But given that initializing m_chBullet to zero in the
XFListLevelBullet ctor was only added recently with
72069675955aaf0b72a7842453347e3e7293f56d "coverity#738770: Unitialized scalar
field," assume that ToXml is supposed to be only called after SetBulletChar has
been called.)

(cherry picked from commit 153ea761e32238d1dd882823cf27da1b11c4d66a)

Use a more straightforward hash function

...instead of assembling a OUString and calling OUString::hashCode.  It appears
that these hash values are only used in std::unordered_map instantiations, not
used as part of a stable file format.

(cherry picked from commit 8d057b3ca924cca0aafcaabf250189cf6aa41cfd)

Remove unnecessary variable

(cherry picked from commit 6776d52be6dfe3b8725fadb77b87e20a7cc639d0)

foo

cppcheck: operatorEqVarError

(cherry picked from commit 7ac8939cc8e7599cca3de27c8f8dc9fd9f2e2185)

clang-analyzer-deadcode.DeadStores

...ever since cc316b39d9110c536e1758a4f814738ca209bb02 "Port of Lotus Word Pro
filter, by Fong Lin and Noel Power"

(cherry picked from commit 4646c9474f062282ac32919700a5c3749d54300e)

Return value of LwpTools::QuickReadUnicode is unused

...since previous commit

(cherry picked from commit 7f44f0b5083fda151f32955f4334b318e2386681)

clang-analyzer-deadcode.DeadStores

...ever since cc316b39d9110c536e1758a4f814738ca209bb02 "Port of Lotus Word Pro
filter, by Fong Lin and Noel Power"

(cherry picked from commit a6aec01230185e3dbd1118e5f2cb690d2998d034)

clang-analyzer-deadcode.DeadStores

...and reduction of variable scope

(cherry picked from commit 7ea8f8af1c78c2144d0d6fe86c9e72ebca2038b7)

clang-analyzer-deadcode.DeadStores

(cherry picked from commit 6cc9c8c6b540bb6a830bf6571b69b8bd031fa195)

guard against corrupt m_nNumTabs

(cherry picked from commit 85a2cd37fc60cd53a892b27a18d4b5272988361c)

valgrind: jump or move depends on uninitialised value

(cherry picked from commit dcbef55a111405b4540856bf6910f81bce9785bb)

lotuswordpro: GCC 4.6 seems to need stdexcept included

(cherry picked from commit 742c2370566bf1e7caa7403c99f088a79ae146fa)

guard against corrupt RootData

(cherry picked from commit fc943ea85a7924ce0552b08eef99ed8e02f0b965)

guard against corrupt ObjIndexData

(cherry picked from commit c88a23b9d44118e96de41a70ab7f87eb0aafb126)

guard against corrupt SilverBullet

(cherry picked from commit 36d55980b1b3498fecc460d3c46667e5f5a17b8e)

protect against missing SuperTable

(cherry picked from commit 356109d4ead137ea22b358b20ed22a4bd09d35f6)

protect against missing Modifiers

(cherry picked from commit 6c59adca37900dccc394061a730984ecb180aacf)

guard against missing RootDocument

(cherry picked from commit 0f700d5bc9c0ebc1e1ebe60758fbbf02590790bc)

guard against missing Section

(cherry picked from commit c8b4fe55b8b50fc33a9157e93b42aed0f7d30534)

guard against missing BaseStyle

(cherry picked from commit d34cbe279cc8e1db941a4da1130d5a6d7429357d)

guard against missing paragraph Story

(cherry picked from commit 9d2a1c48b4a39967bc21776b471f1a4eca735cb6)

guard against no default text style

(cherry picked from commit 80297dd0f21bfeaa9bae09cacfa29ab2eee64c09)

guard against styles based on themselves

which leads to stack exhaustion when queries,

make m_BasedOnStyle private and replace it with
a call to GetBasedOnStyle which checks that
the base style is not itself

(cherry picked from commit da5e8ba393b8522a8f7501ebeb1e9a98d544a7ba)

guard against missing indent property

(cherry picked from commit ae94fc5b28105c920b2e9d336f463b27cae5b0e1)

guard against missing paragraph story

(cherry picked from commit dbc830aecc722d34971d773470da478ef4c38714)

guard against missing SuperTable

(cherry picked from commit 0cde3ca230364492aa6b7f634b97178164268728)

guard against missing alignment property

(cherry picked from commit 7e341379ecec218c0ff2ff0e8db9f14468b125f6)

bounds check GetNameByIndex like Override

(cherry picked from commit 8c67b1b51f21643036c5f5371a6af0a4558e7da2)

guard against infinite recursion on registering styles

(cherry picked from commit 66686e443b568ad5aab1b32b3f25eb73487cfef6)

add missing #include <stdexcept>

(cherry picked from commit 1ff0a3880c48227656d2b4a823cd66a6d5c74af0)

guard against missing paragraph container

(cherry picked from commit 130eaf02de89c8996ff6e817a005993dcbd586e6)

protect against missing Table Layout

(cherry picked from commit 08fe513b89ea5102a3a233ee0bac472dc8e6b219)

guard against missing spacing property

(cherry picked from commit 10de96bf0fb820b38607b0c25a0d3219ad343819)

guard against missing Foundry

(cherry picked from commit 22ee3194c930682ad8ac7f994084e877aa00d191)

guard against missing table layout

(cherry picked from commit 0c876483d278e3e5ba43e9eaf40ca713b6099703)

guard against infinite recursion on parsing objects

(cherry picked from commit fbd329800340a496def839181858964b1e3709a5)

guard against missing table container

(cherry picked from commit c732a1ae8cc0cc94bfeddba243657a0b9e52a0f9)

guard against infinite recursion

(cherry picked from commit 338c6ba3a0983009cfd1faff52ac56d6ea092d6f)

protect against missing Ruby Marker

(cherry picked from commit 215516a52fd01170bb4a79828b0f0948884b727a)

guard against missing parent layout

(cherry picked from commit 713d737b1ff73e76c6543198ce9299e1c83ac147)

use of uninitialized variable

(cherry picked from commit 65deab68f7918c82026951b04a414eefee2683b2)

guard against missing geometry

(cherry picked from commit d4d247866eac108162f43dae2c6ddbd9c12382a6)

guard against missing Foundry

(cherry picked from commit 92c15e8b299504ef76847cceb5911ef6c7ff26f1)

guard against missing grandfather layout

(cherry picked from commit f9164c1785432996092d376fb3983e1a3f78dad7)

remove misleading comment

(cherry picked from commit 66bd1e491102de97ceeb1db5705a15ff2dd69a58)

guard against corrupt LwpTocSuperLayout

(cherry picked from commit e0dca588239c0902ea90fcdc2b6d0ee2b1525ec2)

don't trust that this is what its supposed to be

(cherry picked from commit f792baefbfb645eafd5e6b7073bfe6e389d666dc)

guard against missing HeadHolder

(cherry picked from commit ca868de5e41b45a077949e40ef80f063c362892b)

avoid divide by zero

(cherry picked from commit 92b936e3ef947cc096b1445455332625900c3024)

guard against missing Foundry

(cherry picked from commit ed09d4f55d752dbc7d815fdc90e6cbe2656690b7)

guard against missing range

(cherry picked from commit 1aff042d88b2d6d3c3b7ed9db4b36bed640a0f06)

there can be 0 columns

(cherry picked from commit 6857a386a4cfe4ddb42515cb00df5bd6648d0964)

need dynamic casts here, etc.

(cherry picked from commit 46fe3bddebf30775ae19eaa0fefe1d8e2f78eced)

fix

check is within legal bounds

(cherry picked from commit 8410527550ef6db8348e8590eb0c52bccbe40310)

add a reference to ensure pPara exists until end of scope

(cherry picked from commit 61f55b25c62eaa2714ad8b991edcf54be5e41e0c)

this needs to be a dynamic cast

(cherry picked from commit 67296edb5c8c7cbb185fe2d31c46eadc5dd927b8)

detect infinite recurse in object creation

(cherry picked from commit 48c3eb3c91fd98c313bcec18f24cc949d6e788b3)

check for null content

(cherry picked from commit 4a573e67c67ddf15403a79e7ec8d984d189dc83a)

check for null Modifiers

(cherry picked from commit 6834384e80cf5cd374cdec471ce385ba2ca94580)

guard against broken formula and bad lengths

(cherry picked from commit 1e0b9881b4dc7d002d5da767f1476fb1c2147fc7)

guard against empty Story

(cherry picked from commit ef68438d384ed6dd919fa0f1a3830d2171f8e002)

need a dynamic cast here

53rd and final distinct crash fix of this sequence

(cherry picked from commit 3735b05668ffcaa37fcecf2907478616db52f2b4)

coverity#1341875 Division or modulo by float zero

(cherry picked from commit 18952ac1de81b522f5fef36ff922c4a0dc29499d)

guard against missing m_pXFContainer

(cherry picked from commit 13eaf4dad1324b4f2d909424b2bf06f75102f01f)

guard against missing table

(cherry picked from commit 0034019480167d50df33865389a6d21e8d5b9cec)

guard against empty XFDrawObjects

(cherry picked from commit e9801b286b7af0a6043a3a70090a49c5959abe16)

this cast needs to be dynamic

(cherry picked from commit 8d57f2fb953f031c48892366ce52f6d4fcb9c025)

this cast needs to be dynamic

(cherry picked from commit 25632b8ffe53dd18faaab2f5c019f7a401ebf579)

check all obj().get() casts with dynamic_cast

(cherry picked from commit 411dc2058d222a5c2f9b8b159b9384086c9219a5)

guard against missing Container Layout

(cherry picked from commit dd43c614980ed330936df1abcc484452e1c71a09)

guard against null pContent

(cherry picked from commit c910e229aa19edd0502aa05dffedc91dd727da6f)

guard against infinite recursion

(cherry picked from commit 5df326438fd3a5613a52b4de1935426911ff1301)

cppcheck: fix memleak in lotuswordpro

(cherry picked from commit 6e1efd486dfd5a4bcff1405158c9e40e0c2b6524)

infinite recurse protection

(cherry picked from commit fb8cba16caa87bf21fdd2747b22d90d913557dac)

need more dynamic casts here

(cherry picked from commit 5d8449cd14aa3d08929bb25626ab54aa7515f47d)

recursion protection

(cherry picked from commit 4e6df6de1a95b6b4194cf930cabaae7fde3b6960)

protect against missing Foundry

(cherry picked from commit ddc7d96a399822c2f29dcaca8222dfb96c383576)

guard against missing header rows

(cherry picked from commit 2487ba80581d8b0f50be40a26255789e1a050e95)

deploy references to keep layout alive long enough

(cherry picked from commit 1deae8a2d92747ad69b024513ddae93cc8927d29)

use more references to fix life cycles

(cherry picked from commit 62a6cadbab6c7bdfbd605c1c75c250904ed10442)

use more references to fix life cycles

(cherry picked from commit a1426bc54b11eb48fdefaf7e8dfd7996e5c7e4d5)

deploy references to keep layout alive long enough

(cherry picked from commit fdf122378d5dfa7160fa29eace026424b125e3e4)

use more references to fix life cycles

(cherry picked from commit 0876868a14c7d139ed2a79ece989c84239a2c853)

protect both EnumNamedProperty branches the same way

(cherry picked from commit a065eda2383e8d2d8de3cf0a280f6699c05da425)

guard against no container layout

(cherry picked from commit c6a2df4061de028eb9d7fb752051ecb9f1621fef)

guard against invalid Layout Scale

(cherry picked from commit c66ed9591217a612c7adc22757ea2b760a716ee3)

use more references to fix life cycles

(cherry picked from commit a258c3a6503b4fd76ad2b0f705fdd7f472f58c4b)

use more references to fix life cycles

(cherry picked from commit a23f7b3c14ad0e88264aca197a979aefcc9c0670)

use more references to fix life cycles

(cherry picked from commit 64cfe976c36cb930e0a96557ba7d9eb99442fc59)

hold WaterMarkLayout by reference

(cherry picked from commit 80509545cc43893776dd24f441e9b95567ce06db)

most casts and checks

(cherry picked from commit 01f920f2cece7a05ea075130c19229029efe7c0f)

font might be null

(cherry picked from commit 00bccc565d1bcd4bd620bb9b33b9f1d07fb5f13e)

more use of references to avoid crashing

(cherry picked from commit 69d166a0277d21d63b97ffc965d82bb301d55502)

more lifecycle protection

(cherry picked from commit 012bdecfcd7094403516c98bd5231fe1ef6f7e9d)

guard against infinite recursion

(cherry picked from commit 76220aafe0bffe20f10b07c725cd096adb56b108)

fix

need more References for life cycle fixes here

32nd and final distinct crash fix of this sequence

(cherry picked from commit 9550737e5db7415a679aec8a64d6f724962b8750)

loplugin:literaltoboolconversion

(cherry picked from commit 658c66882f76885d5b0df88e254740e499dcaf4c)

clear objects from duplicate ids early

(cherry picked from commit 480fb6ca369f5a347489414e9d314c802b1ee7aa)

ensure IsPage layout truly is a LwpPageLayout

(cherry picked from commit 0e6ea7b9fa8f3748d0ced2122fa0a7c7698c1f93)

add missing include

(cherry picked from commit 6be05a082543acb0e8005f369551157a8a99f242)

more recursion protection

(cherry picked from commit e3d2e376426b5237ded121d172324ef4ced5c3e0)

loplugin:implicitboolconversion

(cherry picked from commit fd433a12691649604bd67732ad08e892ba47f23a)

These would probably wreak havoc

...judging by how XFStyleContainer appears to own the pointers in m_aStyles, but
are apparently not needed anyway

(cherry picked from commit 98498fc7632f5cf55ba1cf0ac857af3a70ee10bd)

guard against null Foundry

(cherry picked from commit 2f0fba494e78ede3b6691534983f6dd7e0677a7e)

fix

crashtesting: this can happen with a broken document

(cherry picked from commit dfa979ffe51b32297f45faa037584074173682e5)

crashtesting: these can happen with broken documents

(cherry picked from commit 742bcd2b2d23ae05bfcf356db69f79f33d20f53f)

guard against missing XFContentContainer

(cherry picked from commit 0063b891424ba7023d376d12a7c54522bca087c6)

coverity#1343623 Logically dead code

(cherry picked from commit 8f3c796ecf926f81f6229fbb040095286c8adbfe)

coverity#1343624 Unchecked dynamic_cast

(cherry picked from commit 26fddc3196c7ab932ada544b84b74da06fa2596d)

coverity#1343625 Unchecked dynamic_cast

(cherry picked from commit 9e83e31019cdc68e5324a10ef76417b46720cfe9)

coverity#1343626 Unchecked dynamic_cast

(cherry picked from commit c2f1731685014b9df386dfb59900783c3ca3acb7)

coverity#1343627 Unchecked dynamic_cast

(cherry picked from commit 1276f6daf28f61d911da9885e0cac738931e4de4)

coverity#1343629 Unchecked dynamic_cast

(cherry picked from commit 274d265e42ab89be29af21ef5cc1cbf20b3d35a2)

1343630 Dereference after null check

(cherry picked from commit 960cfb7e3ba56fe06f45c523e086ee6d4b95e685)

guard against missing ContentContainer

(cherry picked from commit 8a05b74eeb8d5e0955fbe3cefd945cdc9bffa3f5)

guard against missing DropcapMgr and Foundry

(cherry picked from commit 330127baf96c417e0eeaef9808d124788b547cf3)

guard against missing Foundry

(cherry picked from commit 7f9b57bda4d88262ecbe45188888c744913b9770)

guard against missing Container Layout

(cherry picked from commit 932c74e38ca397d82d609831e79ceaef2183cf64)

guard against infinite recursion in GetGeometry

(cherry picked from commit 9ec011f6874cf663db54d0420c41d9299e4ed882)

return early if Container invalidated

(cherry picked from commit 78c6be9cf3c9c3c87d2f41981bdc61047171eafe)

guard against infinite recursion in MarginsSameAsParent

(cherry picked from commit e8dc85c2b3fd197aa5d484be3fc2cb25f7bd2412)

cppcheck: silence unusedPrivateFunction

somewhat odd this-> syntax here

(cherry picked from commit 68f519f5d3f90a9f7ae7c91dc1d6653440a9c6d6)

fix

Change-Id: I63420f0bae89bae08ae71dc7dedf92dd90ca9728
f89368adbecbcf7197afe714fd725497c573b6a9
cbf0e6ff8bad7e83c596f4e18003a06ba361b5eb
0ca967e6e07cc00159612dd8e19648445e0a011a
dc2e0f62a29b635381685f81d0f9f88b3eef659d
dffbed313769b232e5476a10ed4df815719606ed
5160fc1e212996ddea89075d86c6f3a0d0c5da94
5c029dc35b265d9e11a0a222170dad4d6a55ed2f
715d49722ebe4658c108cb9b7bd6fa3934d973f8
883d090901cf0be0978579ade24beaed6f6ae5c1
4ffc8cdcb67ecb4c4afa641c9219dd465fe13d29
429409285b9178180579a17acab0c484041529bb
36d43958bf578e677f216aea09400ab764ed82ae
7a5d7496b038cd094ab11ef8cbc1823ffc5bc130
e3f78b2cc9e162ac9777c7e5f4164a12bc9a62a4
bec141be604f15d1c6358d3365a7a3e60c135f1f
91bd2e9d4989ce0c80f91b7994a8ebe59cf6d110
e27c7c5d1b0c87a0e440cf57db436c7c46d46788
a7eb16a63c53a43f6c57e26aa629f7c9cf7ef089
439c8d66a826624a3131b56d96ff3fdd030abb28
a060ac0fb631d076fefb168ee96d8d2054634fca
1fa14c04646bf9faf35de9e54969589be64ea006
f934445fc597015198486445c9d33ad2994d6fee
41b8514a127d463ac951e5855f09416fa0456b1b
02e507f4b7d78efacc5b735ca24adb83633749b9
30bbf7bab8cb37422fd20a25741e564500faa31c
ad2788a7e5e7ee3b3107eab37cde2d3d38eae005
214991e5d34c8e335cdd8ea482f8fa4913ba637b
3af47ab3af5e28a865a77a592f6a92edb46e4f2b
788ec28424bb638f727901b7d25e48a284ab67d0
226f67c6c49bfcbc1fa0ef40fc9f7d5548fa043b
1c6b58b58ab489a17419dbf7cd4ecec63359b7f3
d5295d294b56d6504d962ee1941a350a595031e7
173b12f0a28f917f24d1923e531da1b798beb1f6
ae617e9731dbdcedf8aa6bf02977911dce60bdd0
7416d709de79ae88cf4a9546d8adfecec9935238
093546793755f8a3a6e8a3c23fb8565ad27b75da
2d3369aed4b242acc936a71ee9be573c1ebc7a8f
217c0aedca4eadc347c103899d96c70cf9606038
c7cc6c807905e0c4ffbf2a3f009b27be6100cdf0
1d4825c2136e516baf759f4b2c40c911547b93d7
f83e255da1683779458556a3ab1af4f00b19265b
abedfcce9d8ef21172e6bd0d654f3a258aae97e3
9cf72b27219489a5508786881ecd95e5820c71ac
6ac074c7fe2821983b4a056e28fc5379f7a93974
e7f4cd2b411eb678642ea859d261b1b672752d94
f5c50cddfee88cc92852737c1459ebe94b7256bb
9147dc2bab312639a04d2e822cf99745d38d3b8d
4bc7a7283f63124ccb50957ea64791644e01e267
a6502afde54dbf379bc9951c80c6594f1f436ef5
11f6381374c7fc12374cd5089e581ddc777005e2
43e195df570990f21c780311a98be64b682e5315
04809443b5dc50904654936e608360b57c2e85c3
b08403edf805367c7392325fcfb66bc7ed4d6f6a
1149eb9f5946228a2448c121e7ec7211861b3b3d
6b2945f1d5a1654f6b5d6a5f5287b4cb9514d97c
d6961e7c35df56ca37d5cb57c2d3d1e03e31dd6d
1282b2c3c920ef89460aa57026d89c8928155116
0408b2956c2156c30e60cf5d21efbac2e0566d10
18648e74d16b932cfa6fbd2057d1e9987c498fd4
f0450bdab2c315a94a75060e1fadf2f8513f9dae
c12ee6f4366285fc05fd59b94ec371d8ca013a4a
7d6502c752a7b9f39f94d5cddd5f44240e0b6d04
d15a2692f8aa572c0b5db87f04761ca3eac0249e
cdb0694b9c1771a475368aeeb4cb11f4ba8b84f3
e367e88df7165d728015a1b3987b220a23203765
578343719d2d7feff51775ff1b073b6584e76f82
d8f1d152e7ea3405c0c17542db7e2a658c0e60a7
e3f9e52575436b9505a412b20c7e1b24fa61f6cb
0067ead587c25296ab195b80f461fb0766b1899a
d606e58292a25309adb67cf05cc9b9a237e83f81
e56eb27bb1827860b2600a5586e866e39cd31518
824c29b39fe1e9e631a21f09611758bea03b0ca9
842122f7e2cba48d4798905f41f63b3e06775d00
ab13d67fdc218c84400a4d84e177e5096bb68379
de44aed9a3189b0fd21a8adc039eb61bd3d3dc14
d170132c2082fd4905192adc840125088ef5da27
3a07361bb66a62533475618c9b50f184d791a799
5c0800c353b46ea1fe359a893bdd8215f70cd809
00bde6564be6fb7c7f6d2ccb1faa7dd94e414635
9deb28a3a5420a43f8604a56145c8274bb4cc8d9
af8e7a46be9c92a7cd11136cb903cc4b9ffe54f5
6d02cc8dc894ef7e2903874b0ab973f7f1b3225d
763aa5874d0c1f977decff88414eea6247f96405
d9525918eab822b39576a1efce7dc3a3bd93e78d
a4f2dff9c3cb81bb5056f005b23420cab1ca49e5
7c55986fba87dea0c519f60240605db03262dfe9
15b8aa6b95264d56018fbd5c22bcb0d04e43cf91
7139e67e7b5bcd7e1867dff1cfbd53fa0f5748b7
df84ababeeb109a411c03a18d3a9aa6e136c7ef4
66fda143ba1f0fa6f2638a8bd4936c75a6c40980
e5c0317f842258fe42f894dbace0ea0e328f288a
aa28ef00572eb9c4ba3a6d8ae0c668b7b0132f56
670f00b0beb77e5014c3dd4a4798e69ece882b87
b70b5ebc498e6517ef40d0515e69e2e77288c1b5
0c903533542608c1d7a3c97e2be7f2b7624b265b
cac22d3c179eca42e01a724f7592ee4b34dd45e3
54931f0dccabb2d9a58cc92ef5ebf3469f93f03c
93669a6460806c1d4c35669a639667b0c6f3f4ab
f615c68bfaf145d81dab96b05e7b903c1a6b03cf
84541445e44f14244030b9970e0a48e72edacea7
50fd30114b45d1225adb7bfd5d77cb89a229aac8
83928638a390f434c431487b1cb13633f24de9ec
b14639d532da5bffdfe7e0a7bb362b20a7f25dfb
7dc7739ee7b958319ddd4e0cf262254728ef0569
8be1b8298f096791628d1f51d36ceeabdc804f9a
d0d9bb1d1abe6f6c9440bf979407d13db49696c4
03748695efbe17d59aba09f88d5c6fcd174113c9
158632de6898685e34d362cc274e959bb5c2e2d7
1b566c835b6cdc733d0aa4393d3b3ce2ff7b764f
26017146a23136a1407fc21311f7fad95bc41db0
b9f41091737e66995f332c06083d51408eb1497b
9048966bd41e79bb7a2e9bd24c1dc611acefef1f
0caab9e329a465e10bf3ed321c55c287371bd437
3ca21608d633145c8a5238b947e22671460e9195
326d306af89dcb0611e07689d2c26a828f3896ee
0a7b6c1037ea9442001b4eb9a9bb96778c0dedb6
3bd1222642ab3e8d24bf0f5cca897c2ce638757a
5ca64680bf8b7b5198f30dac4f4558069d476970
8aabc68e8dfb9376cafe4cc709b18344da083a01
b7f3037d35a7dc4930c0c99007a754081093adb6
001f68a2033c7c4f631b17cda6653d845c8d1e40
35f77345804b3ebfda9d427de79968b193d1419a
c974159f816bae465339e1b9abd2e247bbc2f206
bcf05263f7bea50f70d55f4d8944d0a41d54851d
a303a5dc97fb5e491e86a3484040e657f1b480d4
b534e4e8ecf50a9159c5e98e2c899bf13f44c654
52e6d6c9cb48880185293fb9825d7a6530ee767d
83c0febcbbf0f19a05818e0575921d1d6254935f
93b7298d785e57a4ef854cea3e9cd5c2c0f35849
81223b868f069755e8a46c57bfe0282021f26de7
4f2c5d53148deb02d990edc42140c23f02409cea
1007d4fac2514bc165941c70109cd8e3d57153cd
5ba66ff020b8226ac01af985f68c3ef67057c01a
e43b13448a6cacd3af4822b85f06ed84a2d38ff9
901f77f5846512cb528f2e14bbc50409fa29bef2
3983070f1fe447e4b75b956cf95d3b3c5266b3f9
09c1ccb850f0cb2365e52ee6ffd293ccf34ad00e
c69e72e15a9f90741e9422e14eb9a6d4784c7aa9
9861a6e8da21538a7929e6c92b0b74b69fe60e8a
---
 include/basebmp/packedpixeliterator.hxx            |   6 +-
 lotuswordpro/source/filter/bencont.cxx             |   2 +-
 lotuswordpro/source/filter/lwp9reader.cxx          |   2 +-
 lotuswordpro/source/filter/lwpatomholder.cxx       |   2 +-
 lotuswordpro/source/filter/lwpbackgroundstuff.cxx  |  25 +-
 lotuswordpro/source/filter/lwpbulletstylemgr.cxx   |   4 +-
 lotuswordpro/source/filter/lwpcelllayout.cxx       |  46 +-
 lotuswordpro/source/filter/lwpcontent.cxx          |  20 +-
 lotuswordpro/source/filter/lwpcontent.hxx          |   2 +-
 lotuswordpro/source/filter/lwpdivinfo.cxx          |  12 +-
 lotuswordpro/source/filter/lwpdoc.cxx              |  97 ++--
 lotuswordpro/source/filter/lwpdoc.hxx              |  23 +-
 lotuswordpro/source/filter/lwpdrawobj.cxx          |  72 +--
 lotuswordpro/source/filter/lwpfilter.cxx           |   2 +-
 lotuswordpro/source/filter/lwpfnlayout.cxx         |  16 +-
 lotuswordpro/source/filter/lwpfont.cxx             |   7 +-
 lotuswordpro/source/filter/lwpfootnote.cxx         |  10 +-
 lotuswordpro/source/filter/lwpfoundry.cxx          |  51 ++-
 lotuswordpro/source/filter/lwpframelayout.cxx      | 114 ++---
 lotuswordpro/source/filter/lwpfrib.cxx             |  16 +-
 lotuswordpro/source/filter/lwpfribbreaks.cxx       |   7 +-
 lotuswordpro/source/filter/lwpfribframe.cxx        |   8 +-
 lotuswordpro/source/filter/lwpfribmark.cxx         |  22 +-
 lotuswordpro/source/filter/lwpfribptr.cxx          |  21 +-
 lotuswordpro/source/filter/lwpfribsection.cxx      |  88 ++--
 lotuswordpro/source/filter/lwpfribtable.cxx        |  28 +-
 lotuswordpro/source/filter/lwpgrfobj.cxx           |  28 +-
 lotuswordpro/source/filter/lwpidxmgr.cxx           |  11 +-
 lotuswordpro/source/filter/lwplayout.cxx           | 510 ++++++++++++---------
 lotuswordpro/source/filter/lwplayout.hxx           | 130 ++++--
 lotuswordpro/source/filter/lwpnotes.cxx            |  12 +-
 lotuswordpro/source/filter/lwpobj.cxx              |   3 +-
 lotuswordpro/source/filter/lwpobj.hxx              |  29 +-
 lotuswordpro/source/filter/lwpobjfactory.cxx       |  17 +-
 lotuswordpro/source/filter/lwpobjfactory.hxx       |   5 +-
 lotuswordpro/source/filter/lwpobjid.cxx            |   6 +-
 lotuswordpro/source/filter/lwpobjid.hxx            |  12 +-
 lotuswordpro/source/filter/lwpobjstrm.cxx          |   2 +-
 lotuswordpro/source/filter/lwpoleobject.cxx        |   6 +-
 lotuswordpro/source/filter/lwppagelayout.cxx       |  59 +--
 lotuswordpro/source/filter/lwppara.cxx             | 101 ++--
 lotuswordpro/source/filter/lwppara.hxx             |   2 +
 lotuswordpro/source/filter/lwppara1.cxx            |  18 +-
 lotuswordpro/source/filter/lwpparaproperty.cxx     |   4 +-
 lotuswordpro/source/filter/lwpparastyle.cxx        |   5 +-
 lotuswordpro/source/filter/lwpproplist.cxx         |  11 +-
 lotuswordpro/source/filter/lwprowlayout.cxx        |  11 +-
 .../source/filter/lwpsdwgrouploaderv0102.cxx       |  22 +-
 lotuswordpro/source/filter/lwpsilverbullet.cxx     |  31 +-
 lotuswordpro/source/filter/lwpsilverbullet.hxx     |   2 +-
 lotuswordpro/source/filter/lwpstory.cxx            | 153 +++----
 lotuswordpro/source/filter/lwpstory.hxx            |   2 +-
 lotuswordpro/source/filter/lwptable.hxx            |   5 +-
 lotuswordpro/source/filter/lwptablelayout.cxx      | 135 +++---
 lotuswordpro/source/filter/lwptabrack.cxx          |   7 +-
 lotuswordpro/source/filter/lwptblcell.cxx          |   2 +-
 lotuswordpro/source/filter/lwptblcell.hxx          |   2 +-
 lotuswordpro/source/filter/lwptblformula.cxx       |  21 +-
 lotuswordpro/source/filter/lwptoc.cxx              |  32 +-
 lotuswordpro/source/filter/lwptools.cxx            |   8 +-
 lotuswordpro/source/filter/lwptools.hxx            |   2 +-
 lotuswordpro/source/filter/lwpvpointer.cxx         |   2 +-
 lotuswordpro/source/filter/tocread.cxx             |   4 +-
 lotuswordpro/source/filter/xfilter/xfcell.cxx      |   9 +-
 lotuswordpro/source/filter/xfilter/xfdrawgroup.hxx |   6 +-
 lotuswordpro/source/filter/xfilter/xfendnote.hxx   |   2 +-
 lotuswordpro/source/filter/xfilter/xfheader.hxx    |   2 +-
 lotuswordpro/source/filter/xfilter/xfinputlist.hxx |   2 +-
 .../source/filter/xfilter/xflineheight.hxx         |   2 +-
 lotuswordpro/source/filter/xfilter/xfliststyle.cxx |   5 +-
 lotuswordpro/source/filter/xfilter/xfliststyle.hxx |   7 +-
 .../source/filter/xfilter/xfpagemaster.hxx         |   2 +-
 lotuswordpro/source/filter/xfilter/xfparastyle.cxx |   2 +
 lotuswordpro/source/filter/xfilter/xfstylecont.cxx |  30 +-
 lotuswordpro/source/filter/xfilter/xfstylecont.hxx |   4 +-
 .../source/filter/xfilter/xfstylemanager.cxx       |   2 -
 lotuswordpro/source/filter/xfilter/xftable.cxx     |  16 +-
 lotuswordpro/source/filter/xfilter/xftable.hxx     |   2 +-
 sax/source/tools/converter.cxx                     |   4 +-
 79 files changed, 1226 insertions(+), 986 deletions(-)

diff --git a/include/basebmp/packedpixeliterator.hxx b/include/basebmp/packedpixeliterator.hxx
index 6642062..9d83640 100644
--- a/include/basebmp/packedpixeliterator.hxx
+++ b/include/basebmp/packedpixeliterator.hxx
@@ -79,7 +79,7 @@ public:
         num_intraword_positions=sizeof(value_type)*8/bits_per_pixel,
         /** Bit mask for one pixel (least significant bits)
          */
-        bit_mask=~(~0 << bits_per_pixel)
+        bit_mask=~(~0U << bits_per_pixel)
     };
 
 private:
@@ -249,7 +249,7 @@ public:
         num_intraword_positions=sizeof(value_type)*8/bits_per_pixel,
         /** Bit mask for one pixel (least significant bits)
          */
-        bit_mask=~(~0 << bits_per_pixel)
+        bit_mask=~(~0U << bits_per_pixel)
     };
 
 private:
@@ -502,7 +502,7 @@ public:
         num_intraword_positions=sizeof(value_type)*8/bits_per_pixel,
         /** Bit mask for one pixel (least significant bits)
          */
-        bit_mask=~(~0 << bits_per_pixel)
+        bit_mask=~(~0U << bits_per_pixel)
     };
 
     // TODO(F2): direction of iteration (ImageIterator can be made to
diff --git a/lotuswordpro/source/filter/bencont.cxx b/lotuswordpro/source/filter/bencont.cxx
index 14951bf3..51587ce 100644
--- a/lotuswordpro/source/filter/bencont.cxx
+++ b/lotuswordpro/source/filter/bencont.cxx
@@ -237,7 +237,7 @@ BenError LtcBenContainer::SeekFromEnd(long Offset)
 */
 LtcUtBenValueStream * LtcBenContainer::FindNextValueStreamWithPropertyName(const char * sPropertyName, LtcUtBenValueStream * pCurrentValueStream)
 {
-    CBenPropertyName * pPropertyName;
+    CBenPropertyName * pPropertyName(nullptr);
     RegisterPropertyName(sPropertyName, &pPropertyName);        // Get property name object
 
     if (NULL == pPropertyName)
diff --git a/lotuswordpro/source/filter/lwp9reader.cxx b/lotuswordpro/source/filter/lwp9reader.cxx
index b2a91ec..bba45304 100644
--- a/lotuswordpro/source/filter/lwp9reader.cxx
+++ b/lotuswordpro/source/filter/lwp9reader.cxx
@@ -192,7 +192,7 @@ void Lwp9Reader::ParseDocument()
 
     //Register Styles
     RegisteArrowStyles();
-    doc->RegisterStyle();
+    doc->DoRegisterStyle();
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
     pXFStyleManager->ToXml(m_pStream);
 
diff --git a/lotuswordpro/source/filter/lwpatomholder.cxx b/lotuswordpro/source/filter/lwpatomholder.cxx
index 922ef65..f28a4c0 100644
--- a/lotuswordpro/source/filter/lwpatomholder.cxx
+++ b/lotuswordpro/source/filter/lwpatomholder.cxx
@@ -84,7 +84,7 @@ void LwpAtomHolder::Read(LwpObjectStream *pStrm)
 
     //rtl_TextEncoding rEncode =  osl_getThreadTextEncoding();
     rtl_TextEncoding rEncode =  RTL_TEXTENCODING_MS_1252;
-    len = LwpTools::QuickReadUnicode(pStrm, m_String, diskSize-sizeof(diskSize), rEncode);
+    LwpTools::QuickReadUnicode(pStrm, m_String, diskSize-sizeof(diskSize), rEncode);
 }
 /**
  * @descr       skip the atom holder in object stream
diff --git a/lotuswordpro/source/filter/lwpbackgroundstuff.cxx b/lotuswordpro/source/filter/lwpbackgroundstuff.cxx
index 8a19cc9..4580721 100644
--- a/lotuswordpro/source/filter/lwpbackgroundstuff.cxx
+++ b/lotuswordpro/source/filter/lwpbackgroundstuff.cxx
@@ -83,14 +83,11 @@ void LwpBackgroundStuff::GetPattern(sal_uInt16 btPttnIndex, sal_uInt8* pPttnArra
         assert(false);
         return;
     }
-    if (pPttnArray)
+    assert((2 < btPttnIndex) && (btPttnIndex < 72));
+    const sal_uInt8* pTempArray = s_pLwpPatternTab[btPttnIndex];
+    for(sal_uInt8 i = 0; i < 32; i++)
     {
-        assert((2 < btPttnIndex) && (btPttnIndex < 72));
-        const sal_uInt8* pTempArray = s_pLwpPatternTab[btPttnIndex];
-        for(sal_uInt8 i = 0; i < 32; i++)
-        {
-            pPttnArray[i] = (i%4 == 0) ? pTempArray[7-i/4] : 0;
-        }
+        pPttnArray[i] = (i%4 == 0) ? pTempArray[7-i/4] : 0;
     }
 }
 
@@ -107,28 +104,22 @@ LwpColor* LwpBackgroundStuff::GetFillColor()
 XFBGImage* LwpBackgroundStuff::GetFillPattern()
 {
     // not pattern fill?
-    if (!this->IsPatternFill())
+    if (!IsPatternFill())
     {
         return NULL;
     }
 
     // get pattern array from pattern table
-    sal_uInt8* pPttnArray = new sal_uInt8 [32];
-    this->GetPattern(m_nID, pPttnArray);
+    sal_uInt8 aPttnArray[32];
+    GetPattern(m_nID, aPttnArray);
 
     // create bitmap object from the pattern array
     Bitmap aBmp( Size(8, 8), 1 );
     BitmapWriteAccess* pWA = aBmp.AcquireWriteAccess();
     sal_uInt8* pBuf = pWA->GetBuffer();
-    memcpy(pBuf, pPttnArray, 32);
+    memcpy(pBuf, aPttnArray, 32);
     aBmp.ReleaseAccess(pWA);
 
-    if (pPttnArray)
-    {
-        delete [] pPttnArray;
-        pPttnArray = NULL;
-    }
-
     // create XOBitmap object from bitmap object
     XOBitmap aXOBitmap( aBmp );
     aXOBitmap.Bitmap2Array();
diff --git a/lotuswordpro/source/filter/lwpbulletstylemgr.cxx b/lotuswordpro/source/filter/lwpbulletstylemgr.cxx
index c71cf15..23fcb30 100644
--- a/lotuswordpro/source/filter/lwpbulletstylemgr.cxx
+++ b/lotuswordpro/source/filter/lwpbulletstylemgr.cxx
@@ -174,7 +174,7 @@ OUString LwpBulletStyleMgr::RegisterBulletStyle(LwpPara* pPara, LwpBulletOverrid
             pListStyle->SetListBullet(nC, pSilverBullet->GetBulletChar(), pSilverBullet->GetBulletFontName(),
                 pSilverBullet->GetPrefix(), pSilverBullet->GetSuffix());
 
-            if (pIndent->GetMRest() > 0.001)
+            if (pIndent->GetMRest() > 0) /* note: used to be 0.001, no idea why */
             {
                 pListStyle->SetListPosition(nC, 0.0,
                     LwpTools::ConvertToMetric(LwpTools::ConvertFromUnits(pIndent->GetMRest())), 0.0, eAlign);
@@ -236,7 +236,7 @@ OUString LwpBulletStyleMgr::RegisterBulletStyle(LwpPara* pPara, LwpBulletOverrid
                         aSuffix = aParaNumbering.pSuffix->GetText();
                     }
 
-                    pListStyle->SetListBullet(nPos, LwpSilverBullet::GetNumCharByStyleID(pParaNumber).toChar(),
+                    pListStyle->SetListBullet(nPos, LwpSilverBullet::GetNumCharByStyleID(pParaNumber),
                         "Times New Roman", aPrefix, aSuffix);
                 }
 
diff --git a/lotuswordpro/source/filter/lwpcelllayout.cxx b/lotuswordpro/source/filter/lwpcelllayout.cxx
index 39717cd..f013fd7 100644
--- a/lotuswordpro/source/filter/lwpcelllayout.cxx
+++ b/lotuswordpro/source/filter/lwpcelllayout.cxx
@@ -121,8 +121,9 @@ LwpTable * LwpCellLayout::GetTable()
  */
 void LwpCellLayout::SetCellMap()
 {
-    // this function is called from LwpTableLayout, so it can't be NULL
-    GetTableLayout()->SetWordProCellMap(crowid, ccolid, this);
+    LwpTableLayout * pTableLayout = GetTableLayout();
+    if (pTableLayout)
+        pTableLayout->SetWordProCellMap(crowid, ccolid, this);
 }
 /**
  * @short  Get actual width of this cell layout
@@ -221,7 +222,7 @@ void LwpCellLayout::ApplyWatermark(XFCellStyle *pCellStyle)
  */
 void LwpCellLayout::ApplyPatternFill(XFCellStyle* pCellStyle)
 {
-    XFBGImage* pXFBGImage = this->GetFillPattern();
+    XFBGImage* pXFBGImage = GetFillPattern();
     if (pXFBGImage)
     {
         pCellStyle->SetBackImage(pXFBGImage);
@@ -235,7 +236,7 @@ void LwpCellLayout::ApplyPatternFill(XFCellStyle* pCellStyle)
  */
 void LwpCellLayout::ApplyBackGround(XFCellStyle* pCellStyle)
 {
-    if (this->IsPatternFill())
+    if (IsPatternFill())
     {
         ApplyPatternFill(pCellStyle);
     }
@@ -269,7 +270,7 @@ void LwpCellLayout::ApplyFmtStyle(XFCellStyle *pCellStyle)
     if (!pLayoutNumerics)
     {
         // if current layout doesn't have format, go to based on layout
-        LwpCellLayout* pCellLayout = dynamic_cast<LwpCellLayout*>(m_BasedOnStyle.obj().get());
+        LwpCellLayout* pCellLayout = dynamic_cast<LwpCellLayout*>(GetBasedOnStyle().get());
         if (pCellLayout)
         {
             pLayoutNumerics = dynamic_cast<LwpLayoutNumerics*>(pCellLayout->GetNumericsObject().obj().get());
@@ -327,7 +328,7 @@ XFCell* LwpCellLayout::ConvertCell(LwpObjectID aTableID, sal_uInt16 nRow, sal_uI
     // we should judt its style by current position
     if (pTable->GetDefaultCellStyle() == GetObjectID())
     {
-        aStyleName = GetCellStyleName(nRow, nCol, pTable->GetTableLayout());
+        aStyleName = GetCellStyleName(nRow, nCol, pTable->GetTableLayout().get());
     }
 
     // content of cell
@@ -344,7 +345,7 @@ XFCell* LwpCellLayout::ConvertCell(LwpObjectID aTableID, sal_uInt16 nRow, sal_uI
 
 LwpPara* LwpCellLayout::GetLastParaOfPreviousStory()
 {
-    LwpObjectID* pPreStoryID = this->GetPreviousCellStory();
+    LwpObjectID* pPreStoryID = GetPreviousCellStory();
     if (pPreStoryID && !(pPreStoryID->IsNull()))
     {
         LwpStory* pPreStory = dynamic_cast<LwpStory*>(pPreStoryID->obj(VO_STORY).get());
@@ -422,10 +423,7 @@ LwpObjectID * LwpCellLayout::GetPreviousCellStory()
 LwpCellBorderType LwpCellLayout::GetCellBorderType(sal_uInt16 nRow, sal_uInt16 nCol, LwpTableLayout * pTableLayout)
 {
     if (!pTableLayout)
-    {
-        assert(false);
         return enumWholeBorder;
-    }
 
     // get left cell and judge if neighbour border is different
     XFBorders * pBorders = GetXFBorders();
@@ -571,8 +569,8 @@ void LwpCellLayout::RegisterDefaultCell()
  */
 void LwpCellLayout::RegisterStyle()
 {
-    LwpVirtualLayout * pParent = dynamic_cast<LwpVirtualLayout *>(GetParent().obj().get());
-    if (!pParent || pParent->GetLayoutType() != LWP_ROW_LAYOUT)
+    rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout *>(GetParent().obj().get()));
+    if (!xParent.is() || xParent->GetLayoutType() != LWP_ROW_LAYOUT)
     {
         // default cell layout, we must register 4 styles for it
         RegisterDefaultCell();
@@ -598,7 +596,7 @@ void LwpCellLayout::RegisterStyle()
     if (pObj.is())
     {
         pObj->SetFoundry(m_pFoundry);
-        pObj->RegisterStyle();
+        pObj->DoRegisterStyle();
     }
 
     //register child layout style
@@ -649,15 +647,15 @@ void LwpCellLayout::ApplyProtect(XFCell * pCell, LwpObjectID aTableID)
 {
     bool bProtected = false;
     // judge current cell
-    if (IsProtected())
+    if (GetIsProtected())
     {
         bProtected = true;
     }
     else
     {
         // judge base on
-        LwpCellLayout * pBase = dynamic_cast<LwpCellLayout *>(m_BasedOnStyle.obj().get());
-        if (pBase && pBase->IsProtected())
+        LwpCellLayout * pBase = dynamic_cast<LwpCellLayout *>(GetBasedOnStyle().get());
+        if (pBase && pBase->GetIsProtected())
         {
             bProtected = true;
         }
@@ -665,9 +663,9 @@ void LwpCellLayout::ApplyProtect(XFCell * pCell, LwpObjectID aTableID)
         {
             // judge whole table
             LwpTable * pTable = dynamic_cast<LwpTable *>(aTableID.obj().get());
-            LwpTableLayout * pTableLayout = pTable ? static_cast<LwpTableLayout *>(pTable->GetTableLayout()) : NULL;
-            LwpSuperTableLayout * pSuper = pTableLayout ? pTableLayout->GetSuperTableLayout() : NULL;
-            if (pSuper && pSuper->IsProtected())
+            rtl::Reference<LwpTableLayout> xTableLayout(pTable ? pTable->GetTableLayout() : nullptr);
+            LwpSuperTableLayout * pSuper = xTableLayout.is() ? xTableLayout->GetSuperTableLayout() : nullptr;
+            if (pSuper && pSuper->GetIsProtected())
             {
                 bProtected = true;
             }
@@ -695,8 +693,10 @@ LwpConnectedCellLayout::~LwpConnectedCellLayout()
  */
 void LwpConnectedCellLayout::SetCellMap()
 {
-    // this function is called from LwpTableLayout, so it can't be NULL
     LwpTableLayout * pTableLayout = GetTableLayout();
+    if (!pTableLayout)
+        return;
+
     sal_uInt16 nRowSpan = m_nRealrowspan;
 
     for (sal_uInt16 iLoop = 0; iLoop < nRowSpan; iLoop ++)
@@ -761,7 +761,11 @@ LwpCellBorderType LwpConnectedCellLayout::GetCellBorderType(sal_uInt16 nRow, sal
         }
     }
 
-    if ( (nRow + nRowSpan) == pTableLayout->GetTable()->GetRow() )
+    LwpTable* pTable = pTableLayout->GetTable();
+    if (!pTable)
+        throw std::runtime_error("missing table");
+
+    if ( (nRow + nRowSpan) == pTable->GetRow())
     {
         bNoBottomBorder = false;
     }
diff --git a/lotuswordpro/source/filter/lwpcontent.cxx b/lotuswordpro/source/filter/lwpcontent.cxx
index 77ae0d3..17be69b 100644
--- a/lotuswordpro/source/filter/lwpcontent.cxx
+++ b/lotuswordpro/source/filter/lwpcontent.cxx
@@ -125,17 +125,20 @@ void LwpContent::Read()
     pStrm->SkipExtra();
 }
 
-LwpVirtualLayout* LwpContent::GetLayout(LwpVirtualLayout* pStartLayout)
+rtl::Reference<LwpVirtualLayout> LwpContent::GetLayout(LwpVirtualLayout* pStartLayout)
 {
     return m_LayoutsWithMe.GetLayout(pStartLayout);
 }
 
 bool LwpContent::HasNonEmbeddedLayouts()
 {
-    LwpVirtualLayout* pLayout = NULL;
-    while( (pLayout = GetLayout(pLayout)) )
+    rtl::Reference<LwpVirtualLayout> xLayout;
+    while (true)
     {
-        if(!pLayout->NoContentReference())
+        xLayout = GetLayout(xLayout.get());
+        if (!xLayout.is())
+            break;
+        if (!xLayout->NoContentReference())
             return true;
     }
     return false;
@@ -143,10 +146,13 @@ bool LwpContent::HasNonEmbeddedLayouts()
 
 bool LwpContent::IsStyleContent()
 {
-    LwpVirtualLayout* pLayout = NULL;
-    while( (pLayout = GetLayout(pLayout)) )
+    rtl::Reference<LwpVirtualLayout> xLayout;
+    while (true)
     {
-        if(pLayout->IsStyleLayout())
+        xLayout = GetLayout(xLayout.get());
+        if (!xLayout.is())
+            break;
+        if (xLayout->IsStyleLayout())
             return true;
     }
     return false;
diff --git a/lotuswordpro/source/filter/lwpcontent.hxx b/lotuswordpro/source/filter/lwpcontent.hxx
index cd85bd5..b0900c2 100644
--- a/lotuswordpro/source/filter/lwpcontent.hxx
+++ b/lotuswordpro/source/filter/lwpcontent.hxx
@@ -110,7 +110,7 @@ protected:
     void Read() SAL_OVERRIDE;
 public:
     inline LwpAssociatedLayouts& GetLayoutsWithMe();
-    LwpVirtualLayout* GetLayout(LwpVirtualLayout* pStartLayout);
+    rtl::Reference<LwpVirtualLayout> GetLayout(LwpVirtualLayout* pStartLayout);
     inline bool IsActive();
     virtual bool IsTable();
     inline OUString GetClassName();
diff --git a/lotuswordpro/source/filter/lwpdivinfo.cxx b/lotuswordpro/source/filter/lwpdivinfo.cxx
index 2e97587..80884f7 100644
--- a/lotuswordpro/source/filter/lwpdivinfo.cxx
+++ b/lotuswordpro/source/filter/lwpdivinfo.cxx
@@ -112,15 +112,11 @@ void LwpDivInfo::Read()
     m_FillerPageTextID.ReadIndexed(m_pObjStrm);
 
     // read external file object stuff
-#if !defined(NDEBUG)
-    sal_uInt16 type =
-#endif
-    m_pObjStrm->QuickReaduInt16();
+    sal_uInt16 type = m_pObjStrm->QuickReaduInt16();
     //cpExternalFile = LNULL;
 
-    assert(type==0);
+    SAL_WARN_IF(type != 0, "lwp", "should be 0");
     m_pObjStrm->SkipExtra();
-
 }
 
 void LwpDivInfo::SkipFront()
@@ -166,10 +162,10 @@ sal_uInt16 LwpDivInfo::GetMaxNumberOfPages()
     LwpDocument* pDiv = GetDivision();
     if(!pDiv)
         return 0;
-    LwpDLVListHeadTailHolder* pHeadTail = static_cast<LwpDLVListHeadTailHolder*>(pDiv->GetPageHintsID().obj().get());
+    LwpDLVListHeadTailHolder* pHeadTail = dynamic_cast<LwpDLVListHeadTailHolder*>(pDiv->GetPageHintsID().obj().get());
     if(pHeadTail)
     {
-        LwpPageHint* pPageHint =static_cast<LwpPageHint*>(pHeadTail->GetTail().obj().get());
+        LwpPageHint* pPageHint = dynamic_cast<LwpPageHint*>(pHeadTail->GetTail().obj().get());
         if(pPageHint && !pPageHint->GetPageLayoutID().IsNull())
         {
             return pPageHint->GetPageNumber();
diff --git a/lotuswordpro/source/filter/lwpdoc.cxx b/lotuswordpro/source/filter/lwpdoc.cxx
index e2ab2a7..7ef68f0 100644
--- a/lotuswordpro/source/filter/lwpdoc.cxx
+++ b/lotuswordpro/source/filter/lwpdoc.cxx
@@ -70,7 +70,8 @@
 
 LwpDocument::LwpDocument(LwpObjectHeader& objHdr, LwpSvStream* pStrm)
     : LwpDLNFPVList(objHdr, pStrm)
-    , m_pOwnedFoundry(NULL)
+    , m_pOwnedFoundry(nullptr)
+    , m_bGettingFirstDivisionWithContentsThatIsNotOLE(false)
     , m_nFlags(0)
     , m_nPersistentFlags(0)
     , m_pLnOpts(NULL)
@@ -166,7 +167,7 @@ void LwpDocument::Parse(IXFStream* pOutputStream)
     rtl::Reference<LwpObject> pDocSock = GetSocket().obj( VO_DOCSOCK );
     if(pDocSock.is())
     {
-        pDocSock->Parse(pOutputStream);
+        pDocSock->DoParse(pOutputStream);
     }
 }
 
@@ -224,7 +225,7 @@ void LwpDocument::RegisterStyle()
     rtl::Reference<LwpObject> pDocSock = GetSocket().obj();
     if(pDocSock.is())
     {
-        pDocSock->RegisterStyle();
+        pDocSock->DoRegisterStyle();
     }
 }
 /**
@@ -233,7 +234,9 @@ void LwpDocument::RegisterStyle()
 void LwpDocument::RegisterTextStyles()
 {
     //Register all text styles: para styles, character styles
-    LwpDLVListHeadHolder* pParaStyleHolder = dynamic_cast<LwpDLVListHeadHolder*>(m_pFoundry->GetTextStyleHead().obj().get());
+    LwpDLVListHeadHolder* pParaStyleHolder = m_pFoundry
+        ? dynamic_cast<LwpDLVListHeadHolder*>(m_pFoundry->GetTextStyleHead().obj().get())
+        : nullptr;
     if(pParaStyleHolder)
     {
         LwpTextStyle* pParaStyle = dynamic_cast<LwpTextStyle*> (pParaStyleHolder->GetHeadID().obj().get());
@@ -252,15 +255,17 @@ void LwpDocument::RegisterTextStyles()
  */
 void LwpDocument::RegisterLayoutStyles()
 {
-    //Register all layout styles, before register all styles in para
-    m_pFoundry->RegisterAllLayouts();
+    if (m_pFoundry)
+    {
+        //Register all layout styles, before register all styles in para
+        m_pFoundry->RegisterAllLayouts();
+    }
 
     //set initial pagelayout in story for parsing pagelayout
     LwpDivInfo* pDivInfo = dynamic_cast<LwpDivInfo*> (m_DivInfo.obj( VO_DIVISIONINFO).get());
-    LwpPageLayout* pPageLayout = NULL;
-    if(pDivInfo)
+    if (pDivInfo)
     {
-        pPageLayout = dynamic_cast<LwpPageLayout*>(pDivInfo->GetInitialLayoutID().obj(VO_PAGELAYOUT).get());
+        LwpPageLayout* pPageLayout = dynamic_cast<LwpPageLayout*>(pDivInfo->GetInitialLayoutID().obj(VO_PAGELAYOUT).get());
         if(pPageLayout)
         {
             //In Ole division, the content of pagelayout is VO_OLEOBJECT
@@ -280,16 +285,18 @@ void LwpDocument::RegisterLayoutStyles()
 void LwpDocument::RegisterStylesInPara()
 {
     //Register all automatic styles in para
-    LwpHeadContent* pContent = dynamic_cast<LwpHeadContent*> (m_pFoundry->GetContentManager().GetContentList().obj().get());
-    if(pContent)
+    rtl::Reference<LwpHeadContent> xContent(m_pFoundry
+        ? dynamic_cast<LwpHeadContent*> (m_pFoundry->GetContentManager().GetContentList().obj().get())
+        : nullptr);
+    if (xContent.is())
     {
-        LwpStory* pStory = dynamic_cast<LwpStory*>(pContent->GetChildHead().obj(VO_STORY).get());
-        while(pStory)
+        rtl::Reference<LwpStory> xStory(dynamic_cast<LwpStory*>(xContent->GetChildHead().obj(VO_STORY).get()));
+        while (xStory.is())
         {
             //Register the child para
-            pStory->SetFoundry(m_pFoundry);
-            pStory->RegisterStyle();
-            pStory = dynamic_cast<LwpStory*>(pStory->GetNext().obj(VO_STORY).get());
+            xStory->SetFoundry(m_pFoundry);
+            xStory->DoRegisterStyle();
+            xStory.set(dynamic_cast<LwpStory*>(xStory->GetNext().obj(VO_STORY).get()));
         }
     }
 }
@@ -298,19 +305,20 @@ void LwpDocument::RegisterStylesInPara()
  */
 void LwpDocument::RegisterBulletStyles()
 {
+    if (!m_pFoundry)
+        return;
     //Register bullet styles
     LwpDLVListHeadHolder* mBulletHead = dynamic_cast<LwpDLVListHeadHolder*>
         (m_pFoundry->GetBulletManagerID().obj(VO_HEADHOLDER).get());
-    if( mBulletHead )
+    if (!mBulletHead)
+        return;
+    LwpSilverBullet* pBullet = dynamic_cast<LwpSilverBullet*>
+                        (mBulletHead->GetHeadID().obj().get());
+    while(pBullet)
     {
-        LwpSilverBullet* pBullet = dynamic_cast<LwpSilverBullet*>
-                            (mBulletHead->GetHeadID().obj().get());
-        while(pBullet)
-        {
-            pBullet->SetFoundry(m_pFoundry);
-            pBullet->RegisterStyle();
-            pBullet = dynamic_cast<LwpSilverBullet*> (pBullet->GetNext().obj().get());
-        }
+        pBullet->SetFoundry(m_pFoundry);
+        pBullet->RegisterStyle();
+        pBullet = dynamic_cast<LwpSilverBullet*> (pBullet->GetNext().obj().get());
     }
 }
 /**
@@ -318,13 +326,14 @@ void LwpDocument::RegisterBulletStyles()
  */
 void LwpDocument::RegisterGraphicsStyles()
 {
+    if (!m_pFoundry)
+        return;
     //Register all graphics styles, the first object should register the next;
     rtl::Reference<LwpObject> pGraphic = m_pFoundry->GetGraphicListHead().obj(VO_GRAPHIC);
-    if(pGraphic.is())
-    {
-        pGraphic->SetFoundry(m_pFoundry);
-        pGraphic->RegisterStyle();
-    }
+    if (!pGraphic.is())
+        return;
+    pGraphic->SetFoundry(m_pFoundry);
+    pGraphic->DoRegisterStyle();
 }
 /**
  * @descr  Register line number styles
@@ -413,7 +422,7 @@ void LwpDocument::ParseDocContent(IXFStream* pOutputStream)
         return;
     }
     pLayoutObj->SetFoundry(m_pFoundry);
-    pLayoutObj->Parse(pOutputStream);
+    pLayoutObj->DoParse(pOutputStream);
 }
 
 /**
@@ -542,7 +551,7 @@ LwpDocument* LwpDocument::GetPreviousDivision()
     LwpDocument* pDivision = GetLastDivision();
     LwpDocument* pContentDivision = NULL;
 
-    while(pDivision)
+    while (pDivision && pDivision != this)
     {
         pContentDivision = pDivision->GetLastDivisionWithContents();
         if(pContentDivision)
@@ -612,7 +621,7 @@ LwpDocument* LwpDocument::GetPreviousDivision()
   /**
  * @descr    Get first division with contents that is not ole, copy from lwp-source code
  */
- LwpDocument* LwpDocument::GetFirstDivisionWithContentsThatIsNotOLE()
+ LwpDocument* LwpDocument::ImplGetFirstDivisionWithContentsThatIsNotOLE()
 {
     LwpDivInfo* pDivInfo = dynamic_cast<LwpDivInfo*>(GetDivInfoID().obj().get());
     if(pDivInfo && pDivInfo->HasContents()
@@ -621,11 +630,9 @@ LwpDocument* LwpDocument::GetPreviousDivision()
 
     LwpDocument* pDivision = GetFirstDivision();
 
-    LwpDocument*  pContentDivision = NULL;
-
     while (pDivision)
     {
-        pContentDivision = pDivision->GetFirstDivisionWithContentsThatIsNotOLE();
+        LwpDocument *pContentDivision = pDivision->GetFirstDivisionWithContentsThatIsNotOLE();
         if(pContentDivision)
             return pContentDivision;
         pDivision = pDivision->GetNextDivision();
@@ -638,10 +645,10 @@ LwpDocument* LwpDocument::GetPreviousDivision()
  LwpDocument* LwpDocument::GetLastDivisionThatHasEndnote()
 {
     LwpDocument* pRoot = GetRootDocument();
-    LwpDocument *pLastDoc = pRoot->GetLastDivisionWithContents();
-    while(pLastDoc)
+    LwpDocument *pLastDoc = pRoot ? pRoot->GetLastDivisionWithContents() : nullptr;
+    while (pLastDoc)
     {
-        if(pLastDoc->GetEnSuperTableLayout())
+        if (pLastDoc->GetEnSuperTableLayout().is())
             return pLastDoc;
         pLastDoc = pLastDoc->GetPreviousDivisionWithContents();
     }
@@ -651,14 +658,14 @@ LwpDocument* LwpDocument::GetPreviousDivision()
  /**
  * @descr    Get endnote supertable layout, every division has only one endnote supertable layout.
  */
- LwpVirtualLayout* LwpDocument::GetEnSuperTableLayout()
+rtl::Reference<LwpVirtualLayout> LwpDocument::GetEnSuperTableLayout()
 {
     LwpHeadLayout* pHeadLayout = dynamic_cast<LwpHeadLayout*>(GetFoundry()->GetLayout().obj().get());
     if(pHeadLayout)
     {
         return pHeadLayout->FindEnSuperTableLayout();
     }
-    return NULL;
+    return rtl::Reference<LwpVirtualLayout>();
 }
 
 /**
@@ -786,11 +793,11 @@ void LwpDocSock::RegisterStyle()
 {
     rtl::Reference<LwpObject> pDoc = GetNext().obj();
     if(pDoc.is())
-        pDoc->RegisterStyle();
+        pDoc->DoRegisterStyle();
 
     pDoc = GetChildHead().obj();
     if(pDoc.is())
-        pDoc->RegisterStyle();
+        pDoc->DoRegisterStyle();
 }
  /**
  * @descr    parse contents of documents plugged
@@ -799,11 +806,11 @@ void LwpDocSock::Parse(IXFStream* pOutputStream)
 {
     rtl::Reference<LwpObject> pDoc = GetChildHead().obj();
     if(pDoc.is())
-        pDoc->Parse(pOutputStream);
+        pDoc->DoParse(pOutputStream);
 
     pDoc = GetNext().obj();
     if(pDoc.is())
-        pDoc->Parse(pOutputStream);
+        pDoc->DoParse(pOutputStream);
 }
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/lotuswordpro/source/filter/lwpdoc.hxx b/lotuswordpro/source/filter/lwpdoc.hxx
index a1dfee2..a9a41e2a 100644
--- a/lotuswordpro/source/filter/lwpdoc.hxx
+++ b/lotuswordpro/source/filter/lwpdoc.hxx
@@ -89,6 +89,7 @@ public:
 
 private:
     LwpFoundry* m_pOwnedFoundry;
+    bool m_bGettingFirstDivisionWithContentsThatIsNotOLE;
 
     //Data members in file format
     LwpObjectID m_DocSockID;
@@ -137,8 +138,7 @@ public:
     void RegisterStyle() SAL_OVERRIDE;
 
     inline bool IsChildDoc();
-    inline bool HonorProtection();
-    inline LwpObjectID& GetContentList();
+    inline bool GetHonorProtection();
     inline LwpObjectID& GetDocData();
     inline LwpObjectID& GetSocket();
 
@@ -160,12 +160,20 @@ public:
     LwpDocument* GetLastDivisionWithContents();
     LwpDocument* GetLastInGroupWithContents();
     LwpDocument* GetRootDocument();
-    LwpDocument* GetFirstDivisionWithContentsThatIsNotOLE();
+    LwpDocument* GetFirstDivisionWithContentsThatIsNotOLE()
+    {
+        if (m_bGettingFirstDivisionWithContentsThatIsNotOLE)
+            throw std::runtime_error("recursion in page divisions");
+        m_bGettingFirstDivisionWithContentsThatIsNotOLE = true;
+        LwpDocument* pRet = ImplGetFirstDivisionWithContentsThatIsNotOLE();
+        m_bGettingFirstDivisionWithContentsThatIsNotOLE = false;
+        return pRet;
+    }
     LwpDocument* GetLastDivisionThatHasEndnote();
 
     LwpDocument* GetLastDivision();
     LwpDocument* GetFirstDivision();
-    LwpVirtualLayout* GetEnSuperTableLayout();
+    rtl::Reference<LwpVirtualLayout> GetEnSuperTableLayout();
     bool GetNumberOfPages(LwpDocument* pEndDivision, sal_uInt16& nCount);
 
     sal_uInt16 GetNumberOfPagesBefore();
@@ -173,6 +181,7 @@ public:
 
 private:
     void MaxNumberOfPages(sal_uInt16& nNumPages);
+    LwpDocument* ImplGetFirstDivisionWithContentsThatIsNotOLE();
     void XFConvertFrameInPage(XFContentContainer* pCont);
     void ChangeStyleName();
     bool IsSkippedDivision();
@@ -182,14 +191,10 @@ inline bool LwpDocument::IsChildDoc()
 {
     return (m_nPersistentFlags & DOC_CHILDDOC) != 0;
 }
-inline bool LwpDocument::HonorProtection()
+inline bool LwpDocument::GetHonorProtection()
 {
     return (m_nPersistentFlags & DOC_PROTECTED) != 0;
 }
-inline LwpObjectID& LwpDocument::GetContentList()
-{
-    return m_pFoundry->GetContentManager().GetContentList();
-}
 inline LwpObjectID& LwpDocument::GetSocket()
 {
     return m_DocSockID;
diff --git a/lotuswordpro/source/filter/lwpdrawobj.cxx b/lotuswordpro/source/filter/lwpdrawobj.cxx
index 1563f3d..798daa0 100644
--- a/lotuswordpro/source/filter/lwpdrawobj.cxx
+++ b/lotuswordpro/source/filter/lwpdrawobj.cxx
@@ -94,7 +94,7 @@ LwpDrawObj::LwpDrawObj(SvStream * pStream, DrawingOffsetAndScale* pTransData)
     , m_pStream(pStream)
     , m_pTransData(pTransData)
 {
-    this->ReadObjHeaderRecord();
+    ReadObjHeaderRecord();
 }
 
 /**
@@ -378,10 +378,10 @@ OUString LwpDrawObj::GetArrowName(sal_uInt8 nArrowStyle)
 XFFrame* LwpDrawObj::CreateXFDrawObject()
 {
     // read records
-    this->Read();
+    Read();
 
     // register style
-    OUString aStyleName = this->RegisterStyle();
+    OUString aStyleName = RegisterStyle();
 
     // create XF-Objects
     XFFrame* pXFObj = NULL;
@@ -391,11 +391,11 @@ XFFrame* LwpDrawObj::CreateXFDrawObject()
         && FABS(m_pTransData->fScaleX - 1.0) < THRESHOLD
         && FABS(m_pTransData->fScaleY - 1.0) < THRESHOLD)
     {
-        pXFObj = this->CreateStandardDrawObj(aStyleName);
+        pXFObj = CreateStandardDrawObj(aStyleName);
     }
     else
     {
-        pXFObj = this->CreateDrawObj(aStyleName);
+        pXFObj = CreateDrawObj(aStyleName);
     }
 
     // set anchor type
@@ -457,7 +457,7 @@ XFFrame* LwpDrawLine::CreateDrawObj(const OUString& rStyleName )
         (double)(m_aLineRec.nStartY)/TWIPS_PER_CM * m_pTransData->fScaleY));
     pLine->LineTo(XFPoint((double)(m_aLineRec.nEndX)/TWIPS_PER_CM * m_pTransData->fScaleX,
         (double)(m_aLineRec.nEndY)/TWIPS_PER_CM * m_pTransData->fScaleY));
-    this->SetPosition(pLine);
+    SetPosition(pLine);
 
     pLine->SetStyleName(rStyleName);
 
@@ -537,12 +537,12 @@ XFFrame* LwpDrawPolyLine::CreateDrawObj(const OUString& rStyleName )
     XFDrawPath* pPolyline = new XFDrawPath();
     pPolyline->MoveTo(XFPoint((double)m_pVector[0].x/TWIPS_PER_CM * m_pTransData->fScaleX,
             (double)m_pVector[0].y/TWIPS_PER_CM * m_pTransData->fScaleY));
-    for (sal_uInt8 nC = 1; nC < m_aPolyLineRec.nNumPoints; nC++)
+    for (sal_uInt16 nC = 1; nC < m_aPolyLineRec.nNumPoints; nC++)
     {
         pPolyline->LineTo(XFPoint((double)m_pVector[nC].x/TWIPS_PER_CM * m_pTransData->fScaleX,
             (double)m_pVector[nC].y/TWIPS_PER_CM * m_pTransData->fScaleY));
     }
-    this->SetPosition(pPolyline);
+    SetPosition(pPolyline);
 
     pPolyline->SetStyleName(rStyleName);
 
@@ -552,7 +552,7 @@ XFFrame* LwpDrawPolyLine::CreateDrawObj(const OUString& rStyleName )
 XFFrame* LwpDrawPolyLine::CreateStandardDrawObj(const  OUString& rStyleName)
 {
     XFDrawPolyline* pPolyline = new XFDrawPolyline();
-    for (sal_uInt8 nC = 0; nC < m_aPolyLineRec.nNumPoints; nC++)
+    for (sal_uInt16 nC = 0; nC < m_aPolyLineRec.nNumPoints; nC++)
     {
         pPolyline->AddPoint((double)m_pVector[nC].x/TWIPS_PER_CM,
             (double)m_pVector[nC].y/TWIPS_PER_CM);
@@ -588,7 +588,7 @@ LwpDrawPolygon::~LwpDrawPolygon()
  */
 void LwpDrawPolygon::Read()
 {
-    this->ReadClosedObjStyle();
+    ReadClosedObjStyle();
     m_pStream->ReadUInt16( m_nNumPoints );
 
     if (m_nNumPoints > m_pStream->remainingSize() / 4)
@@ -612,7 +612,7 @@ OUString LwpDrawPolygon::RegisterStyle()
         m_aClosedObjStyleRec.aPenColor);
 
     // set fill style
-    this->SetFillStyle(pStyle);
+    SetFillStyle(pStyle);
 
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
     return pXFStyleManager->AddStyle(pStyle).m_pStyle->GetStyleName();
@@ -629,7 +629,7 @@ XFFrame* LwpDrawPolygon::CreateDrawObj(const OUString& rStyleName)
             (double)m_pVector[nC].y/TWIPS_PER_CM * m_pTransData->fScaleY));
     }
     pPolygon->ClosePath();
-    this->SetPosition(pPolygon);
+    SetPosition(pPolygon);
     pPolygon->SetStyleName(rStyleName);
 
     return pPolygon;
@@ -663,7 +663,7 @@ LwpDrawRectangle::LwpDrawRectangle(SvStream * pStream, DrawingOffsetAndScale* pT
  */
 void LwpDrawRectangle::Read()
 {
-    this->ReadClosedObjStyle();
+    ReadClosedObjStyle();
 
     sal_uInt8 nPointsCount;
     if (m_eType == OT_RNDRECT)
@@ -692,7 +692,7 @@ OUString LwpDrawRectangle::RegisterStyle()
         m_aClosedObjStyleRec.aPenColor);
 
     // set fill style
-    this->SetFillStyle(pStyle);
+    SetFillStyle(pStyle);
 
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
     return pXFStyleManager->AddStyle(pStyle).m_pStyle->GetStyleName();
@@ -702,7 +702,7 @@ XFFrame* LwpDrawRectangle::CreateDrawObj(const OUString& rStyleName)
 {
     if (m_eType == OT_RNDRECT)
     {
-        return this->CreateRoundedRect(rStyleName);
+        return CreateRoundedRect(rStyleName);
     }
     else
     {
@@ -716,8 +716,8 @@ XFFrame* LwpDrawRectangle::CreateDrawObj(const OUString& rStyleName)
         }
         pRect->LineTo(XFPoint((double)m_aVector[0].x/TWIPS_PER_CM * m_pTransData->fScaleX,
                 (double)m_aVector[0].y/TWIPS_PER_CM * m_pTransData->fScaleY));
-        pRect->ClosePath(true);
-        this->SetPosition(pRect);
+        pRect->ClosePath();
+        SetPosition(pRect);
 
         pRect->SetStyleName(rStyleName);
 
@@ -760,8 +760,8 @@ XFFrame* LwpDrawRectangle::CreateRoundedRect(const OUString& rStyleName)
 
     pRoundedRect->LineTo(XFPoint((double)m_aVector[0].x/TWIPS_PER_CM * m_pTransData->fScaleX,
                 (double)m_aVector[0].y/TWIPS_PER_CM * m_pTransData->fScaleY));
-    pRoundedRect->ClosePath(true);
-    this->SetPosition(pRoundedRect);
+    pRoundedRect->ClosePath();
+    SetPosition(pRoundedRect);
 
     pRoundedRect->SetStyleName(rStyleName);
 
@@ -772,7 +772,7 @@ XFFrame* LwpDrawRectangle::CreateStandardDrawObj(const  OUString& rStyleName)
 {
     if (m_eType == OT_RNDRECT)
     {
-        return this->CreateRoundedRect(rStyleName);
+        return CreateRoundedRect(rStyleName);
     }
     else
     {
@@ -833,7 +833,7 @@ LwpDrawEllipse::LwpDrawEllipse(SvStream * pStream, DrawingOffsetAndScale* pTrans
  */
 void LwpDrawEllipse::Read()
 {
-    this->ReadClosedObjStyle();
+    ReadClosedObjStyle();
 
     for (sal_uInt8 nC = 0; nC < 13; nC++)
     {
@@ -851,7 +851,7 @@ OUString LwpDrawEllipse::RegisterStyle()
         m_aClosedObjStyleRec.aPenColor);
 
     // set fill style
-    this->SetFillStyle(pStyle);
+    SetFillStyle(pStyle);
 
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
     return pXFStyleManager->AddStyle(pStyle).m_pStyle->GetStyleName();
@@ -877,8 +877,8 @@ XFFrame* LwpDrawEllipse::CreateDrawObj(const OUString& rStyleName )
 
         pEllipse->CurveTo(aDest, aCtrl1, aCtrl2);
     }
-    pEllipse->ClosePath(true);
-    this->SetPosition(pEllipse);
+    pEllipse->ClosePath();
+    SetPosition(pEllipse);
 
     pEllipse->SetStyleName(rStyleName);
 
@@ -887,7 +887,7 @@ XFFrame* LwpDrawEllipse::CreateDrawObj(const OUString& rStyleName )
 
 XFFrame* LwpDrawEllipse::CreateStandardDrawObj(const  OUString& rStyleName)
 {
-    return this->CreateDrawObj(rStyleName);
+    return CreateDrawObj(rStyleName);
 }
 
 /**
@@ -949,7 +949,7 @@ XFFrame* LwpDrawArc::CreateDrawObj(const OUString& rStyleName )
         (double)m_aVector[2].y/TWIPS_PER_CM * m_pTransData->fScaleY);
     pArc->CurveTo(aDest, aCtl1, aCtl2);
 
-    this->SetPosition(pArc);
+    SetPosition(pArc);
 
     pArc->SetStyleName(rStyleName);
 
@@ -958,7 +958,7 @@ XFFrame* LwpDrawArc::CreateDrawObj(const OUString& rStyleName )
 
 XFFrame* LwpDrawArc::CreateStandardDrawObj(const  OUString& rStyleName)
 {
-    return this->CreateDrawObj(rStyleName);
+    return CreateDrawObj(rStyleName);
 }
 
 /**
@@ -1107,7 +1107,7 @@ XFFrame* LwpDrawTextBox::CreateDrawObj(const OUString& rStyleName )
     pXFPara->SetStyleName(rStyleName);
 
     pTextBox->Add(pXFPara);
-    this->SetPosition(pTextBox);
+    SetPosition(pTextBox);
 
     XFTextBoxStyle* pBoxStyle = new XFTextBoxStyle();
 
@@ -1127,7 +1127,7 @@ XFFrame* LwpDrawTextBox::CreateDrawObj(const OUString& rStyleName )
 
 XFFrame* LwpDrawTextBox::CreateStandardDrawObj(const  OUString& rStyleName)
 {
-    return this->CreateDrawObj(rStyleName);
+    return CreateDrawObj(rStyleName);
 }
 
 /**
@@ -1169,7 +1169,7 @@ void LwpDrawTextArt::CreateFWPath(XFDrawPath* pPath)
     pPath->MoveTo(aStart);
 
     sal_uInt8 nPtIndex = 1;
-    for (sal_uInt8 nC = 1; nC <= m_aTextArtRec.aPath[0].n; nC++)
+    for (sal_uInt16 nC = 1; nC <= m_aTextArtRec.aPath[0].n; nC++)
     {
         nX = (m_aTextArtRec.aPath[0].pPts[nPtIndex].x + m_aTextArtRec.aPath[1].pPts[nPtIndex].x) / 2;
         nY = (m_aTextArtRec.aPath[0].pPts[nPtIndex].y + m_aTextArtRec.aPath[1].pPts[nPtIndex].y) / 2;
@@ -1200,7 +1200,7 @@ void LwpDrawTextArt::Read()
         m_pStream->ReadInt16( m_aVector[nC].y );
     }
 
-    this->ReadClosedObjStyle();
+    ReadClosedObjStyle();
     m_aTextArtRec.aTextColor = m_aClosedObjStyleRec.aForeColor;
 
     m_pStream->ReadUChar( m_aTextArtRec.nIndex );
@@ -1298,10 +1298,10 @@ XFFrame* LwpDrawTextArt::CreateDrawObj(const OUString& rStyleName)
 
     pRetObj = new XFDrawPath();
     XFDrawPath* pFWPath = static_cast<XFDrawPath*>(pRetObj);
-    this->CreateFWPath(pFWPath);
+    CreateFWPath(pFWPath);
     pStyle->SetFontWorkStyle(0, enumXFFWSlantY, enumXFFWAdjustAutosize);
 
-    this->SetPosition(pRetObj);
+    SetPosition(pRetObj);
 
     rtl_TextEncoding aEncoding;
     if (!m_aTextArtRec.nTextCharacterSet)
@@ -1327,7 +1327,7 @@ XFFrame* LwpDrawTextArt::CreateDrawObj(const OUString& rStyleName)
 
 XFFrame* LwpDrawTextArt::CreateStandardDrawObj(const OUString& rStyleName )
 {
-    return this->CreateDrawObj(rStyleName);
+    return CreateDrawObj(rStyleName);
 }
 
 /**
@@ -1493,7 +1493,7 @@ XFFrame* LwpDrawBitmap::CreateDrawObj(const OUString& rStyleName)
 {
     XFImage* pImage = new XFImage();
     pImage->SetImageData(m_pImageData, m_aBmpRec.nFileSize);
-    this->SetPosition(pImage);
+    SetPosition(pImage);
 
     pImage->SetStyleName(rStyleName);
 
@@ -1502,7 +1502,7 @@ XFFrame* LwpDrawBitmap::CreateDrawObj(const OUString& rStyleName)
 
 XFFrame* LwpDrawBitmap::CreateStandardDrawObj(const  OUString& rStyleName)
 {
-    return this->CreateDrawObj(rStyleName);
+    return CreateDrawObj(rStyleName);
 }
 
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/lotuswordpro/source/filter/lwpfilter.cxx b/lotuswordpro/source/filter/lwpfilter.cxx
index 9e66d7b..9db5f3f 100644
--- a/lotuswordpro/source/filter/lwpfilter.cxx
+++ b/lotuswordpro/source/filter/lwpfilter.cxx
@@ -148,8 +148,8 @@ using namespace OpenStormBento;
 {
     SvStream * pDecompressed = NULL;
 
-    sal_uInt32 nTag;
     pStream->Seek(0x10);
+    sal_uInt32 nTag(0);
     pStream->ReadUInt32( nTag );
     if (nTag != 0x3750574c) // "LWP7"
     {
diff --git a/lotuswordpro/source/filter/lwpfnlayout.cxx b/lotuswordpro/source/filter/lwpfnlayout.cxx
index 86ddc5f..d50cc0e 100644
--- a/lotuswordpro/source/filter/lwpfnlayout.cxx
+++ b/lotuswordpro/source/filter/lwpfnlayout.cxx
@@ -119,14 +119,14 @@ void LwpFnRowLayout::RegisterStyle()
 {
     // register cells' style
     LwpObjectID& rCellID = GetChildHead();
-    LwpCellLayout * pCellLayout = static_cast<LwpCellLayout *>(rCellID.obj().get());
+    LwpCellLayout * pCellLayout = dynamic_cast<LwpCellLayout *>(rCellID.obj().get());
 
     while(pCellLayout)
     {
         pCellLayout->SetFoundry(m_pFoundry);
         pCellLayout->RegisterStyle();
         rCellID = pCellLayout->GetNext();
-        pCellLayout = static_cast<LwpCellLayout *>(rCellID.obj().get());
+        pCellLayout = dynamic_cast<LwpCellLayout *>(rCellID.obj().get());
     }
 }
 
@@ -164,7 +164,7 @@ void LwpFnCellLayout::RegisterStyle()
     if (pObj.is())
     {
         pObj->SetFoundry(m_pFoundry);
-        pObj->RegisterStyle();
+        pObj->DoRegisterStyle();
     }
 }
 
@@ -199,14 +199,14 @@ void LwpEndnoteLayout::RegisterStyle()
 {
     // register style of rows
     LwpObjectID& rRowID = GetChildHead();
-    LwpRowLayout * pRowLayout = static_cast<LwpRowLayout *>(rRowID.obj().get());
+    LwpRowLayout * pRowLayout = dynamic_cast<LwpRowLayout *>(rRowID.obj().get());
     while (pRowLayout)
     {
         pRowLayout->SetFoundry(m_pFoundry);
         pRowLayout->RegisterStyle();
 
         rRowID = pRowLayout->GetNext();
-        pRowLayout = static_cast<LwpRowLayout *>(rRowID.obj().get());
+        pRowLayout = dynamic_cast<LwpRowLayout *>(rRowID.obj().get());
     }
 }
 
@@ -241,7 +241,7 @@ void LwpEnSuperTableLayout::RegisterStyle()
     if (pTableLayout != NULL)
     {
         pTableLayout->SetFoundry(m_pFoundry);
-        pTableLayout->RegisterStyle();
+        pTableLayout->DoRegisterStyle();
     }
 }
 
@@ -262,7 +262,7 @@ void LwpEnSuperTableLayout::XFConvert(XFContentContainer * /*pCont*/)
 
     while(!rID.IsNull())
     {
-        LwpVirtualLayout * pLayout = static_cast<LwpVirtualLayout *>(rID.obj().get());
+        LwpVirtualLayout * pLayout = dynamic_cast<LwpVirtualLayout*>(rID.obj().get());
         if(!pLayout)
         {
             break;
@@ -318,7 +318,7 @@ LwpVirtualLayout* LwpFnSuperTableLayout::GetMainTableLayout()
 
     while(!rID.IsNull())
     {
-        LwpVirtualLayout * pLayout = static_cast<LwpVirtualLayout *>(rID.obj().get());
+        LwpVirtualLayout * pLayout = dynamic_cast<LwpVirtualLayout *>(rID.obj().get());
         if(!pLayout)
         {
             break;
diff --git a/lotuswordpro/source/filter/lwpfont.cxx b/lotuswordpro/source/filter/lwpfont.cxx
index 3ee7e1b..79e94bf 100644
--- a/lotuswordpro/source/filter/lwpfont.cxx
+++ b/lotuswordpro/source/filter/lwpfont.cxx
@@ -262,7 +262,7 @@ void LwpFontTable::Read(LwpObjectStream *pStrm)
 
 OUString LwpFontTable::GetFaceName(sal_uInt16 index) //index: start from 1
 {
-    assert(index <= m_nCount && index > 0);
+    SAL_WARN_IF(index > m_nCount || index <= 0, "lwp", "bad font index");
     return (index <= m_nCount && index > 0) ? m_pFontEntries[index-1].GetFaceName() : OUString();
 }
 
@@ -399,8 +399,13 @@ void    LwpFontNameManager::Override(sal_uInt16 index, rtl::Reference<XFFont> co
     if(m_pFontNames[index-1].IsAltFaceNameOverridden())
         pFont->SetFontNameAsia(m_FontTbl.GetFaceName(m_pFontNames[index-1].GetAltFaceID()));
 }
+
 OUString LwpFontNameManager::GetNameByIndex(sal_uInt16 index)
+    //index: start from 1
 {
+    if (index > m_nCount || index < 1)
+        return OUString();
+
     sal_uInt16 nameindex = m_pFontNames[index-1].GetFaceID();
     return (m_FontTbl.GetFaceName(nameindex));
 }
diff --git a/lotuswordpro/source/filter/lwpfootnote.cxx b/lotuswordpro/source/filter/lwpfootnote.cxx
index 5c64d00..e75bc20 100644
--- a/lotuswordpro/source/filter/lwpfootnote.cxx
+++ b/lotuswordpro/source/filter/lwpfootnote.cxx
@@ -181,7 +181,7 @@ void LwpFootnote::RegisterStyle()
         if(pContent)
         {
             pContent->SetFoundry(m_pFoundry);
-            pContent->RegisterStyle();
+            pContent->DoRegisterStyle();
         }
     }
 }
@@ -206,7 +206,7 @@ LwpCellLayout* LwpFootnote::GetCellLayout()
     LwpEnSuperTableLayout* pEnSuperLayout = FindFootnoteTableLayout();
     if(pEnSuperLayout)
     {
-        LwpTableLayout* pTableLayout = static_cast<LwpTableLayout*>(pEnSuperLayout->GetMainTableLayout());
+        LwpTableLayout* pTableLayout = dynamic_cast<LwpTableLayout*>(pEnSuperLayout->GetMainTableLayout());
         if(pTableLayout)
         {
             LwpRowLayout* pRowLayout = pTableLayout->GetRowLayout(m_nRow);
@@ -261,7 +261,6 @@ LwpDocument* LwpFootnote::GetFootnoteTableDivision()
         case FN_DIVISIONGROUP_SEPARATE:
         {
             pDivision = pPrev->GetLastInGroupWithContents();
-            pPrev = pDivision;
             break;
         }
         case FN_DOCUMENT:
@@ -270,7 +269,6 @@ LwpDocument* LwpFootnote::GetFootnoteTableDivision()
             pDivision = pFootnoteDivision->GetRootDocument();
             if (pDivision)
                 pDivision = pDivision->GetLastDivisionWithContents();
-            pPrev = pDivision;
             break;
         }
 
@@ -372,7 +370,7 @@ LwpEnSuperTableLayout* LwpFootnote::FindFootnoteTableLayout()
 
     while ((pContent = pFoundry->EnumContents(pContent)) != NULL)
         if (pContent->IsTable() && (strClassName.equals(pContent->GetClassName())) &&
-            pContent->IsActive() && pContent->GetLayout(NULL))
+            pContent->IsActive() && pContent->GetLayout(nullptr).is())
         {
             // Found it!
             return static_cast<LwpEnSuperTableLayout *>(
@@ -390,7 +388,7 @@ LwpContent* LwpFootnote::FindFootnoteContent()
     LwpContent* pContent = dynamic_cast<LwpContent*>(m_Content.obj().get());
     //if the content has layout, the content has footnote contents;
     //or looking for the celllayout and return the footnote contents.
-    if(pContent && pContent->GetLayout(NULL))
+    if (pContent && pContent->GetLayout(nullptr).is())
         return pContent;
 
     LwpCellLayout* pCellLayout = GetCellLayout();
diff --git a/lotuswordpro/source/filter/lwpfoundry.cxx b/lotuswordpro/source/filter/lwpfoundry.cxx
index 580f5fd..5ee262c 100644
--- a/lotuswordpro/source/filter/lwpfoundry.cxx
+++ b/lotuswordpro/source/filter/lwpfoundry.cxx
@@ -202,7 +202,7 @@ void LwpFoundry::RegisterAllLayouts()
     if( pStyle.is() )
     {
         pStyle->SetFoundry(this);
-        pStyle->RegisterStyle();
+        pStyle->DoRegisterStyle();
     }
 
     //register content page layout list: Layout
@@ -210,7 +210,7 @@ void LwpFoundry::RegisterAllLayouts()
     if( pStyle.is() )
     {
         pStyle->SetFoundry(this);
-        pStyle->RegisterStyle();
+        pStyle->DoRegisterStyle();
     }
 
     //Register page style layout list: PageStyle, such as "Default Page"
@@ -218,7 +218,7 @@ void LwpFoundry::RegisterAllLayouts()
     if( pStyle.is() )
     {
         pStyle->SetFoundry(this);
-        pStyle->RegisterStyle();
+        pStyle->DoRegisterStyle();
     }
 
     //Register FrameStyle
@@ -226,25 +226,28 @@ void LwpFoundry::RegisterAllLayouts()
     if( pStyle.is() )
     {
         pStyle->SetFoundry(this);
-        pStyle->RegisterStyle();
+        pStyle->DoRegisterStyle();
     }
 
 }
 
 LwpBookMark* LwpFoundry::GetBookMark(LwpObjectID objMarker)
 {
-    LwpDLVListHeadHolder* pHeadHolder= static_cast
+    LwpDLVListHeadHolder* pHeadHolder= dynamic_cast
                     <LwpDLVListHeadHolder*>(m_BookMarkHead.obj().get());
+
+    if (!pHeadHolder)
+        return nullptr;
+
     LwpObjectID& rObjID = pHeadHolder->GetHeadID();
-    LwpBookMark* pBookMark;
-    pBookMark = static_cast<LwpBookMark*>(rObjID.obj().get());
+    LwpBookMark* pBookMark = dynamic_cast<LwpBookMark*>(rObjID.obj().get());
 
     while (pBookMark)
     {
         if (pBookMark->IsRightMarker(objMarker))
             return pBookMark;
         rObjID = pBookMark->GetNext();
-        pBookMark = static_cast<LwpBookMark*>(rObjID.obj().get());
+        pBookMark = dynamic_cast<LwpBookMark*>(rObjID.obj().get());
     }
     return NULL;
 }
@@ -273,7 +276,7 @@ LwpSection* LwpFoundry::EnumSections(LwpSection * pSection)
 */
 LwpObjectID * LwpFoundry::GetDefaultTextStyle()
 {
-    LwpVersionedPointer * pPointer = static_cast<LwpVersionedPointer *>(m_DefaultTextStyle.obj().get());
+    LwpVersionedPointer * pPointer = dynamic_cast<LwpVersionedPointer *>(m_DefaultTextStyle.obj().get());
     if (!pPointer)
         return NULL;
 
@@ -287,16 +290,16 @@ LwpObjectID * LwpFoundry::GetDefaultTextStyle()
 LwpObjectID * LwpFoundry::FindParaStyleByName(const OUString& name)
 {
     //Register all text styles: para styles, character styles
-    LwpDLVListHeadHolder* pParaStyleHolder = static_cast<LwpDLVListHeadHolder*>(GetTextStyleHead().obj().get());
+    LwpDLVListHeadHolder* pParaStyleHolder = dynamic_cast<LwpDLVListHeadHolder*>(GetTextStyleHead().obj().get());
     if(pParaStyleHolder)
     {
-        LwpTextStyle* pParaStyle = static_cast<LwpTextStyle*> (pParaStyleHolder->GetHeadID().obj().get());
+        LwpTextStyle* pParaStyle = dynamic_cast<LwpTextStyle*> (pParaStyleHolder->GetHeadID().obj().get());
         while(pParaStyle)
         {
             OUString strName = pParaStyle->GetName().str();
             if(strName == name)
                 return &pParaStyle->GetObjectID();
-            pParaStyle = static_cast<LwpTextStyle*>(pParaStyle->GetNext().obj().get());
+            pParaStyle = dynamic_cast<LwpTextStyle*>(pParaStyle->GetNext().obj().get());
         }
     }
 
@@ -405,8 +408,8 @@ LwpContent* LwpContentManager::EnumContents(LwpContent* pContent)
 {
     if(pContent)
         return pContent->GetNextEnumerated();
-    LwpVersionedPointer* pPointer = static_cast<LwpVersionedPointer*>(m_EnumHead.obj().get());
-    return pPointer ? static_cast<LwpContent*>(pPointer->GetPointer().obj().get()) : NULL;
+    LwpVersionedPointer* pPointer = dynamic_cast<LwpVersionedPointer*>(m_EnumHead.obj().get());
+    return pPointer ? dynamic_cast<LwpContent*>(pPointer->GetPointer().obj().get()) : nullptr;
 }
 
 void LwpPieceManager::Read(LwpObjectStream *pStrm)
@@ -457,14 +460,14 @@ LwpOrderedObject* LwpOrderedObjectManager::Enumerate(LwpOrderedObject * pLast)
 {
     // If Last has a next, return it.
     if(pLast && !pLast->GetNext().IsNull())
-        return static_cast<LwpOrderedObject*>(pLast->GetNext().obj().get());
+        return dynamic_cast<LwpOrderedObject*>(pLast->GetNext().obj().get());
 
     LwpListList* pList = NULL;
     if(pLast)
     {
         // We're at the end of Last's list (not Liszt's list).
         // Start with the next active list
-        pList = static_cast<LwpListList*>(pLast->GetListList().obj().get());
+        pList = dynamic_cast<LwpListList*>(pLast->GetListList().obj().get());
         pList= GetNextActiveListList(pList);
     }
     else
@@ -475,7 +478,7 @@ LwpOrderedObject* LwpOrderedObjectManager::Enumerate(LwpOrderedObject * pLast)
 
     if(pList)
     {
-        return static_cast<LwpOrderedObject*>(pList->GetHead().obj().get());
+        return dynamic_cast<LwpOrderedObject*>(pList->GetHead().obj().get());
     }
 
     return NULL;
@@ -488,25 +491,23 @@ LwpOrderedObject* LwpOrderedObjectManager::Enumerate(LwpOrderedObject * pLast)
 LwpListList* LwpOrderedObjectManager::GetNextActiveListList(LwpListList * pLast)
 {
     LwpListList* pList = NULL;
-    LwpContent* pContent = NULL;
     if(pLast)
-        pList = static_cast<LwpListList*>(pLast->GetNext().obj().get());
+        pList = dynamic_cast<LwpListList*>(pLast->GetNext().obj().get());
     else
     {
-        LwpDLVListHeadHolder* pHeadHolder= static_cast<LwpDLVListHeadHolder*>(m_Head.obj().get());
+        LwpDLVListHeadHolder* pHeadHolder= dynamic_cast<LwpDLVListHeadHolder*>(m_Head.obj().get());
         if(pHeadHolder)
         {
-            pList = static_cast<LwpListList*>(pHeadHolder->GetHeadID().obj().get());
+            pList = dynamic_cast<LwpListList*>(pHeadHolder->GetHeadID().obj().get());
         }
     }
 
     while(pList)
     {
-        pContent = static_cast<LwpContent*>(pList->GetObject().obj().get());
-        if(pContent && pContent->HasNonEmbeddedLayouts() &&
-            !pContent->IsStyleContent())
+        LwpContent* pContent = dynamic_cast<LwpContent*>(pList->GetObject().obj().get());
+        if (pContent && pContent->HasNonEmbeddedLayouts() && !pContent->IsStyleContent())
             return pList;
-        pList = static_cast<LwpListList*>(pList->GetNext().obj().get());
+        pList = dynamic_cast<LwpListList*>(pList->GetNext().obj().get());
     }
     return NULL;
 }
diff --git a/lotuswordpro/source/filter/lwpframelayout.cxx b/lotuswordpro/source/filter/lwpframelayout.cxx
index 61325da..c8409aa 100644
--- a/lotuswordpro/source/filter/lwpframelayout.cxx
+++ b/lotuswordpro/source/filter/lwpframelayout.cxx
@@ -189,34 +189,36 @@ void  LwpFrame::RegisterStyle(XFFrameStyle* pFrameStyle)
 */
  void LwpFrame::XFConvert(XFContentContainer* pCont)
  {
-     //parse the frame which anchor to page
-    LwpVirtualLayout* pParent = m_pLayout->GetParentLayout();
-    if(pParent->IsPage()&& pParent->GetParentLayout()->IsPage())
+    // parse the frame which anchor to page
+    rtl::Reference<LwpVirtualLayout> xParent = m_pLayout->GetParentLayout();
+    if (!xParent.is())
+        throw std::runtime_error("missing Parent Layout");
+    if (xParent->IsPage() && xParent->GetParentLayout().is() && xParent->GetParentLayout()->IsPage())
     {
         //for mirror page, problems exist if the parent layout is header or footer layout,
-        pParent = pParent->GetParentLayout();
+        xParent = xParent->GetParentLayout();
     }
-    if(m_pLayout->IsAnchorPage()&& pParent->IsPage())
+    if(m_pLayout->IsAnchorPage()&& xParent->IsPage())
     {
         //get parent layout
         if(m_pLayout->IsUseOnPage())
         {
-            sal_Int32 nPageNo = pParent->GetPageNumber(m_pLayout->GetUsePage());
+            sal_Int32 nPageNo = xParent->GetPageNumber(m_pLayout->GetUsePage());
             if(nPageNo>0)
                 m_pLayout->XFConvertFrame(pCont, nPageNo);
         }
         else if(m_pLayout->IsUseOnAllPages())
         {
-            sal_Int32 nFirst = pParent->GetPageNumber(FIRST_LAYOUTPAGENO);
-            sal_Int32 nLast = pParent->GetPageNumber(LAST_LAYOUTPAGENO);
+            sal_Int32 nFirst = xParent->GetPageNumber(FIRST_LAYOUTPAGENO);
+            sal_Int32 nLast = xParent->GetPageNumber(LAST_LAYOUTPAGENO);
             if(nLast > 0)
                 m_pLayout->XFConvertFrame(pCont, nFirst, nLast, true);
 
         }
         else if(m_pLayout->IsUseOnAllOddPages()||m_pLayout->IsUseOnAllEvenPages())
         {
-            sal_Int32 nFirst = pParent->GetPageNumber(FIRST_LAYOUTPAGENO);
-            sal_Int32 nLast = pParent->GetPageNumber(LAST_LAYOUTPAGENO);
+            sal_Int32 nFirst = xParent->GetPageNumber(FIRST_LAYOUTPAGENO);
+            sal_Int32 nLast = xParent->GetPageNumber(LAST_LAYOUTPAGENO);
             if(nLast > 0)
             {
                 sal_uInt16 first = static_cast<sal_uInt16>(nFirst);
@@ -255,7 +257,8 @@ void LwpFrame::ApplyWrapType(XFFrameStyle *pFrameStyle)
             //between the frame object and page margins
 
             eWrap = enumXFWrapBest;
-            LwpMiddleLayout* pParent = static_cast<LwpMiddleLayout*>(m_pLayout->GetContainerLayout());
+            rtl::Reference<LwpVirtualLayout> xContainer(m_pLayout->GetContainerLayout());
+            LwpMiddleLayout* pParent = dynamic_cast<LwpMiddleLayout*>(xContainer.get());
             if(pParent)
             {
                 if(IsLeftWider())
@@ -273,7 +276,7 @@ void LwpFrame::ApplyWrapType(XFFrameStyle *pFrameStyle)
         case LwpPlacableLayout::LAY_NO_WRAP_AROUND:
         {
             eWrap = enumXFWrapRunThrough;
-            if(!m_pLayout->GetBackColor() && !m_pLayout->GetWaterMarkLayout())
+            if(!m_pLayout->GetBackColor() && !m_pLayout->GetWaterMarkLayout().is())
             {
                 //pFrameStyle->SetBackGround(sal_True);
                 XFColor aXFColor(0xffffff); //white color
@@ -398,7 +401,7 @@ void LwpFrame::ApplyBackColor(XFFrameStyle* pFrameStyle)
 */
 void LwpFrame::ApplyProtect(XFFrameStyle* pFrameStyle)
 {
-    if(m_pLayout->IsProtected())
+    if(m_pLayout->GetIsProtected())
     {
         pFrameStyle->SetProtect(true,true,true);
     }
@@ -435,8 +438,8 @@ void LwpFrame::ApplyPosType(XFFrameStyle* pFrameStyle)
             //set vertical position
             if(m_pLayout->IsAnchorPage())//in page
             {
-                LwpVirtualLayout* pContainer = m_pLayout->GetContainerLayout();
-                if(pContainer && (pContainer->IsHeader() || pContainer->IsFooter()))
+                rtl::Reference<LwpVirtualLayout> xContainer(m_pLayout->GetContainerLayout());
+                if (xContainer.is() && (xContainer->IsHeader() || xContainer->IsFooter()))
                 {
                     //Only anchor to para, the frame can display in header and footer of each page
                     eYPos = enumXFFrameYPosFromTop; //from top
@@ -465,18 +468,16 @@ void LwpFrame::ApplyPosType(XFFrameStyle* pFrameStyle)
         {
             eXPos = enumXFFrameXPosFromLeft;
             eXRel = enumXFFrameXRelPage;
-            eYPos = enumXFFrameYPosBelow;   //below
-            eYRel = enumXFFrameYRelChar; //from char
             //set vertical position
-            LwpVirtualLayout* pContainer = m_pLayout->GetContainerLayout();
-            if(pContainer && pContainer->IsPage())//in page
+            rtl::Reference<LwpVirtualLayout> xContainer(m_pLayout->GetContainerLayout());
+            if (xContainer.is() && xContainer->IsPage())//in page
             {
                 //eYPos = enumXFFrameYPosFromTop;
                 //eYRel = enumXFFrameYRelPage;
                 eYPos = enumXFFrameYPosBelow;
                 eYRel = enumXFFrameYRelChar;
             }
-            else if(pContainer && pContainer->IsFrame()) //in frame
+            else if (xContainer.is() && xContainer->IsFrame()) //in frame
             {
                 eYPos = enumXFFrameYPosFromTop;
                 eYRel = enumXFFrameYRelPage;
@@ -537,12 +538,13 @@ void LwpFrame::ApplyWatermark(XFFrameStyle *pFrameStyle)
     {
         pFrameStyle->SetBackImage(pBGImage);
         //set watermark transparent
-         LwpMiddleLayout* pLay = static_cast<LwpMiddleLayout*>(m_pLayout->GetWaterMarkLayout());
-         LwpBackgroundStuff* pBackgroundStuff = pLay->GetBackgroundStuff();
-         if(pBackgroundStuff && !pBackgroundStuff->IsTransparent())
-         {
-             pFrameStyle->SetTransparency(100);
-         }
+        rtl::Reference<LwpVirtualLayout> xWaterMarkLayout(m_pLayout->GetWaterMarkLayout());
+        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xWaterMarkLayout.get());
+        LwpBackgroundStuff* pBackgroundStuff = pLay ? pLay->GetBackgroundStuff() : nullptr;
+        if(pBackgroundStuff && !pBackgroundStuff->IsTransparent())
+        {
+            pFrameStyle->SetTransparency(100);
+        }
      }
 }
 
@@ -615,11 +617,11 @@ void LwpFrame::ParseAnchorType(XFFrame *pXFFrame)
             //anchor to page, frame and cell
             if(m_pLayout->IsAnchorPage())//in page
             {
-                LwpVirtualLayout* pContainer = m_pLayout->GetContainerLayout();
-                if(pContainer && (pContainer->IsHeader() || pContainer->IsFooter()))
+                rtl::Reference<LwpVirtualLayout> xContainer(m_pLayout->GetContainerLayout());
+                if (xContainer.is() && (xContainer->IsHeader() || xContainer->IsFooter()))
                 {
                     eAnchor = enumXFAnchorPara;
-                    fYOffset -= pContainer->GetMarginsValue(MARGIN_TOP);
+                    fYOffset -= xContainer->GetMarginsValue(MARGIN_TOP);
                 }
                 else
                     eAnchor = enumXFAnchorPage;
@@ -632,8 +634,9 @@ void LwpFrame::ParseAnchorType(XFFrame *pXFFrame)
             {
                 //eAnchor = enumXFAnchorChar;
                 eAnchor = enumXFAnchorPara;
-                LwpMiddleLayout* pContainer = static_cast<LwpMiddleLayout*>(m_pLayout->GetContainerLayout());
-                if(pContainer)
+                rtl::Reference<LwpVirtualLayout> xContainer(m_pLayout->GetContainerLayout());
+                LwpMiddleLayout* pContainer = dynamic_cast<LwpMiddleLayout*>(xContainer.get());
+                if (pContainer)
                 {
                     fYOffset -= pContainer->GetMarginsValue(MARGIN_TOP);
                 }
@@ -643,26 +646,26 @@ void LwpFrame::ParseAnchorType(XFFrame *pXFFrame)
         case LwpLayoutRelativityGuts::LAY_PARA_RELATIVE:    //same page as text
         {
             eAnchor = enumXFAnchorChar;
-            LwpVirtualLayout* pContainer = m_pLayout->GetContainerLayout();
-            if(pContainer && pContainer->IsPage())//in page
+            rtl::Reference<LwpVirtualLayout> xContainer(m_pLayout->GetContainerLayout());
+            if (xContainer.is() && xContainer->IsPage())//in page
             {
                 //eAnchor = enumXFAnchorPage;
                 eAnchor = enumXFAnchorChar;// to character
             }
-            else if(pContainer && pContainer->IsFrame()) //in frame
+            else if (xContainer.is() && xContainer->IsFrame()) //in frame
             {
                 eAnchor = enumXFAnchorFrame;
             }
-            else if(pContainer && pContainer->IsCell()) //in cell
+            else if (xContainer.is() && xContainer->IsCell()) //in cell
             {
                 //eAnchor = enumXFAnchorChar;
                 eAnchor = enumXFAnchorPara;
-                fYOffset -= pContainer->GetMarginsValue(MARGIN_TOP);
+                fYOffset -= xContainer->GetMarginsValue(MARGIN_TOP);
             }
-            else if(pContainer && (pContainer->IsHeader() || pContainer->IsFooter()))//in header or footer
+            else if (xContainer.is() && (xContainer->IsHeader() || xContainer->IsFooter()))//in header or footer
             {
                 eAnchor = enumXFAnchorPara;
-                fYOffset -= pContainer->GetMarginsValue(MARGIN_TOP);
+                fYOffset -= xContainer->GetMarginsValue(MARGIN_TOP);
             }
             break;
         }
@@ -690,7 +693,6 @@ void LwpFrame::ParseAnchorType(XFFrame *pXFFrame)
 
             //because of the different feature between Word Pro and SODC, I simulate the vertical base offset
             //between anchor and frame origin using the font height.
-            //LwpPara* pPara = static_cast<LwpPara*>(m_pLayout->GetPosition()->obj());
             rtl::Reference<XFFont> pFont = m_pLayout->GetFont();
             if(pFont.is())
             {
@@ -715,9 +717,9 @@ void LwpFrame::ParseAnchorType(XFFrame *pXFFrame)
  */
 bool LwpFrame::IsLeftWider()
 {
-    //LwpMiddleLayout* pParent = static_cast<LwpMiddleLayout*>(m_pLayout->GetContainerLayout());
-    LwpVirtualLayout* pParent = static_cast<LwpVirtualLayout*>(m_pLayout->GetContainerLayout());
-    if(pParent)
+    rtl::Reference<LwpVirtualLayout> xLayout(m_pLayout->GetContainerLayout());
+    LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*>(xLayout.get());
+    if (pParent)
     {
         LwpPoint aPoint = m_pLayout->GetOrigin();
         double fXOffset = LwpTools::ConvertFromUnitsToMetric(aPoint.GetX());
@@ -867,7 +869,7 @@ void  LwpFrameLayout::RegisterStyle()
     if (content.is())
     {
         content->SetFoundry(m_pFoundry);
-        content->RegisterStyle();
+        content->DoRegisterStyle();
     }
 
     //register child frame style
@@ -915,10 +917,13 @@ bool LwpFrameLayout::IsForWaterMark()
 {
     if(m_nBuoyancy >=LAY_BUOYLAYER)
     {
-        if(!m_Content.IsNull() && (m_Content.obj()->GetTag()==VO_GRAPHIC) )
-        {
+        if (m_Content.IsNull())
+            return false;
+        rtl::Reference<LwpObject> content = m_Content.obj();
+        if (!content.is())
+            return false;
+        if (content->GetTag() == VO_GRAPHIC)
             return true;
-        }
     }
     return false;
 }
@@ -945,8 +950,9 @@ double LwpFrameLayout::GetWidth()
 double LwpFrameLayout::GetMaxWidth()
 {
     double fActualWidth = 0;
-    LwpMiddleLayout* pParent = static_cast<LwpMiddleLayout*>(GetContainerLayout());
-    if(pParent)
+    rtl::Reference<LwpVirtualLayout> xLayout(GetContainerLayout());
+    LwpMiddleLayout* pParent = dynamic_cast<LwpMiddleLayout*>(xLayout.get());
+    if (pParent)
     {
         LwpPoint aPoint = GetOrigin();
         double fXOffset = LwpTools::ConvertFromUnitsToMetric(aPoint.GetX());
@@ -1096,11 +1102,11 @@ void LwpGroupLayout::XFConvertFrame(XFContentContainer* pCont, sal_Int32 nStart
         m_pFrame->Parse(pXFFrame, nStart);
 
         //add child frame into group
-        LwpVirtualLayout* pLayout = static_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
+        LwpVirtualLayout* pLayout = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
         while(pLayout)
         {
             pLayout->XFConvert(pXFFrame);
-            pLayout = static_cast<LwpVirtualLayout*>(pLayout->GetNext().obj().get());
+            pLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetNext().obj().get());
         }
 
         pCont ->Add(pXFFrame);
@@ -1153,7 +1159,7 @@ void LwpDropcapLayout::Parse(IXFStream* pOutputStream)
     if(pPara.is())
     {
         pPara->SetFoundry(m_pFoundry);
-        pPara->Parse(pOutputStream);
+        pPara->DoParse(pOutputStream);
     }
 }
 
@@ -1179,12 +1185,12 @@ void LwpDropcapLayout::RegisterStyle(LwpFoundry* pFoundry)
     {
         pStory->SetDropcapFlag(true);
         pStory->SetFoundry(pFoundry);
-        LwpPara* pPara = static_cast<LwpPara*>(pStory->GetFirstPara().obj().get());
+        LwpPara* pPara = dynamic_cast<LwpPara*>(pStory->GetFirstPara().obj().get());
         while(pPara)
         {
             pPara->SetFoundry(pFoundry);
             pPara->RegisterStyle();
-            pPara = static_cast<LwpPara*>(pPara->GetNext().obj().get());
+            pPara = dynamic_cast<LwpPara*>(pPara->GetNext().obj().get());
         }
     }
 }
@@ -1240,6 +1246,8 @@ void LwpRubyLayout::ConvertContentText()
 void LwpRubyLayout::RegisterStyle()
 {
     LwpRubyMarker* pMarker = GetMarker();
+    if (!pMarker)
+        throw std::runtime_error("missing Ruby Marker");
 
     XFRubyStyle* pRubyStyle = new XFRubyStyle;
 
diff --git a/lotuswordpro/source/filter/lwpfrib.cxx b/lotuswordpro/source/filter/lwpfrib.cxx
index bc404aa..71b4e3f 100644
--- a/lotuswordpro/source/filter/lwpfrib.cxx
+++ b/lotuswordpro/source/filter/lwpfrib.cxx
@@ -249,15 +249,21 @@ void LwpFrib::RegisterStyle(LwpFoundry* pFoundry)
     XFTextStyle* pStyle = NULL;
     m_StyleName = "";
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
-    if (m_pModifiers->HasCharStyle)
+    XFTextStyle* pNamedStyle = nullptr;
+    if (m_pModifiers->HasCharStyle && pFoundry)
     {
-        XFTextStyle* pNamedStyle = static_cast<XFTextStyle*>
+        pNamedStyle = dynamic_cast<XFTextStyle*>
                                 (pFoundry->GetStyleManager()->GetStyle(m_pModifiers->CharStyleID));
-        if (m_pModifiers->FontID)
+    }
+    if (pNamedStyle)
+    {
+        LwpCharacterStyle* pCharStyle = nullptr;
+        if (m_pModifiers->FontID && pFoundry)
+            pCharStyle = dynamic_cast<LwpCharacterStyle*>(m_pModifiers->CharStyleID.obj().get());
+        if (pCharStyle)
         {
             pStyle = new XFTextStyle();
             *pStyle = *pNamedStyle;
-            LwpCharacterStyle* pCharStyle = static_cast<LwpCharacterStyle*>(m_pModifiers->CharStyleID.obj().get());
 
             pStyle->SetStyleName("");
             pFont = pFoundry->GetFontManger().CreateOverrideFont(pCharStyle->GetFinalFontID(),m_pModifiers->FontID);
@@ -273,7 +279,7 @@ void LwpFrib::RegisterStyle(LwpFoundry* pFoundry)
     }
     else
     {
-        if (m_pModifiers->FontID)
+        if (m_pModifiers->FontID && pFoundry)
         {
             pStyle = new XFTextStyle();
             pFont = pFoundry->GetFontManger().CreateFont(m_pModifiers->FontID);
diff --git a/lotuswordpro/source/filter/lwpfribbreaks.cxx b/lotuswordpro/source/filter/lwpfribbreaks.cxx
index eaaf919..952a3e6 100644
--- a/lotuswordpro/source/filter/lwpfribbreaks.cxx
+++ b/lotuswordpro/source/filter/lwpfribbreaks.cxx
@@ -80,12 +80,9 @@ void LwpFribColumnBreak::RegisterBreakStyle(LwpPara * pPara)
     *pOverStyle = *pBaseStyle;
     pOverStyle->SetStyleName("");
 
-    //Old code
-    //if (static_cast<LwpStory*>(pPara->GetStoryID()->obj())
-    //  ->GetCurrentLayout()->GetNumCols() == 1)
     //New code
-    LwpStory* pStory = static_cast<LwpStory*>(pPara->GetStoryID().obj().get());
-    LwpPageLayout* pCurLayout = pStory ? pStory->GetCurrentLayout() : NULL;
+    LwpStory* pStory = dynamic_cast<LwpStory*>(pPara->GetStoryID().obj().get());
+    LwpPageLayout* pCurLayout = pStory ? pStory->GetCurrentLayout() : nullptr;
     if( pCurLayout && (pCurLayout->GetNumCols() == 1) )
 
     {
diff --git a/lotuswordpro/source/filter/lwpfribframe.cxx b/lotuswordpro/source/filter/lwpfribframe.cxx
index fc16cfd..6b1d5f8 100644
--- a/lotuswordpro/source/filter/lwpfribframe.cxx
+++ b/lotuswordpro/source/filter/lwpfribframe.cxx
@@ -108,7 +108,7 @@ void LwpFribFrame::RegisterStyle(LwpFoundry* pFoundry)
         if (!pLayout)
             return;
         pLayout->SetFoundry(pFoundry);
-        pLayout->RegisterStyle();
+        pLayout->DoRegisterStyle();
 
         //register next frib text style
         sal_uInt8 nType = pLayout->GetRelativeType();
@@ -156,13 +156,13 @@ void LwpFribFrame::XFConvert(XFContentContainer* pCont)
     sal_uInt8 nType = pLayout->GetRelativeType();
     if( LwpLayoutRelativityGuts::LAY_PARA_RELATIVE == nType)
     {
-        LwpVirtualLayout* pContainerLayout = pLayout->GetContainerLayout();
-        if(pContainerLayout && pContainerLayout->IsFrame())
+        rtl::Reference<LwpVirtualLayout> xContainerLayout(pLayout->GetContainerLayout());
+        if (xContainerLayout.is() && xContainerLayout->IsFrame())
         {
             //same page as text and in frame
             pXFContentContainer = m_pPara->GetXFContainer();
         }
-        else if(pContainerLayout && pContainerLayout->IsCell())
+        else if (xContainerLayout.is() && xContainerLayout->IsCell())
         {
             //same page as text and in cell, get the first xfpara
             rtl::Reference<XFContent> first(
diff --git a/lotuswordpro/source/filter/lwpfribmark.cxx b/lotuswordpro/source/filter/lwpfribmark.cxx
index 430d7e5..a3bfeb8 100644
--- a/lotuswordpro/source/filter/lwpfribmark.cxx
+++ b/lotuswordpro/source/filter/lwpfribmark.cxx
@@ -136,12 +136,12 @@ void LwpFribCHBlock::XFConvert(XFContentContainer* pXFPara,LwpStory* pStory)
 void  LwpFribBookMark::RegisterStyle(LwpFoundry* pFoundry)
 {
     OUString name;
-    LwpBookMark* pBook = pFoundry->GetBookMark(GetMarkerID());
+    LwpBookMark* pBook = pFoundry ? pFoundry->GetBookMark(GetMarkerID()) : nullptr;
     if (pBook)
         name = pBook->GetName();
 
     OUString sDivision;
-    LwpDocument* pDoc = pFoundry->GetDocument();
+    LwpDocument* pDoc = pFoundry ? pFoundry->GetDocument() : nullptr;
     if (pDoc)
     {
         LwpObjectID& rID = pDoc->GetDivInfoID();
@@ -666,13 +666,13 @@ void LwpFribField::RegisterDateTimeStyle(const OUString& sFormula)
             pDateStyle = new XFDateStyle;
             OUString sText;
             pDateStyle->AddYear();
-            sText = OUString(0x5e74);
+            sText = OUString(sal_Unicode(0x5e74));
             pDateStyle->AddText(sText);
             pDateStyle->AddMonth(false);
-            sText = OUString(0x6708);
+            sText = OUString(sal_Unicode(0x6708));
             pDateStyle->AddText(sText);
             pDateStyle->AddMonthDay(false);
-            sText = OUString(0x65e5);
+            sText = OUString(sal_Unicode(0x65e5));
             pDateStyle->AddText(sText);
         }
         else if (sFormula == "%FLoa" || sFormula == "%FLooaa" || sFormula == "%FLOA" )
@@ -680,10 +680,10 @@ void LwpFribField::RegisterDateTimeStyle(const OUString& sFormula)
             pDateStyle = new XFDateStyle;
             OUString sText;
             pDateStyle->AddMonth(false);
-            sText = OUString(0x6708);
+            sText = OUString(sal_Unicode(0x6708));
             pDateStyle->AddText(sText);
             pDateStyle->AddMonthDay(false);
-            sText = OUString(0x65e5);
+            sText = OUString(sal_Unicode(0x65e5));
             pDateStyle->AddText(sText);
         }
         else if (sFormula == "%FLYYYY/M/D" || sFormula == "%FLGGGG/od/ad")
@@ -973,10 +973,10 @@ void LwpFribField::RegisterDateTimeStyle(const OUString& sFormula)
             pTimeStyle = new XFTimeStyle;
             pTimeStyle->AddHour(false);
             OUString sText;
-            sText = OUString(0x70b9);
+            sText = OUString(sal_Unicode(0x70b9));
             pTimeStyle->AddText(sText);
             pTimeStyle->AddMinute(false);
-            sText = OUString(0x5206);
+            sText = OUString(sal_Unicode(0x5206));
             pTimeStyle->AddText(sText);
         }
         else if (sFormula == "%FLjjjF" || sFormula == "%FLJJJFF" )
@@ -985,10 +985,10 @@ void LwpFribField::RegisterDateTimeStyle(const OUString& sFormula)
             pTimeStyle->SetAmPm(true);
             pTimeStyle->AddHour(false);
             OUString sText;
-            sText = OUString(0x70b9);
+            sText = OUString(sal_Unicode(0x70b9));
             pTimeStyle->AddText(sText);
             pTimeStyle->AddMinute(false);
-            sText = OUString(0x5206);
+            sText = OUString(sal_Unicode(0x5206));
             pTimeStyle->AddText(sText);
         }
         //chinese version end
diff --git a/lotuswordpro/source/filter/lwpfribptr.cxx b/lotuswordpro/source/filter/lwpfribptr.cxx
index 4f3211a..2060300 100644
--- a/lotuswordpro/source/filter/lwpfribptr.cxx
+++ b/lotuswordpro/source/filter/lwpfribptr.cxx
@@ -94,11 +94,9 @@ LwpFribPtr::LwpFribPtr()
 
 LwpFribPtr::~LwpFribPtr()
 {
-    LwpFrib* pNextFrib = m_pFribs;
-    LwpFrib* pCurFrib = m_pFribs;
-    while(pCurFrib)
+    for (LwpFrib* pCurFrib = m_pFribs; pCurFrib;)
     {
-        pNextFrib = pCurFrib -> GetNext();
+        LwpFrib* pNextFrib = pCurFrib -> GetNext();
         delete pCurFrib;
         pCurFrib = pNextFrib;
     }
@@ -269,9 +267,9 @@ void LwpFribPtr::XFConvert()
         case FRIB_TAG_HARDSPACE:
         {
             OUString sHardSpace(sal_Unicode(0x00a0));
-            LwpHyperlinkMgr* pHyperlink =
-                    m_pPara->GetStory()->GetHyperlinkMgr();
-            if (pHyperlink->GetHyperlinkFlag())
+            LwpStory *pStory = m_pPara->GetStory();
+            LwpHyperlinkMgr* pHyperlink = pStory ? pStory->GetHyperlinkMgr() : nullptr;
+            if (pHyperlink && pHyperlink->GetHyperlinkFlag())
                 pFrib->ConvertHyperLink(m_pXFPara,pHyperlink,sHardSpace);
             else
                 pFrib->ConvertChars(m_pXFPara,sHardSpace);
@@ -288,10 +286,15 @@ void LwpFribPtr::XFConvert()
             LwpFribFrame* frameFrib= static_cast<LwpFribFrame*>(pFrib);
             rtl::Reference<LwpObject> pLayout = frameFrib->GetLayout();
             if (pLayout.is() && pLayout->GetTag() == VO_DROPCAPLAYOUT)
-                m_pPara->GetFoundry()->GetDropcapMgr()->SetXFPara(m_pXFPara);
+            {
+                LwpFoundry* pFoundry = m_pPara->GetFoundry();
+                LwpDropcapMgr* pMgr = pFoundry ? pFoundry->GetDropcapMgr() : nullptr;
+                if (pMgr)
+                    pMgr->SetXFPara(m_pXFPara);
+            }
             frameFrib->XFConvert(m_pXFPara);
-        }
             break;
+        }
         case FRIB_TAG_CHBLOCK:
         {
             LwpFribCHBlock* chbFrib = static_cast<LwpFribCHBlock*>(pFrib);
diff --git a/lotuswordpro/source/filter/lwpfribsection.cxx b/lotuswordpro/source/filter/lwpfribsection.cxx
index f66b00f..74cc81d 100644
--- a/lotuswordpro/source/filter/lwpfribsection.cxx
+++ b/lotuswordpro/source/filter/lwpfribsection.cxx
@@ -102,7 +102,7 @@ void LwpFribSection::Read(LwpObjectStream *pObjStrm, sal_uInt16 /*len*/)
  */
 LwpSection* LwpFribSection::GetSection()
 {
-    return static_cast<LwpSection*>(m_Section.obj().get());
+    return dynamic_cast<LwpSection*>(m_Section.obj().get());
 }
 
 /**
@@ -126,11 +126,12 @@ void LwpFribSection::RegisterSectionStyle()
 void LwpFribSection::SetSectionName()
 {
     LwpSection* pSection = GetSection();
-    if(pSection)
-    {
-        LwpStory* pStory = static_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
-        pStory->SetSectionName(pSection->GetSectionName());
-    }
+    if (!pSection)
+        return;
+    LwpStory* pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+    if (!pStory)
+        return;
+    pStory->SetSectionName(pSection->GetSectionName());
 }
 
 /**
@@ -164,24 +165,14 @@ void LwpFribSection::ParseSection()
             m_pMasterPage->ParseSection(this);
         }
     }
-    else
+    else if (LwpStory* pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get()))
     {
-        LwpStory* pStory = static_cast<LwpStory*> ( m_pPara->GetStoryID().obj().get() );
-        if (m_Section.obj()->GetTag() == VO_INDEXSECTION)
+        rtl::Reference<LwpObject> xObj(m_Section.obj());
+        if (xObj.is() && xObj->GetTag() == VO_INDEXSECTION)
         {
             //create a new section and add it to container
             XFIndex* pIndex = new XFIndex;
             pIndex->SetIndexType(enumXFIndexAlphabetical);
-            /*
-            sal_Bool bRunin = sal_False;
-            sal_Bool bSeparator = sal_False;
-            LwpIndexSection* pIndexSection = static_cast<LwpIndexSection*>(m_Section.obj());
-            if (pIndexSection->IsFormatRunin())
-                bRunin = sal_True;
-            if (pIndexSection->IsFormatSeparator())
-                bSeparator = sal_True;
-            pIndex->SetDefaultAlphaIndex("",bRunin,bSeparator);
-            */
             SetDefaultAlphaIndex(pIndex);
 
             pStory->AddXFContent( pIndex );
@@ -200,9 +191,9 @@ void LwpFribSection::SetDefaultAlphaIndex(XFIndex * pXFIndex)
     LwpFoundry* pFoundry = m_pPara->GetFoundry();
     OUString styleName = pFoundry->FindActuralStyleName("Separator");
 
-    LwpIndexSection* pIndexSection = static_cast<LwpIndexSection*>(m_Section.obj().get());
+    LwpIndexSection* pIndexSection = dynamic_cast<LwpIndexSection*>(m_Section.obj().get());
     XFIndexTemplate * pTemplateSep = new XFIndexTemplate();
-    if (pIndexSection->IsFormatSeparator())
+    if (pIndexSection && pIndexSection->IsFormatSeparator())
     {
         pXFIndex->SetSeparator(true);
         pTemplateSep->AddEntry(enumXFIndexTemplateText,"");
@@ -228,7 +219,7 @@ void LwpFribSection::SetDefaultAlphaIndex(XFIndex * pXFIndex)
     pTemplate3->AddEntry(enumXFIndexTemplateTab,"");
     pTemplate3->AddEntry(enumXFIndexTemplatePage,"");
 
-    if (pIndexSection->IsFormatRunin())
+    if (pIndexSection && pIndexSection->IsFormatRunin())
     {
         //pXFIndex->AddTemplate(OUString::number(2),"Primary",pTemplate2);
         //pXFIndex->AddTemplate(OUString::number(3),"Primary",pTemplate3);
@@ -256,10 +247,13 @@ LwpMasterPage::LwpMasterPage(LwpPara* pPara, LwpPageLayout* pLayout)
  */
 bool LwpMasterPage::RegisterMasterPage(LwpFrib* pFrib)
 {
-    //if there is no other frib after current firb, register master page in starting para of next page
-    if(IsNextPageType()&&(!pFrib->HasNextFrib()))
+    //if there is no other frib after current frib, register master page in starting para of next page
+    LwpStory* pStory = nullptr;
+    if (IsNextPageType()&&(!pFrib->HasNextFrib()))
+        pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+
+    if (pStory)
     {
-        LwpStory* pStory = static_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
         pStory->SetCurrentLayout(m_pLayout);
         RegisterFillerPageStyle();
         return false;
@@ -290,14 +284,17 @@ bool LwpMasterPage::RegisterMasterPage(LwpFrib* pFrib)
         case LwpLayout::StartOnOddPage: //fall through
         case LwpLayout::StartOnEvenPage:
         {
-            LwpStory* pStory = static_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
-            pStory->SetCurrentLayout(m_pLayout);
-            //get odd page layout when the current pagelayout is mirror
-            m_pLayout = pStory->GetCurrentLayout();
-            m_bNewSection = IsNeedSection();
-            //bSectionColumns = m_bNewSection;
-            pOverStyle->SetMasterPage( m_pLayout->GetStyleName());
-            RegisterFillerPageStyle();
+            pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+            if (pStory)
+            {
+                pStory->SetCurrentLayout(m_pLayout);
+                //get odd page layout when the current pagelayout is mirror
+                m_pLayout = pStory->GetCurrentLayout();
+                m_bNewSection = IsNeedSection();
+                //bSectionColumns = m_bNewSection;
+                pOverStyle->SetMasterPage( m_pLayout->GetStyleName());
+                RegisterFillerPageStyle();
+            }
             break;
         }
         default:
@@ -305,7 +302,10 @@ bool LwpMasterPage::RegisterMasterPage(LwpFrib* pFrib)
     }
 
     //register tab style;
-    LwpStory* pStory = static_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+    pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+    if (!pStory)
+        return false;
+
     pStory->SetTabLayout(m_pLayout);
     m_pPara->RegisterTabStyle(pOverStyle);
 
@@ -316,8 +316,8 @@ bool LwpMasterPage::RegisterMasterPage(LwpFrib* pFrib)
     {
         XFSectionStyle* pSectStyle= new XFSectionStyle();
         //set margin
-        pStory = static_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
-        if(pStory)
+        pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+        if (pStory)
         {
             LwpPageLayout* pCurrentLayout = pStory->GetCurrentLayout();
             double fLeft = m_pLayout->GetMarginsValue(MARGIN_LEFT)- pCurrentLayout->GetMarginsValue(MARGIN_LEFT);
@@ -348,9 +348,9 @@ bool LwpMasterPage::IsNeedSection()
 {
     bool bNewSection = false;
     //get story
-    LwpStory* pStory = static_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
+    LwpStory* pStory = dynamic_cast<LwpStory*>(m_pPara->GetStoryID().obj().get());
     //if pagelayout is modified, register the pagelayout
-    if(pStory->IsPMModified())
+    if (pStory && pStory->IsPMModified())
     {
         bNewSection = pStory->IsNeedSection();
     }
@@ -396,8 +396,8 @@ void LwpMasterPage::ParseSection(LwpFrib* pFrib)
     XFContentContainer* pContent = CreateXFSection();
     if(pContent)
     {
-        LwpStory* pStory = static_cast<LwpStory*> ( m_pPara->GetStoryID().obj().get() );
-        //delete the additional blank para, 06/28/2005
+        LwpStory* pStory = dynamic_cast<LwpStory*> ( m_pPara->GetStoryID().obj().get() );
+        //delete the additional blank para
         XFParagraph* pCurrPara = rFribPtr.GetXFPara();
         if(!pCurrPara->HasContents())
         {
@@ -407,13 +407,13 @@ void LwpMasterPage::ParseSection(LwpFrib* pFrib)
                 pCurrContainer->RemoveLastContent();
             }
         }
-        //end,06/28/2005
-        pStory->AddXFContent( pContent );
+        if (pStory)
+            pStory->AddXFContent( pContent );
     }
     else
     {
-        LwpStory* pStory = static_cast<LwpStory*> ( m_pPara->GetStoryID().obj().get() );
-        pContent = pStory->GetXFContent();
+        LwpStory* pStory = dynamic_cast<LwpStory*> ( m_pPara->GetStoryID().obj().get() );
+        pContent = pStory ? pStory->GetXFContent() : nullptr;
     }
     if(pContent)
     {
diff --git a/lotuswordpro/source/filter/lwpfribtable.cxx b/lotuswordpro/source/filter/lwpfribtable.cxx
index edd73da..9b69ac7 100644
--- a/lotuswordpro/source/filter/lwpfribtable.cxx
+++ b/lotuswordpro/source/filter/lwpfribtable.cxx
@@ -73,12 +73,14 @@ void LwpFribTable::Read(LwpObjectStream* pObjStrm, sal_uInt16 /*len*/)
 
 LwpSuperTableLayout* LwpFribTable::GetSuperTable()
 {
-    return static_cast<LwpSuperTableLayout*>(m_objTable.obj().get());
+    return dynamic_cast<LwpSuperTableLayout*>(m_objTable.obj().get());
 }
 
 void LwpFribTable::RegisterNewStyle()
 {
-    GetSuperTable()->RegisterNewStyle();
+    LwpSuperTableLayout* pSuper = GetSuperTable();
+    if (pSuper)
+        pSuper->RegisterNewStyle();
     XFParaStyle* pOldStyle = m_pPara->GetXFParaStyle();
     if(HasNextFrib())
     {
@@ -98,17 +100,19 @@ void LwpFribTable::XFConvert(XFContentContainer* pCont)
 {
     XFContentContainer* pXFContentContainer = pCont;
     LwpSuperTableLayout* pSuper = GetSuperTable();
+    if (!pSuper)
+        return;
     sal_uInt8 nType = pSuper->GetRelativeType();
-    LwpVirtualLayout* pContainer = pSuper->GetContainerLayout();
-    if (!pContainer)
+    rtl::Reference<LwpVirtualLayout> xContainer(pSuper->GetContainerLayout());
+    if (!xContainer.is())
         return;
     if ( LwpLayoutRelativityGuts::LAY_INLINE_NEWLINE == nType
-        && !pContainer->IsCell())
+        && !xContainer->IsCell())
     {
         pXFContentContainer = m_pPara->GetXFContainer();
         //delete the additional blank para, 06/28/2005
         XFParagraph* pCurrPara = m_pPara->GetFribs().GetXFPara();
-        if(!pCurrPara->HasContents())
+        if (pXFContentContainer && !pCurrPara->HasContents())
         {
             if(pXFContentContainer->GetLastContent() == pCurrPara)
             {
@@ -120,11 +124,11 @@ void LwpFribTable::XFConvert(XFContentContainer* pCont)
     else if( LwpLayoutRelativityGuts::LAY_PARA_RELATIVE == nType)
     {
         //same page as text and in frame
-        if(pContainer->IsFrame())
+        if (xContainer->IsFrame())
         {
             pXFContentContainer = m_pPara->GetXFContainer();
         }
-        else if(pContainer->IsCell())
+        else if (xContainer->IsCell())
         {
             //same page as text and in cell, get the first xfpara
             rtl::Reference<XFContent> first(
@@ -140,18 +144,20 @@ void LwpFribTable::XFConvert(XFContentContainer* pCont)
         LwpGlobalMgr* pGlobal = LwpGlobalMgr::GetInstance();
         LwpChangeMgr* pChangeMgr = pGlobal->GetLwpChangeMgr();
         sChangeID = pChangeMgr->GetChangeID(this);
-        if (!sChangeID.isEmpty())
+        if (!sChangeID.isEmpty() && pXFContentContainer)
         {
             XFChangeStart* pChangeStart = new XFChangeStart;
             pChangeStart->SetChangeID(sChangeID);
             pXFContentContainer->Add(pChangeStart);
         }
     }
-    pSuper->XFConvert(pXFContentContainer);
+
+    if (pXFContentContainer)
+        pSuper->XFConvert(pXFContentContainer);
 
     if(m_bRevisionFlag)
     {
-        if (!sChangeID.isEmpty())
+        if (!sChangeID.isEmpty() && pXFContentContainer)
         {
             XFChangeEnd* pChangeEnd = new XFChangeEnd;
             pChangeEnd->SetChangeID(sChangeID);
diff --git a/lotuswordpro/source/filter/lwpgrfobj.cxx b/lotuswordpro/source/filter/lwpgrfobj.cxx
index 4c9f3ce..2acd695 100644
--- a/lotuswordpro/source/filter/lwpgrfobj.cxx
+++ b/lotuswordpro/source/filter/lwpgrfobj.cxx
@@ -203,7 +203,7 @@ void LwpGraphicObject::XFConvert (XFContentContainer* pCont)
             pCont->Add(iter->get());
         }
     }
-    else if (this->IsGrafFormatValid())
+    else if (IsGrafFormatValid() && !m_vXFDrawObjects.empty())
     {
         XFImage* pImage = static_cast<XFImage*>(m_vXFDrawObjects.front().get());
 
@@ -214,8 +214,8 @@ void LwpGraphicObject::XFConvert (XFContentContainer* pCont)
         }
         else
         {
-            sal_uInt8* pGrafData = NULL;
-            sal_uInt32 nDataLen = this->GetRawGrafData(pGrafData);
+            sal_uInt8* pGrafData = nullptr;
+            sal_uInt32 nDataLen = GetRawGrafData(pGrafData);
 
             if (pGrafData)
             {
@@ -267,18 +267,18 @@ void LwpGraphicObject::RegisterStyle()
 {
     if (m_sServerContextFormat[1]=='s'&&m_sServerContextFormat[2]=='d'&&m_sServerContextFormat[3]=='w')
     {
-        this->CreateDrawObjects();
+        CreateDrawObjects();
     }
     // test codes for importing pictures
-    else if(this->IsGrafFormatValid())
+    else if(IsGrafFormatValid())
     {
-        this->CreateGrafObject();
+        CreateGrafObject();
     }
 
     if (m_sServerContextFormat[1]=='l'&&m_sServerContextFormat[2]=='c'&&m_sServerContextFormat[3]=='h')
     {
-        LwpVirtualLayout* pMyLayout = GetLayout(NULL);
-        if (pMyLayout && pMyLayout->IsFrame())
+        rtl::Reference<LwpVirtualLayout> xMyLayout(GetLayout(nullptr));
+        if (xMyLayout.is() && xMyLayout->IsFrame())
         {
             XFFrameStyle* pXFFrameStyle = new XFFrameStyle();
             pXFFrameStyle->SetXPosType(enumXFFrameXPosFromLeft, enumXFFrameXRelFrame);
@@ -306,7 +306,7 @@ void LwpGraphicObject::CreateDrawObjects()
     SvStream* pDrawObjStream = NULL;
 
     // get graphic object's bento objet name
-    LwpObjectID& rMyID = this->GetObjectID();
+    LwpObjectID& rMyID = GetObjectID();
     std::string aGrfObjName;
     this->GetBentoNamebyID(rMyID,  aGrfObjName);
 
@@ -358,7 +358,7 @@ sal_uInt32 LwpGraphicObject::GetRawGrafData(sal_uInt8*& pGrafData)
     SvStream* pGrafStream = NULL;
 
     // get graphic object's bento objet name
-    LwpObjectID& rMyID = this->GetObjectID();
+    LwpObjectID& rMyID = GetObjectID();
     std::string aGrfObjName;
     this->GetBentoNamebyID(rMyID,  aGrfObjName);
 
@@ -401,7 +401,7 @@ sal_uInt32 LwpGraphicObject::GetGrafData(sal_uInt8*& pGrafData)
     SvStream* pGrafStream = NULL;
 
     // get graphic object's bento objet name
-    LwpObjectID& rMyID = this->GetObjectID();
+    LwpObjectID& rMyID = GetObjectID();
     std::string aGrfObjName;
     this->GetBentoNamebyID(rMyID,  aGrfObjName);
 
@@ -653,7 +653,7 @@ void LwpGraphicObject::CreateGrafObject()
     pImage->SetAnchorType(enumXFAnchorFrame);
 
     // set object name
-    LwpAtomHolder& rHolder = this->GetName();
+    LwpAtomHolder& rHolder = GetName();
     if ( !rHolder.str().isEmpty() )
     {
         pImage->SetName(rHolder.str());
@@ -669,8 +669,8 @@ void LwpGraphicObject::CreateGrafObject()
  */
 void LwpGraphicObject::XFConvertEquation(XFContentContainer * pCont)
 {
-    sal_uInt8* pGrafData = NULL;
-    sal_uInt32 nDataLen = this->GetGrafData(pGrafData);
+    sal_uInt8* pGrafData = nullptr;
+    sal_uInt32 nDataLen = GetGrafData(pGrafData);
     if(pGrafData)
     {
         //convert equation
diff --git a/lotuswordpro/source/filter/lwpidxmgr.cxx b/lotuswordpro/source/filter/lwpidxmgr.cxx
index 07ea4a1..21be76b 100644
--- a/lotuswordpro/source/filter/lwpidxmgr.cxx
+++ b/lotuswordpro/source/filter/lwpidxmgr.cxx
@@ -154,7 +154,10 @@ void LwpIndexManager::ReadRootData(LwpObjectStream* pObjStrm)
     sal_uInt16 KeyCount = pObjStrm->QuickReaduInt16();
     m_nLeafCount = KeyCount ? KeyCount + 1 : 0;
 
-    if(KeyCount)
+    if (m_nLeafCount > SAL_N_ELEMENTS(m_ChildIndex))
+        throw std::range_error("corrupt RootData");
+
+    if (KeyCount)
     {
         //read object keys
         LwpKey* akey = new LwpKey();
@@ -212,7 +215,7 @@ void LwpIndexManager::ReadObjIndexData(LwpObjectStream* pObjStrm)
             vObjIndexs[k]->offset = pObjStrm->QuickReaduInt32();
 
         for (k = 0; k < LeafCount; k++)
-            m_TempVec[k] = pObjStrm->QuickReaduInt32();
+            m_TempVec.at(k) = pObjStrm->QuickReaduInt32();
     }
 
     for( sal_uInt16 j=0; j<LeafCount; j++ )
@@ -288,14 +291,14 @@ void LwpIndexManager::ReadLeafData( LwpObjectStream *pObjStrm )
         akey->id.Read(pObjStrm);
         m_ObjectKeys.push_back(akey);
 
-        for (sal_uInt8 k = 1; k < KeyCount; k++)
+        for (sal_uInt16 k = 1; k < KeyCount; k++)
         {
             akey = new LwpKey();
             akey->id.ReadCompressed(pObjStrm, m_ObjectKeys.at(m_nKeyCount+k-1)->id);
             m_ObjectKeys.push_back(akey);
         }
 
-        for (sal_uInt8 j = 0; j < KeyCount; j++)
+        for (sal_uInt16 j = 0; j < KeyCount; j++)
             m_ObjectKeys.at(m_nKeyCount+j)->offset = pObjStrm->QuickReaduInt32();
     }
     m_nKeyCount += KeyCount;
diff --git a/lotuswordpro/source/filter/lwplayout.cxx b/lotuswordpro/source/filter/lwplayout.cxx
index 0c5c78d..3247911 100644
--- a/lotuswordpro/source/filter/lwplayout.cxx
+++ b/lotuswordpro/source/filter/lwplayout.cxx
@@ -78,6 +78,11 @@
 
 LwpVirtualLayout::LwpVirtualLayout(LwpObjectHeader &objHdr, LwpSvStream* pStrm)
     : LwpDLNFPVList(objHdr, pStrm)
+    , m_bGettingHonorProtection(false)
+    , m_bGettingMarginsSameAsParent(false)
+    , m_bGettingHasProtection(false)
+    , m_bGettingIsProtected(false)
+    , m_bGettingMarginsValue(false)
     , m_nAttributes(0)
     , m_nAttributes2(0)
     , m_nAttributes3(0)
@@ -143,21 +148,17 @@ bool LwpVirtualLayout::HonorProtection()
     if(!(m_nAttributes2 & STYLE2_HONORPROTECTION))
         return false;
 
-    LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-    if(pParent && !pParent->IsHeader())
+    rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+    if (xParent.is() && !xParent->IsHeader())
     {
-        return pParent->HonorProtection();
+        return xParent->GetHonorProtection();
     }
 
     if(m_pFoundry)//is null now
     {
         LwpDocument* pDoc = m_pFoundry->GetDocument();
-        /*if(pDoc)
-        {
-            return pDoc->HonorProtection();
-        }*/
         if(pDoc && pDoc->GetRootDocument())
-            return pDoc->GetRootDocument()->HonorProtection();
+            return pDoc->GetRootDocument()->GetHonorProtection();
     }
 
     return true;
@@ -171,10 +172,10 @@ bool LwpVirtualLayout::IsProtected()
 {
     bool bProtected = (m_nAttributes & STYLE_PROTECTED)!=0;
 
-    LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-    if(pParent && !pParent->IsHeader())
+    rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+    if (xParent.is() && !xParent->IsHeader())
     {
-        if(pParent->HonorProtection()&&(pParent->HasProtection()||bProtected))
+        if (xParent->GetHonorProtection() && (xParent->GetHasProtection()||bProtected))
         {
             return true;
         }
@@ -184,7 +185,7 @@ bool LwpVirtualLayout::IsProtected()
         LwpDocument* pDoc = m_pFoundry->GetDocument();
         if(pDoc)
         {
-            if (pDoc->HonorProtection() && bProtected)
+            if (pDoc->GetHonorProtection() && bProtected)
             {
                 return true;
             }
@@ -203,10 +204,10 @@ bool LwpVirtualLayout::HasProtection()
     if(m_nAttributes & STYLE_PROTECTED)
         return true;
 
-    LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-    if(pParent && !pParent->IsHeader())
+    rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+    if (xParent.is() && !xParent->IsHeader())
     {
-        return pParent->HasProtection();
+        return xParent->GetHasProtection();
     }
 
     return false;
@@ -234,9 +235,9 @@ LwpUseWhen* LwpVirtualLayout::GetUseWhen()
     if(GetLayoutType()!=LWP_PAGE_LAYOUT)
     {
         //get parent
-        LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-        if(pParent && !pParent->IsHeader()&& (pParent->GetLayoutType()!=LWP_PAGE_LAYOUT))
-            return pParent->GetUseWhen();
+        rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+        if (xParent.is() && !xParent->IsHeader() && (xParent->GetLayoutType() != LWP_PAGE_LAYOUT))
+            return xParent->GetUseWhen();
 
     }
 
@@ -344,9 +345,9 @@ bool LwpVirtualLayout::IsMinimumHeight()
 * @descr:   Get parent layout
 *
 */
-LwpVirtualLayout* LwpVirtualLayout::GetParentLayout()
+rtl::Reference<LwpVirtualLayout> LwpVirtualLayout::GetParentLayout()
 {
-    return dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
+    return rtl::Reference<LwpVirtualLayout>(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
 }
 
 /**
@@ -356,12 +357,12 @@ LwpVirtualLayout* LwpVirtualLayout::GetParentLayout()
 void LwpVirtualLayout::RegisterChildStyle()
 {
     //Register all children styles
-    LwpVirtualLayout* pLayout = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+    while (xLayout.is())
     {
-        pLayout->SetFoundry(m_pFoundry);
-        pLayout->RegisterStyle();
-        pLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetNext().obj().get());
+        xLayout->SetFoundry(m_pFoundry);
+        xLayout->RegisterStyle();
+        xLayout.set(dynamic_cast<LwpVirtualLayout*>(xLayout->GetNext().obj().get()));
     }
 }
 
@@ -375,9 +376,9 @@ bool LwpVirtualLayout::IsStyleLayout()
     if (m_nAttributes3 & STYLE3_STYLELAYOUT)
         return true;
 
-    LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get());
-    if (pParent)
-        return pParent->IsStyleLayout();
+    rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+    if (xParent.is())
+        return xParent->IsStyleLayout();
     return false;
 }
 
@@ -445,44 +446,40 @@ void LwpAssociatedLayouts::Read(LwpObjectStream* pStrm)
 * @descr:   Looking for the layout which follows the pStartLayout
 * @param:   pStartLayout - the layout which is used for looking for its following layout
 */
-LwpVirtualLayout* LwpAssociatedLayouts::GetLayout(LwpVirtualLayout *pStartLayout)
+rtl::Reference<LwpVirtualLayout> LwpAssociatedLayouts::GetLayout(LwpVirtualLayout *pStartLayout)
 {
-    LwpVirtualLayout* pLayout = NULL;
-
     if (!pStartLayout && !m_OnlyLayout.IsNull())
         /* Looking for the first layout and there's only one layout in  the list.*/
-        return dynamic_cast<LwpVirtualLayout*>(m_OnlyLayout.obj().get());
+        return rtl::Reference<LwpVirtualLayout>(dynamic_cast<LwpVirtualLayout*>(m_OnlyLayout.obj().get()));
 
-    LwpObjectHolder* pObjHolder = dynamic_cast<LwpObjectHolder*>(m_Layouts.GetHead().obj().get());
-    if(pObjHolder)
+    rtl::Reference<LwpObjectHolder> xObjHolder(dynamic_cast<LwpObjectHolder*>(m_Layouts.GetHead().obj().get()));
+    if (xObjHolder.is())
     {
-        pLayout = dynamic_cast<LwpVirtualLayout*>(pObjHolder->GetObject().obj().get());
-        if(!pStartLayout )
-            return pLayout;
+        rtl::Reference<LwpVirtualLayout> xLayout(dynamic_cast<LwpVirtualLayout*>(xObjHolder->GetObject().obj().get()));
+        if (!pStartLayout)
+            return xLayout;
 
-        while(pObjHolder && pStartLayout != pLayout)
+        while (xObjHolder.is() && pStartLayout != xLayout.get())
         {
-            pObjHolder = dynamic_cast<LwpObjectHolder*>(pObjHolder->GetNext().obj().get());
-            if(pObjHolder)
+            xObjHolder.set(dynamic_cast<LwpObjectHolder*>(xObjHolder->GetNext().obj().get()));
+            if (xObjHolder.is())
             {
-                pLayout = dynamic_cast<LwpVirtualLayout*>(pObjHolder->GetObject().obj().get());
+                xLayout.set(dynamic_cast<LwpVirtualLayout*>(xObjHolder->GetObject().obj().get()));
             }
         }
 
-        if(pObjHolder)
+        if (xObjHolder.is())
         {
-            pObjHolder = dynamic_cast<LwpObjectHolder*>(pObjHolder->GetNext().obj().get());
-            if(pObjHolder)
+            xObjHolder.set(dynamic_cast<LwpObjectHolder*>(xObjHolder->GetNext().obj().get()));
+            if (xObjHolder.is())
             {
-                pLayout = dynamic_cast<LwpVirtualLayout*>(pObjHolder->GetObject().obj().get());
-                return pLayout;
+                xLayout.set(dynamic_cast<LwpVirtualLayout*>(xObjHolder->GetObject().obj().get()));
+                return xLayout;
             }
         }
-
-        //return pLayout;
     }
 
-    return NULL;
+    return rtl::Reference<LwpVirtualLayout>();
 }
 
 LwpHeadLayout::LwpHeadLayout(LwpObjectHeader &objHdr, LwpSvStream* pStrm)
@@ -501,27 +498,27 @@ void LwpHeadLayout::Read()
 void LwpHeadLayout::RegisterStyle()
 {
     //Register all children styles
-    LwpVirtualLayout* pLayout = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+    while (xLayout.is())
     {
-        pLayout->SetFoundry(m_pFoundry);
+        xLayout->SetFoundry(m_pFoundry);
         //if the layout is relative to para, the layout will be registered in para
-        if(!pLayout->IsRelativeAnchored())
+        if (!xLayout->IsRelativeAnchored())
         {
-            if (pLayout == this)
+            if (xLayout.get() == this)
             {
                 OSL_FAIL("Layout points to itself");
                 break;
             }
-            pLayout->RegisterStyle();
+            xLayout->DoRegisterStyle();
         }
-        LwpVirtualLayout *pNext = dynamic_cast<LwpVirtualLayout*>(pLayout->GetNext().obj().get());
-        if (pNext == pLayout)
+        rtl::Reference<LwpVirtualLayout> xNext(dynamic_cast<LwpVirtualLayout*>(xLayout->GetNext().obj().get()));
+        if (xNext.get() == xLayout.get())
         {
             OSL_FAIL("Layout points to itself");
             break;
         }
-        pLayout = pNext;
+        xLayout = xNext;
     }
 }
 
@@ -529,18 +526,18 @@ void LwpHeadLayout::RegisterStyle()
  * @descr   find endnote supertable layout from the child layout list. Suppose that there is only one endnote supertablelayout in one division
  * @return pointer to endnote supertable layout
  */
-LwpVirtualLayout* LwpHeadLayout::FindEnSuperTableLayout()
+rtl::Reference<LwpVirtualLayout> LwpHeadLayout::FindEnSuperTableLayout()
 {
-    LwpVirtualLayout* pLayout = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+    while (xLayout.get())
     {
-        if(pLayout->GetLayoutType() == LWP_ENDNOTE_SUPERTABLE_LAYOUT)
+        if (xLayout->GetLayoutType() == LWP_ENDNOTE_SUPERTABLE_LAYOUT)
         {
-            return pLayout;
+            return xLayout;
         }
-        pLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetNext().obj().get());
+        xLayout.set(dynamic_cast<LwpVirtualLayout*>(xLayout->GetNext().obj().get()));
     }
-    return NULL;
+    return rtl::Reference<LwpVirtualLayout>();
 }
 
 LwpLayoutStyle::LwpLayoutStyle()
@@ -589,9 +586,12 @@ void LwpLayoutMisc::Read(LwpObjectStream* pStrm)
 }
 
 LwpMiddleLayout::LwpMiddleLayout( LwpObjectHeader &objHdr, LwpSvStream* pStrm )
-    : LwpVirtualLayout(objHdr, pStrm),
-      m_pStyleStuff(new LwpLayoutStyle), m_pMiscStuff(new LwpLayoutMisc)
-{}
+    : LwpVirtualLayout(objHdr, pStrm)
+    , m_pStyleStuff(new LwpLayoutStyle)
+    , m_pMiscStuff(new LwpLayoutMisc)
+    , m_bGettingGeometry(false)
+{
+}
 
 LwpMiddleLayout::~LwpMiddleLayout()
 {
@@ -650,22 +650,36 @@ void LwpMiddleLayout::Read()
     //end
 }
 
+rtl::Reference<LwpObject> LwpMiddleLayout::GetBasedOnStyle()
+{
+    rtl::Reference<LwpObject> xRet(m_BasedOnStyle.obj());
+    if (xRet.get() == this)
+    {
+        SAL_WARN("lwp", "style based on itself");
+        return rtl::Reference<LwpObject>();
+    }
+    return xRet;
+}
+
 #include "lwplaypiece.hxx"
 
 /**
 * @descr:   Get the geometry of current layout
 *
 */
-LwpLayoutGeometry* LwpMiddleLayout::GetGeometry()
+LwpLayoutGeometry* LwpMiddleLayout::Geometry()
 {
     if( !m_LayGeometry.IsNull() )
     {
         return ( dynamic_cast<LwpLayoutGeometry*> (m_LayGeometry.obj().get()) );
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetGeometry() : NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->GetGeometry();
+        }
     }
     return NULL;
 }
@@ -710,31 +724,29 @@ bool LwpMiddleLayout::MarginsSameAsParent()
     {
         return LwpVirtualLayout::MarginsSameAsParent();
     }
-    if(!m_BasedOnStyle.IsNull())
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (LwpVirtualLayout* pLay = dynamic_cast<LwpVirtualLayout*>(xBase.get()))
     {
-        LwpVirtualLayout* pLay = dynamic_cast<LwpVirtualLayout*> (m_BasedOnStyle.obj().get());
-        if (pLay)
-            pLay->MarginsSameAsParent();
+        pLay->GetMarginsSameAsParent();
     }
     return LwpVirtualLayout::MarginsSameAsParent();
-
 }
 
 /**
 * @descr:   Get margin
 * @param:   nWhichSide - 0: left, 1: right, 2:top, 3: bottom
 */
-double LwpMiddleLayout::GetMarginsValue(const sal_uInt8 &nWhichSide)
+double LwpMiddleLayout::MarginsValue(const sal_uInt8 &nWhichSide)
 {
     double fValue = 0;
     if((nWhichSide==MARGIN_LEFT)||(nWhichSide==MARGIN_RIGHT))
     {
-        if ( MarginsSameAsParent() )
+        if ( GetMarginsSameAsParent() )
         {
-            LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-            if(pParent && !pParent->IsHeader())
+            rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+            if (xParent.is() && !xParent->IsHeader())
             {
-                fValue = pParent->GetMarginsValue(nWhichSide);
+                fValue = xParent->GetMarginsValue(nWhichSide);
                 return fValue;
             }
         }
@@ -749,13 +761,14 @@ double LwpMiddleLayout::GetMarginsValue(const sal_uInt8 &nWhichSide)
             return fValue;
         }
     }
-    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*> (m_BasedOnStyle.obj().get());
-    if(pStyle)
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*>(xBase.get());
+    if (pStyle)
     {
         fValue = pStyle->GetMarginsValue(nWhichSide);
         return fValue;
     }
-    return LwpVirtualLayout::GetMarginsValue(nWhichSide);
+    return LwpVirtualLayout::MarginsValue(nWhichSide);
 }
 /**
  * @descr:  Get extmargin value
@@ -775,7 +788,7 @@ double LwpMiddleLayout::GetExtMarginsValue(const sal_uInt8 &nWhichSide)
             return fValue;
         }
     }
-    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*> (m_BasedOnStyle.obj().get());
+    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*>(GetBasedOnStyle().get());
     if(pStyle)
     {
         fValue = pStyle->GetExtMarginsValue(nWhichSide);
@@ -796,10 +809,13 @@ LwpBorderStuff* LwpMiddleLayout::GetBorderStuff()
         LwpLayoutBorder* pLayoutBorder = dynamic_cast<LwpLayoutBorder*>(m_LayBorderStuff.obj().get());
         return pLayoutBorder ? &pLayoutBorder->GetBorderStuff() : NULL;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetBorderStuff() :  NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->GetBorderStuff();
+        }
     }
     return NULL;
 }
@@ -817,10 +833,13 @@ LwpBackgroundStuff* LwpMiddleLayout::GetBackgroundStuff()
         LwpLayoutBackground* pLayoutBackground = dynamic_cast<LwpLayoutBackground*>(m_LayBackgroundStuff.obj().get());
         return pLayoutBackground ? &pLayoutBackground->GetBackgoudStuff() : NULL;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetBackgroundStuff() : NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->GetBackgroundStuff();
+        }
     }
     return NULL;
 }
@@ -927,10 +946,13 @@ LwpTabOverride* LwpMiddleLayout::GetTabOverride()
         }
         return NULL;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetTabOverride() : NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->GetTabOverride();
+        }
     }
     return NULL;
 }
@@ -943,62 +965,70 @@ LwpTabOverride* LwpMiddleLayout::GetTabOverride()
 */
 sal_uInt16 LwpMiddleLayout::GetScaleMode(void)
 {
-    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is())
+    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is() && GetLayoutScale())
         return GetLayoutScale()->GetScaleMode();
-    else if (m_BasedOnStyle.obj().is())
-        return dynamic_cast<LwpMiddleLayout*>(m_BasedOnStyle.obj().get())->GetScaleMode();
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
+        return dynamic_cast<LwpMiddleLayout*>(xBase.get())->GetScaleMode();
     else
         return (LwpLayoutScale::FIT_IN_FRAME | LwpLayoutScale::MAINTAIN_ASPECT_RATIO);
 }
 
 sal_uInt16 LwpMiddleLayout::GetScaleTile(void)
 {
-    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is())
+    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is() && GetLayoutScale())
         return (GetLayoutScale()->GetPlacement() & LwpLayoutScale::TILED)
             ? 1 : 0;
-    else if (m_BasedOnStyle.obj().is())
-        return dynamic_cast<LwpMiddleLayout*>(m_BasedOnStyle.obj().get())->GetScaleTile();
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
+        return dynamic_cast<LwpMiddleLayout*>(xBase.get())->GetScaleTile();
     else
         return 0;
 }
 
 sal_uInt16 LwpMiddleLayout::GetScaleCenter(void)
 {
-    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is())
+    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is() && GetLayoutScale())
+    {
         return (GetLayoutScale()->GetPlacement() & LwpLayoutScale::CENTERED)
             ? 1 : 0;
-    else if (m_BasedOnStyle.obj().is())
-        return dynamic_cast<LwpMiddleLayout*>(m_BasedOnStyle.obj().get())->GetScaleCenter();
+    }
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
+        return dynamic_cast<LwpMiddleLayout*>(xBase.get())->GetScaleCenter();
     else
         return 0;
 }
 
 sal_uInt32 LwpMiddleLayout::GetScalePercentage(void)
 {
-    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is())
+    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is() && GetLayoutScale())
         return GetLayoutScale()->GetScalePercentage()/10;//m_nScalePercentage 1000 = 100%
-    else if (m_BasedOnStyle.obj().is())
-        return dynamic_cast<LwpMiddleLayout*>(m_BasedOnStyle.obj().get())->GetScalePercentage();
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
+        return dynamic_cast<LwpMiddleLayout*>(xBase.get())->GetScalePercentage();
     else
         return 100;
 }
 
 double LwpMiddleLayout::GetScaleWidth(void)
 {
-    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is())
+    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is() && GetLayoutScale())
         return LwpTools::ConvertFromUnits(GetLayoutScale()->GetScaleWidth());
-    else if (m_BasedOnStyle.obj().is())
-        return dynamic_cast<LwpMiddleLayout*>(m_BasedOnStyle.obj().get())->GetScaleWidth();
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
+        return dynamic_cast<LwpMiddleLayout*>(xBase.get())->GetScaleWidth();
     else
         return 0;
 }
 
 double LwpMiddleLayout::GetScaleHeight(void)
 {
-    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is())
+    if ((m_nOverrideFlag & OVER_SCALING) && m_LayScale.obj().is() && GetLayoutScale())
         return LwpTools::ConvertFromUnits(GetLayoutScale()->GetScaleHeight());
-    else if (m_BasedOnStyle.obj().is())
-        return dynamic_cast<LwpMiddleLayout*>(m_BasedOnStyle.obj().get())->GetScaleHeight();
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
+        return dynamic_cast<LwpMiddleLayout*>(xBase.get())->GetScaleHeight();
     else
         return 0;
 }
@@ -1035,10 +1065,10 @@ sal_Int32 LwpMiddleLayout::DetermineWidth()
     {
         assert(false);
     }
-    else
+    else if (LwpLayoutGeometry* pGeo = GetGeometry())
     {
         m_nAttributes3 |= STYLE3_WIDTHVALID;
-        return GetGeometry()->GetWidth();
+        return pGeo->GetWidth();
     }
     return 0;
 }
@@ -1053,10 +1083,11 @@ bool LwpMiddleLayout::IsSizeRightToContainer(void)
                         << SHIFT_RIGHT))
         == ((LAY_USEDIRECTION | LAY_TOCONTAINER | LAY_AUTOSIZE) << SHIFT_RIGHT);
     }
-    else if (m_BasedOnStyle.obj().is())
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
     {
-        LwpMiddleLayout * pLayout = dynamic_cast<LwpMiddleLayout *>(m_BasedOnStyle.obj().get());
-        return pLayout ? pLayout->IsSizeRightToContainer() : sal_False;
+        LwpMiddleLayout * pLayout = dynamic_cast<LwpMiddleLayout *>(xBase.get());
+        return pLayout && pLayout->IsSizeRightToContainer();
     }
     else
         return false;
@@ -1072,10 +1103,11 @@ bool LwpMiddleLayout::IsSizeRightToContent(void)
                             << SHIFT_RIGHT))
                 == ((LAY_USEDIRECTION | LAY_AUTOSIZE) << SHIFT_RIGHT);
     }
-    else if (m_BasedOnStyle.obj().is())
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    if (xBase.is())
     {
-        LwpMiddleLayout * pLayout = dynamic_cast<LwpMiddleLayout *>(m_BasedOnStyle.obj().get());
-        return pLayout ? pLayout->IsSizeRightToContent() : sal_False;
+        LwpMiddleLayout * pLayout = dynamic_cast<LwpMiddleLayout *>(xBase.get());
+        return pLayout && pLayout->IsSizeRightToContent();
     }
     else
         return false;
@@ -1165,10 +1197,13 @@ bool LwpMiddleLayout::IsAutoGrow()
             (LAY_AUTOGROW << SHIFT_RIGHT) | (LAY_AUTOGROW << SHIFT_LEFT))
             ? sal_True : sal_False;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->IsAutoGrow() : sal_False;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->IsAutoGrow();
+        }
     }
     return LwpVirtualLayout::IsAutoGrow();
 }
@@ -1183,10 +1218,13 @@ bool LwpMiddleLayout::IsAutoGrowDown()
     {
         return m_nDirection & (LAY_AUTOGROW << SHIFT_DOWN) ? sal_True : sal_False;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->IsAutoGrowDown() : sal_False;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->IsAutoGrowDown();
+        }
     }
     return LwpVirtualLayout::IsAutoGrowDown();
 }
@@ -1201,10 +1239,13 @@ bool LwpMiddleLayout::IsAutoGrowUp()
     {
         return m_nDirection & (LAY_AUTOGROW << SHIFT_UP) ? sal_True : sal_False;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->IsAutoGrowUp() : sal_False;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->IsAutoGrowUp();
+        }
     }
     return LwpVirtualLayout::IsAutoGrowUp();
 }
@@ -1219,11 +1260,13 @@ bool LwpMiddleLayout::IsAutoGrowLeft()
     {
         return m_nDirection & (LAY_AUTOGROW << SHIFT_LEFT) ? sal_True : sal_False;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
             return pLay->IsAutoGrowLeft();
+        }
     }
     return LwpVirtualLayout::IsAutoGrowLeft();
 }
@@ -1238,10 +1281,13 @@ bool LwpMiddleLayout::IsAutoGrowRight()
     {
         return m_nDirection & (LAY_AUTOGROW << SHIFT_RIGHT) ? sal_True : sal_False;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->IsAutoGrowRight() : sal_False;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->IsAutoGrowRight();
+        }
     }
     return LwpVirtualLayout::IsAutoGrowRight();
 }
@@ -1259,11 +1305,13 @@ sal_uInt8 LwpMiddleLayout::GetContentOrientation()
         if (pLayGeometry)
             return pLayGeometry->GetContentOrientation();
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
             return pLay->GetContentOrientation();
+        }
     }
     return LwpVirtualLayout::GetContentOrientation();
 }
@@ -1279,26 +1327,28 @@ bool LwpMiddleLayout::HonorProtection()
         if(!(m_nAttributes2 & STYLE2_HONORPROTECTION))
             return false;
 
-        LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-        if(pParent && !pParent->IsHeader())
+        rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+        if (xParent.is() && !xParent->IsHeader())
         {
-            return pParent->HonorProtection();
+            return xParent->GetHonorProtection();
         }
 
         if(m_pFoundry)//is null now
         {
             LwpDocument* pDoc = m_pFoundry->GetDocument();
-            if(pDoc)
+            if (pDoc)
             {
-                return pDoc->HonorProtection();
+                return pDoc->GetHonorProtection();
             }
         }
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
-            return pLay->HonorProtection();
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->GetHonorProtection();
+        }
     }
 
     return LwpVirtualLayout::HonorProtection();
@@ -1315,22 +1365,25 @@ bool LwpMiddleLayout::IsProtected()
     {
         bProtected = (m_nAttributes & STYLE_PROTECTED)!=0;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        bProtected = pLay ? pLay->IsProtected() : sal_False;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            bProtected = pLay->GetIsProtected();
+        }
+        else
+            bProtected = LwpVirtualLayout::IsProtected();
     }
-    else
-        bProtected = LwpVirtualLayout::IsProtected();
 
-    LwpVirtualLayout* pParent = dynamic_cast<LwpVirtualLayout*> (GetParent().obj().get());
-    if(pParent && !pParent->IsHeader())
+    rtl::Reference<LwpVirtualLayout> xParent(dynamic_cast<LwpVirtualLayout*>(GetParent().obj().get()));
+    if (xParent.is() && !xParent->IsHeader())
     {
         /* If a parent's protected then none of its children can be accessed. */
-        if(pParent->IsProtected())
+        if (xParent->GetIsProtected())
             return true;
 
-        if(pParent->HonorProtection())
+        if (xParent->GetHonorProtection())
             return bProtected;
 
         /* If our parent isn't honoring protection then we aren't protected. */
@@ -1342,7 +1395,7 @@ bool LwpMiddleLayout::IsProtected()
         LwpDocument* pDoc = m_pFoundry->GetDocument();
         if(pDoc)
         {
-            if (pDoc->HonorProtection())
+            if (pDoc->GetHonorProtection())
                 return bProtected;
 
             /* If the document isn't honoring protection then we aren't protected.*/
@@ -1357,18 +1410,18 @@ bool LwpMiddleLayout::IsProtected()
 * @descr:   Get watermark layout
 *
 */
-LwpVirtualLayout* LwpMiddleLayout::GetWaterMarkLayout()
+rtl::Reference<LwpVirtualLayout> LwpMiddleLayout::GetWaterMarkLayout()
 {
-    LwpVirtualLayout* pLay = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-    while(pLay)
+    rtl::Reference<LwpVirtualLayout> xLay(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+    while (xLay.is())
     {
-        if( pLay->IsForWaterMark())
+        if (xLay->IsForWaterMark())
         {
-            return pLay;
+            return xLay;
         }
-        pLay = dynamic_cast<LwpVirtualLayout*> (pLay->GetNext().obj().get());
+        xLay.set(dynamic_cast<LwpVirtualLayout*>(xLay->GetNext().obj().get()));
     }
-    return NULL;
+    return rtl::Reference<LwpVirtualLayout>();
 }
 
 /**
@@ -1377,7 +1430,8 @@ LwpVirtualLayout* LwpMiddleLayout::GetWaterMarkLayout()
 */
 XFBGImage* LwpMiddleLayout::GetXFBGImage()
 {
-    LwpMiddleLayout* pLay = static_cast<LwpMiddleLayout*>(GetWaterMarkLayout());
+    rtl::Reference<LwpVirtualLayout> xWaterMarkLayout(GetWaterMarkLayout());
+    LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xWaterMarkLayout.get());
     if(pLay)
     {
         //test BGImage
@@ -1441,10 +1495,13 @@ bool LwpMiddleLayout::GetUsePrinterSettings()
     {
         return (m_nAttributes3 & STYLE3_USEPRINTERSETTINGS) != 0;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetUsePrinterSettings() : sal_False;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpMiddleLayout* pLay = dynamic_cast<LwpMiddleLayout*>(xBase.get()))
+        {
+            return pLay->GetUsePrinterSettings();
+        }
     }
     return false;
 }
@@ -1521,8 +1578,9 @@ sal_uInt16 LwpLayout::GetNumCols()
         }
     }
 
-    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*> (m_BasedOnStyle.obj().get());
-    if(pStyle)
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*>(xBase.get());
+    if (pStyle)
     {
         return pStyle->GetNumCols();
     }
@@ -1546,8 +1604,9 @@ double LwpLayout::GetColWidth(sal_uInt16 nIndex)
         }
     }
 
-    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*> (m_BasedOnStyle.obj().get());
-    if(pStyle)
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*>(xBase.get());
+    if (pStyle)
     {
         return pStyle->GetColWidth(nIndex);
     }
@@ -1571,8 +1630,9 @@ double LwpLayout::GetColGap(sal_uInt16 nIndex)
         }
     }
 
-    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*> (m_BasedOnStyle.obj().get());
-    if(pStyle)
+    rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+    LwpVirtualLayout* pStyle = dynamic_cast<LwpVirtualLayout*>(xBase.get());
+    if (pStyle)
     {
         return pStyle->GetColGap(nIndex);
     }
@@ -1721,10 +1781,13 @@ sal_uInt16 LwpLayout::GetUsePage()
         else
             return 0;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetUsePage() : 0;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
+            return pLay->GetUsePage();
+        }
     }
     return 0;
 }
@@ -1739,10 +1802,13 @@ LwpUseWhen* LwpLayout::VirtualGetUseWhen()
     {
         return m_pUseWhen;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->VirtualGetUseWhen() : NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
+            return pLay->VirtualGetUseWhen();
+        }
     }
     return LwpVirtualLayout::VirtualGetUseWhen();
 }
@@ -1761,11 +1827,13 @@ bool LwpLayout::IsUseOnAllPages()
         else
             return false;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
             return pLay->IsUseOnAllPages();
+        }
     }
     return LwpVirtualLayout::IsUseOnAllPages();
 }
@@ -1784,11 +1852,13 @@ bool LwpLayout::IsUseOnAllEvenPages()
         else
             return false;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
             return pLay->IsUseOnAllEvenPages();
+        }
     }
     return LwpVirtualLayout::IsUseOnAllEvenPages();
 }
@@ -1807,11 +1877,13 @@ bool LwpLayout::IsUseOnAllOddPages()
         else
             return false;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
             return pLay->IsUseOnAllOddPages();
+        }
     }
     return LwpVirtualLayout::IsUseOnAllOddPages();
 }
@@ -1830,11 +1902,13 @@ bool LwpLayout::IsUseOnPage()
         else
             return false;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
             return pLay->IsUseOnPage();
+        }
     }
     return LwpVirtualLayout::IsUseOnPage();
 }
@@ -1852,10 +1926,13 @@ LwpShadow* LwpLayout::GetShadow()
         LwpLayoutShadow* pLayoutShadow = dynamic_cast<LwpLayoutShadow*>(m_LayShadow.obj().get());
         return pLayoutShadow ? &pLayoutShadow->GetShadow() : NULL;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpLayout* pLay = dynamic_cast<LwpLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetShadow() : NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpLayout* pLay = dynamic_cast<LwpLayout*>(xBase.get()))
+        {
+            return pLay->GetShadow();
+        }
     }
     return NULL;
 }
@@ -1918,7 +1995,7 @@ XFShadow* LwpLayout::GetXFShadow()
  * @descr get the layout that containers the current frame layout
  *
  */
-LwpVirtualLayout* LwpLayout::GetContainerLayout()
+rtl::Reference<LwpVirtualLayout> LwpLayout::GetContainerLayout()
 {
     if(IsRelativeAnchored())
     {
@@ -1999,11 +2076,13 @@ sal_uInt8 LwpPlacableLayout::GetWrapType()
     {
         return m_nWrapType;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpPlacableLayout* pLay = dynamic_cast<LwpPlacableLayout*> ( m_BasedOnStyle.obj().get() );
-        if (pLay)
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpPlacableLayout* pLay = dynamic_cast<LwpPlacableLayout*>(xBase.get()))
+        {
             return pLay->GetWrapType();
+        }
     }
     return LAY_WRAP_AROUND;
 }
@@ -2022,10 +2101,13 @@ LwpLayoutRelativity* LwpPlacableLayout::GetRelativityPiece()
             return dynamic_cast<LwpLayoutRelativity*>(m_LayRelativity.obj().get());
         }
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpPlacableLayout* pLay = dynamic_cast<LwpPlacableLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetRelativityPiece() : NULL;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpPlacableLayout* pLay = dynamic_cast<LwpPlacableLayout*>(xBase.get()))
+        {
+            return pLay->GetRelativityPiece();
+        }
     }
     return NULL;
 }
@@ -2064,10 +2146,13 @@ sal_Int32 LwpPlacableLayout::GetBaseLineOffset()
     {
         return m_nBaseLineOffset;
     }
-    else if( !m_BasedOnStyle.IsNull() )
+    else
     {
-        LwpPlacableLayout* pLay = dynamic_cast<LwpPlacableLayout*> ( m_BasedOnStyle.obj().get() );
-        return pLay ? pLay->GetBaseLineOffset() : 0;
+        rtl::Reference<LwpObject> xBase(GetBasedOnStyle());
+        if (LwpPlacableLayout* pLay = dynamic_cast<LwpPlacableLayout*>(xBase.get()))
+        {
+            return pLay->GetBaseLineOffset();
+        }
     }
     return 0;
 
@@ -2081,9 +2166,8 @@ bool LwpPlacableLayout::IsAnchorPage()
     if(IsRelativeAnchored())
         return false;
 
-    LwpVirtualLayout* pLayout = GetParentLayout();
-    if(pLayout && (pLayout->IsPage() || pLayout->IsHeader() || pLayout->IsFooter()))
-    //if(pLayout && pLayout->IsPage())
+    rtl::Reference<LwpVirtualLayout> xLayout = GetParentLayout();
+    if (xLayout.is() && (xLayout->IsPage() || xLayout->IsHeader() || xLayout->IsFooter()))
     {
         return true;
     }
@@ -2098,8 +2182,8 @@ bool LwpPlacableLayout::IsAnchorFrame()
     if(IsRelativeAnchored())
         return false;
 
-    LwpVirtualLayout* pLayout = GetParentLayout();
-    if(pLayout && (pLayout->IsFrame()||pLayout->IsGroupHead()))
+    rtl::Reference<LwpVirtualLayout> xLayout = GetParentLayout();
+    if (xLayout.is() && (xLayout->IsFrame() || xLayout->IsGroupHead()))
     {
         return true;
     }
@@ -2114,8 +2198,8 @@ bool LwpPlacableLayout::IsAnchorCell()
     if(IsRelativeAnchored())
         return false;
 
-    LwpVirtualLayout* pLayout = GetParentLayout();
-    if(pLayout && pLayout->IsCell())
+    rtl::Reference<LwpVirtualLayout> xLayout = GetParentLayout();
+    if (xLayout.is() && xLayout->IsCell())
     {
         return true;
     }
diff --git a/lotuswordpro/source/filter/lwplayout.hxx b/lotuswordpro/source/filter/lwplayout.hxx
index e1ffb4f..1cdd577 100644
--- a/lotuswordpro/source/filter/lwplayout.hxx
+++ b/lotuswordpro/source/filter/lwplayout.hxx
@@ -100,11 +100,9 @@ class LwpVirtualLayout : public LwpDLNFPVList
 public:
     LwpVirtualLayout(LwpObjectHeader &objHdr, LwpSvStream* pStrm);
     virtual ~LwpVirtualLayout(){}
-    virtual bool MarginsSameAsParent();
     inline virtual sal_uInt16 GetNumCols(){return 1;}
     virtual double GetColWidth(sal_uInt16 nIndex);
     virtual double GetColGap(sal_uInt16 nIndex);
-    virtual double GetMarginsValue(const sal_uInt8& /*nWhichSide*/){return 0;}
     virtual double GetExtMarginsValue(const sal_uInt8& /*nWhichSide*/){return 0;}
     virtual bool IsAutoGrow(){ return false;}
     virtual bool IsAutoGrowUp(){ return false;}
@@ -115,11 +113,53 @@ public:
     virtual bool IsAutoGrowWidth();
     virtual bool IsInlineToMargin();
     virtual sal_uInt8 GetContentOrientation(){ return TEXT_ORIENT_LRTB;}
-    virtual bool HonorProtection();
-    virtual bool IsProtected();
-    virtual bool HasProtection();
-    virtual OUString GetStyleName(){ return m_StyleName;}
-    virtual bool IsComplex();
+    bool GetHonorProtection()
+    {
+        if (m_bGettingHonorProtection)
+            throw std::runtime_error("recursion in layout");
+        m_bGettingHonorProtection = true;
+        bool bRet = HonorProtection();
+        m_bGettingHonorProtection = false;
+        return bRet;
+    }
+    bool GetMarginsSameAsParent()
+    {
+        if (m_bGettingMarginsSameAsParent)
+            throw std::runtime_error("recursion in layout");
+        m_bGettingMarginsSameAsParent = true;
+        bool bRet = MarginsSameAsParent();
+        m_bGettingMarginsSameAsParent = false;
+        return bRet;
+    }
+    bool GetIsProtected()
+    {
+        if (m_bGettingIsProtected)
+            throw std::runtime_error("recursion in layout");
+        m_bGettingIsProtected = true;
+        bool bRet = IsProtected();
+        m_bGettingIsProtected = false;
+        return bRet;
+    }
+    bool GetHasProtection()
+    {
+        if (m_bGettingHasProtection)
+            throw std::runtime_error("recursion in layout");
+        m_bGettingHasProtection = true;
+        bool bRet = HasProtection();
+        m_bGettingHasProtection = false;
+        return bRet;
+    }
+    double GetMarginsValue(const sal_uInt8& nWhichSide)
+    {
+        if (m_bGettingMarginsValue)
+            throw std::runtime_error("recursion in layout");
+        m_bGettingMarginsValue = true;
+        auto fRet = MarginsValue(nWhichSide);
+        m_bGettingMarginsValue = false;
+        return fRet;
+    }
+    OUString GetStyleName(){ return m_StyleName;}
+    bool IsComplex();
     virtual bool IsAnchorPage(){ return false;}
     virtual bool IsAnchorFrame(){ return false;}
     virtual bool IsAnchorCell(){ return false;}
@@ -141,13 +181,13 @@ public:
     virtual sal_Int32 GetPageNumber(sal_uInt16 /*nLayoutNumber*/ = 0){ return -1;}
     virtual bool IsMinimumHeight();
     virtual bool IsForWaterMark(){ return false;}
-    virtual LwpPara* GetLastParaOfPreviousStory() { return NULL; }
-    virtual LwpVirtualLayout* GetParentLayout();
-    virtual LwpVirtualLayout* GetContainerLayout(){ return NULL;}
-    virtual void RegisterChildStyle();
-    virtual bool NoContentReference();
-    virtual bool IsStyleLayout();
-    virtual enumXFAlignType GetVerticalAlignmentType()
+    virtual LwpPara* GetLastParaOfPreviousStory() { return nullptr; }
+    rtl::Reference<LwpVirtualLayout> GetParentLayout();
+    virtual rtl::Reference<LwpVirtualLayout> GetContainerLayout() { return rtl::Reference<LwpVirtualLayout>(); }
+    void RegisterChildStyle();
+    bool NoContentReference();
+    bool IsStyleLayout();
+    enumXFAlignType GetVerticalAlignmentType()
     {
         if (m_nAttributes & STYLE_CENTEREDVERTICALLY)
         {
@@ -167,7 +207,17 @@ public:
     //End by
 protected:
     void Read() SAL_OVERRIDE;
+    bool HasProtection();
+    virtual bool HonorProtection();
+    virtual bool IsProtected();
+    virtual double MarginsValue(const sal_uInt8& /*nWhichSide*/){return 0;}
+    virtual bool MarginsSameAsParent();
 protected:
+    bool m_bGettingHonorProtection;
+    bool m_bGettingMarginsSameAsParent;
+    bool m_bGettingHasProtection;
+    bool m_bGettingIsProtected;
+    bool m_bGettingMarginsValue;
     sal_uInt32 m_nAttributes;
     sal_uInt32 m_nAttributes2;
     sal_uInt32 m_nAttributes3;
@@ -229,8 +279,7 @@ public:
 public:
     void Read(LwpObjectStream* pStrm);
     LwpObjectID& GetOnlyLayout() { return m_OnlyLayout;}
-    LwpDLVListHeadTail& GetLayouts() { return m_Layouts;}
-    LwpVirtualLayout* GetLayout(LwpVirtualLayout* pStartLayout);
+    rtl::Reference<LwpVirtualLayout> GetLayout(LwpVirtualLayout* pStartLayout);
 protected:
     LwpObjectID m_OnlyLayout; //LwpVirtualLayout
     LwpDLVListHeadTail m_Layouts;
@@ -241,8 +290,8 @@ class LwpHeadLayout : public LwpVirtualLayout
 public:
     LwpHeadLayout(LwpObjectHeader &objHdr, LwpSvStream* pStrm);
     virtual ~LwpHeadLayout(){}
-    void RegisterStyle() SAL_OVERRIDE;
-    LwpVirtualLayout* FindEnSuperTableLayout();
+    void RegisterStyle() override;
+    rtl::Reference<LwpVirtualLayout> FindEnSuperTableLayout();
 protected:
     void Read() SAL_OVERRIDE;
     virtual LWP_LAYOUT_TYPE GetLayoutType () SAL_OVERRIDE { return LWP_HEAD_LAYOUT;}
@@ -279,10 +328,17 @@ class LwpMiddleLayout : public LwpVirtualLayout
 public:
     LwpMiddleLayout( LwpObjectHeader &objHdr, LwpSvStream* pStrm );
     virtual ~LwpMiddleLayout();
-    virtual bool MarginsSameAsParent() SAL_OVERRIDE;
-    virtual double GetMarginsValue(const sal_uInt8& nWhichSide) SAL_OVERRIDE;
-    virtual double GetExtMarginsValue(const sal_uInt8& nWhichSide) SAL_OVERRIDE;
-    LwpLayoutGeometry* GetGeometry();
+    virtual double MarginsValue(const sal_uInt8& nWhichSide) override;
+    virtual double GetExtMarginsValue(const sal_uInt8& nWhichSide) override;
+    LwpLayoutGeometry* GetGeometry()
+    {
+        if (m_bGettingGeometry)
+            throw std::runtime_error("recursion in layout");
+        m_bGettingGeometry = true;
+        auto pRet = Geometry();
+        m_bGettingGeometry = false;
+        return pRet;
+    }
     double GetGeometryHeight();
     double GetGeometryWidth();
     LwpBorderStuff* GetBorderStuff();
@@ -290,15 +346,15 @@ public:
     enumXFTextDir GetTextDirection();
     XFBorders* GetXFBorders();
     LwpColor* GetBackColor();
-    virtual bool IsAutoGrow() SAL_OVERRIDE;
-    virtual bool IsAutoGrowUp() SAL_OVERRIDE;
-    virtual bool IsAutoGrowDown() SAL_OVERRIDE;
-    virtual bool IsAutoGrowLeft() SAL_OVERRIDE;
-    virtual bool IsAutoGrowRight() SAL_OVERRIDE;
-    virtual sal_uInt8 GetContentOrientation() SAL_OVERRIDE;
-    virtual bool HonorProtection() SAL_OVERRIDE;
-    virtual bool IsProtected() SAL_OVERRIDE;
-    virtual LwpVirtualLayout* GetWaterMarkLayout();
+    virtual bool IsAutoGrow() override;
+    virtual bool IsAutoGrowUp() override;
+    virtual bool IsAutoGrowDown() override;
+    virtual bool IsAutoGrowLeft() override;
+    virtual bool IsAutoGrowRight() override;
+    virtual sal_uInt8 GetContentOrientation() override;
+    virtual bool HonorProtection() override;
+    virtual bool IsProtected() override;
+    rtl::Reference<LwpVirtualLayout> GetWaterMarkLayout();
     XFBGImage* GetXFBGImage();
     virtual bool GetUsePrinterSettings();
 
@@ -327,7 +383,11 @@ public:
     //End by
 
 protected:
-    void Read() SAL_OVERRIDE;
+    void Read() override;
+    virtual bool MarginsSameAsParent() override;
+private:
+    LwpObjectID m_BasedOnStyle;
+    LwpLayoutGeometry* Geometry();
 protected:
     enum
     {
@@ -336,8 +396,7 @@ protected:
     };
 
     LwpObjectID m_Content;
-    LwpObjectID m_BasedOnStyle;
-
+    rtl::Reference<LwpObject> GetBasedOnStyle();
     LwpObjectID     m_TabPiece;
     LwpLayoutStyle* m_pStyleStuff;
     LwpLayoutMisc*  m_pMiscStuff;
@@ -347,6 +406,7 @@ protected:
     LwpObjectID     m_LayBorderStuff;
     LwpObjectID     m_LayBackgroundStuff;
     LwpObjectID     m_LayExtBorderStuff;
+    bool            m_bGettingGeometry;
 public:
     LwpObjectID& GetContent() { return m_Content; }
     LwpTabOverride* GetTabOverride();
@@ -394,7 +454,7 @@ public:
     virtual bool IsUseOnAllOddPages() SAL_OVERRIDE;
     virtual bool IsUseOnPage() SAL_OVERRIDE;
     LwpObjectID& GetPosition(){ return m_Positon;}
-    virtual LwpVirtualLayout* GetContainerLayout() SAL_OVERRIDE;
+    virtual rtl::Reference<LwpVirtualLayout> GetContainerLayout() override;
 };
 
 class LwpPlacableLayout : public LwpLayout
diff --git a/lotuswordpro/source/filter/lwpnotes.cxx b/lotuswordpro/source/filter/lwpnotes.cxx
index c78fb4f..e69deb7 100644
--- a/lotuswordpro/source/filter/lwpnotes.cxx
+++ b/lotuswordpro/source/filter/lwpnotes.cxx
@@ -92,7 +92,7 @@ void LwpFribNote::RegisterNewStyle()
         LwpFrib::RegisterStyle(m_pPara->GetFoundry());
         //register foonote style
         pLayout->SetFoundry(m_pPara->GetFoundry());
-        pLayout->RegisterStyle();
+        pLayout->DoRegisterStyle();
     }
 }
 
@@ -101,7 +101,7 @@ void LwpFribNote::RegisterNewStyle()
  */
 void LwpFribNote::XFConvert(XFContentContainer* pCont)
 {
-    LwpNoteLayout* pLayout =static_cast<LwpNoteLayout*>(m_Layout.obj().get());
+    LwpNoteLayout* pLayout = dynamic_cast<LwpNoteLayout*>(m_Layout.obj().get());
     if(pLayout)
     {
         XFAnnotation* pXFNote = new XFAnnotation;
@@ -172,7 +172,7 @@ void LwpNoteLayout::RegisterStyle()
     if(pTextLayout)
     {
         pTextLayout->SetFoundry(GetFoundry());
-        pTextLayout->RegisterStyle();
+        pTextLayout->DoRegisterStyle();
     }
 }
 
@@ -217,10 +217,10 @@ OUString LwpNoteLayout::GetAuthor()
     LwpNoteHeaderLayout* pTextLayout = static_cast<LwpNoteHeaderLayout*>(FindChildByType(LWP_NOTEHEADER_LAYOUT));
     if(pTextLayout)
     {
-        LwpStory* pStory = static_cast<LwpStory*>(pTextLayout->GetContent().obj().get());
+        LwpStory* pStory = dynamic_cast<LwpStory*>(pTextLayout->GetContent().obj().get());
         if(pStory)
         {
-            LwpPara* pFirst = static_cast<LwpPara*>(pStory->GetFirstPara().obj().get());
+            LwpPara* pFirst = dynamic_cast<LwpPara*>(pStory->GetFirstPara().obj().get());
             if(pFirst)
                 return pFirst->GetContentText(true);
         }
@@ -284,7 +284,7 @@ void LwpNoteTextLayout::RegisterStyle()
     if(pContent.is())
     {
         pContent->SetFoundry(GetFoundry());
-        pContent->RegisterStyle();
+        pContent->DoRegisterStyle();
     }
 }
 
diff --git a/lotuswordpro/source/filter/lwpobj.cxx b/lotuswordpro/source/filter/lwpobj.cxx
index 7e15b62..9dcb586 100644
--- a/lotuswordpro/source/filter/lwpobj.cxx
+++ b/lotuswordpro/source/filter/lwpobj.cxx
@@ -64,7 +64,8 @@
  * @descr  construct lwpobject from stream
  */
 LwpObject::LwpObject(LwpObjectHeader objHdr, LwpSvStream* pStrm)
-    : m_ObjHdr(objHdr), m_pObjStrm(NULL), m_pFoundry(NULL), m_pStrm(pStrm)
+    : m_ObjHdr(objHdr), m_pObjStrm(NULL), m_pFoundry(NULL)
+    , m_pStrm(pStrm), m_bRegisteringStyle(false), m_bParsingStyle(false)
 {
     m_pObjStrm = new LwpObjectStream(pStrm, m_ObjHdr.IsCompressed(),
             static_cast<sal_uInt16>(m_ObjHdr.GetSize()) );
diff --git a/lotuswordpro/source/filter/lwpobj.hxx b/lotuswordpro/source/filter/lwpobj.hxx
index 942e044..978bc49 100644
--- a/lotuswordpro/source/filter/lwpobj.hxx
+++ b/lotuswordpro/source/filter/lwpobj.hxx
@@ -67,6 +67,8 @@
 
 #include <sal/config.h>
 
+#include <stdexcept>
+
 #include <salhelper/simplereferenceobject.hxx>
 
 #include "lwpheader.hxx"
@@ -92,12 +94,35 @@ protected:
     LwpObjectStream* m_pObjStrm;
     LwpFoundry* m_pFoundry;
     LwpSvStream* m_pStrm;
+    bool m_bRegisteringStyle;
+    bool m_bParsingStyle;
 protected:
     virtual void Read();
-public:
-    void QuickRead();
     virtual void RegisterStyle();
     virtual void Parse(IXFStream* pOutputStream);
+public:
+    void QuickRead();
+    //calls RegisterStyle but bails if DoRegisterStyle is called
+    //on the same object recursively
+    void DoRegisterStyle()
+    {
+        if (m_bRegisteringStyle)
+            throw std::runtime_error("recursion in styles");
+        m_bRegisteringStyle = true;
+        RegisterStyle();
+        m_bRegisteringStyle = false;
+    }
+    //calls Parse but bails if DoParse is called
+    //on the same object recursively
+    void DoParse(IXFStream* pOutputStream)
+    {
+        if (m_bParsingStyle)
+            throw std::runtime_error("recursion in parsing");
+        m_bParsingStyle = true;
+        Parse(pOutputStream);
+        m_bParsingStyle = false;
+    }
+
     virtual void XFConvert(XFContentContainer* pCont);
 
     LwpFoundry* GetFoundry(){return m_pFoundry;}
diff --git a/lotuswordpro/source/filter/lwpobjfactory.cxx b/lotuswordpro/source/filter/lwpobjfactory.cxx
index 13635c5..8071d3e 100644
--- a/lotuswordpro/source/filter/lwpobjfactory.cxx
+++ b/lotuswordpro/source/filter/lwpobjfactory.cxx
@@ -135,7 +135,7 @@ rtl::Reference<LwpObject> LwpObjectFactory::CreateObject(sal_uInt32 type, LwpObj
 {
     rtl::Reference<LwpObject> newObj;
     m_nNumObjs++;
-    assert(type<300);
+    SAL_WARN_IF(type>=300, "lwp", "invalid type: " << type);
     switch(type)
     {
         case VO_DOCUMENT:
@@ -666,15 +666,19 @@ rtl::Reference<LwpObject> LwpObjectFactory::CreateObject(sal_uInt32 type, LwpObj
         default:
         {
             //Unknown object type
-            assert(false);
             newObj = NULL;
             break;
         }
     }
-    if(newObj.is())
+    if (newObj.is())
     {
         newObj->QuickRead();
-        m_IdToObjList.insert(LwpIdToObjMap::value_type(objHdr.GetID(), newObj));
+        auto result = m_IdToObjList.insert(LwpIdToObjMap::value_type(objHdr.GetID(), newObj));
+        if (!result.second)
+        {
+            SAL_WARN("lwp", "clearing duplicate object");
+            newObj.clear();
+        }
     }
 
     return(newObj);
@@ -707,7 +711,12 @@ rtl::Reference<LwpObject> LwpObjectFactory::QueryObject(const LwpObjectID &objID
             return NULL;
         }
 
+        if (std::find(m_aObjsIDInCreation.begin(), m_aObjsIDInCreation.end(), objID) != m_aObjsIDInCreation.end())
+            throw std::runtime_error("recursion in object creation");
+
+        m_aObjsIDInCreation.push_back(objID);
         obj = CreateObject(objHdr.GetTag(), objHdr);
+        m_aObjsIDInCreation.pop_back();
     }
     return obj;
 }
diff --git a/lotuswordpro/source/filter/lwpobjfactory.hxx b/lotuswordpro/source/filter/lwpobjfactory.hxx
index 1819db38..98e6aa6 100644
--- a/lotuswordpro/source/filter/lwpobjfactory.hxx
+++ b/lotuswordpro/source/filter/lwpobjfactory.hxx
@@ -75,6 +75,9 @@
 #include "lwpobjhdr.hxx"
 #include "lwpidxmgr.hxx"
 
+#include <unordered_map>
+#include <vector>
+
 /**
  * @brief   object factory used for lwp object creation and maintenance
 */
@@ -88,9 +91,9 @@ public:
 
 //For object Factory and object manager
 private:
-//  static LwpObjectFactory *m_pMgr;
     sal_uInt32 m_nNumObjs;
     LwpSvStream* m_pSvStream;
+    std::vector<LwpObjectID> m_aObjsIDInCreation;
     struct hashFunc
     {
             size_t operator()( const LwpObjectID& rName ) const
diff --git a/lotuswordpro/source/filter/lwpobjid.cxx b/lotuswordpro/source/filter/lwpobjid.cxx
index 0c64f91..3729696 100644
--- a/lotuswordpro/source/filter/lwpobjid.cxx
+++ b/lotuswordpro/source/filter/lwpobjid.cxx
@@ -194,12 +194,12 @@ sal_uInt32 LwpObjectID::DiskSize() const
 */
 rtl::Reference<LwpObject> LwpObjectID::obj(VO_TYPE tag) const
 {
-    LwpGlobalMgr* pGlobal = LwpGlobalMgr::GetInstance();
-    LwpObjectFactory* pObjMgr = pGlobal->GetLwpObjFactory();
-    if(IsNull())
+    if (IsNull())
     {
         return NULL;
     }
+    LwpGlobalMgr* pGlobal = LwpGlobalMgr::GetInstance();
+    LwpObjectFactory* pObjMgr = pGlobal->GetLwpObjFactory();
     rtl::Reference<LwpObject> pObj = pObjMgr->QueryObject(*this);
     if( tag!=VO_INVALID &&  (pObj.is()) )
     {
diff --git a/lotuswordpro/source/filter/lwpobjid.hxx b/lotuswordpro/source/filter/lwpobjid.hxx
index bb0f29f..088d7ca 100644
--- a/lotuswordpro/source/filter/lwpobjid.hxx
+++ b/lotuswordpro/source/filter/lwpobjid.hxx
@@ -147,16 +147,8 @@ inline void LwpObjectID::SetHigh(sal_uInt16 nh)
 }
 inline size_t LwpObjectID::HashCode() const
 {
-    OUString str;
-    if(m_nIndex)
-    {
-        str = OUString(m_nIndex) + OUString(m_nHigh);
-    }
-    else
-    {
-        str = OUString(m_nLow) + OUString(m_nHigh);
-    }
-    return str.hashCode();
+    return static_cast<size_t>(
+        (m_nIndex == 0 ? 23 * m_nLow : 27 * m_nIndex) + 29 * m_nHigh);
 }
 
 #endif
diff --git a/lotuswordpro/source/filter/lwpobjstrm.cxx b/lotuswordpro/source/filter/lwpobjstrm.cxx
index 8eb8d43..2836fad 100644
--- a/lotuswordpro/source/filter/lwpobjstrm.cxx
+++ b/lotuswordpro/source/filter/lwpobjstrm.cxx
@@ -170,7 +170,7 @@ sal_uInt16 LwpObjectStream::QuickRead(void* buf, sal_uInt16 len)
     memset(buf, 0, len);
     if( len > m_nBufSize - m_nReadPos )
     {
-        assert(false);
+        SAL_WARN("lwp", "read request longer than buffer");
         len = m_nBufSize - m_nReadPos;
     }
     if( m_pContentBuf && len)
diff --git a/lotuswordpro/source/filter/lwpoleobject.cxx b/lotuswordpro/source/filter/lwpoleobject.cxx
index 4afb030..ce23af8 100644
--- a/lotuswordpro/source/filter/lwpoleobject.cxx
+++ b/lotuswordpro/source/filter/lwpoleobject.cxx
@@ -116,10 +116,10 @@ void LwpGraphicOleObject::GetGrafScaledSize(double & fWidth, double & fHeight)
     double fSclGrafWidth = fWidth;//LwpTools::ConvertFromUnitsToMetric(pMyScale->GetScaleWidth());
     double fSclGrafHeight = fHeight;//LwpTools::ConvertFromUnitsToMetric(pMyScale->GetScaleHeight());
 
-    LwpVirtualLayout* pLayout = GetLayout(NULL);
-    if (pLayout && pLayout->IsFrame())
+    rtl::Reference<LwpVirtualLayout> xLayout(GetLayout(nullptr));
+    if (xLayout.is() && xLayout->IsFrame())
     {
-        LwpFrameLayout* pMyFrameLayout = static_cast<LwpFrameLayout*>(pLayout);
+        LwpFrameLayout* pMyFrameLayout = static_cast<LwpFrameLayout*>(xLayout.get());
         LwpLayoutScale* pMyScale = pMyFrameLayout->GetLayoutScale();
         LwpLayoutGeometry* pFrameGeo = pMyFrameLayout->GetGeometry();
 
diff --git a/lotuswordpro/source/filter/lwppagelayout.cxx b/lotuswordpro/source/filter/lwppagelayout.cxx
index ad75b88..b3f9d02 100644
--- a/lotuswordpro/source/filter/lwppagelayout.cxx
+++ b/lotuswordpro/source/filter/lwppagelayout.cxx
@@ -127,7 +127,7 @@ void LwpPageLayout::Parse(IXFStream* pOutputStream)
     if(pStory.is())
     {
         pStory->SetFoundry(m_pFoundry);
-        pStory->Parse(pOutputStream);   //Do not parse the next story
+        pStory->DoParse(pOutputStream);   //Do not parse the next story
     }
 }
 
@@ -225,7 +225,7 @@ void LwpPageLayout::ParseShadow(XFPageMaster *pm1)
 */
 void LwpPageLayout::ParsePatternFill(XFPageMaster* pm1)
 {
-    XFBGImage* pXFBGImage = this->GetFillPattern();
+    XFBGImage* pXFBGImage = GetFillPattern();
     if (pXFBGImage)
     {
         pm1->SetBackImage(pXFBGImage);
@@ -237,7 +237,7 @@ void LwpPageLayout::ParsePatternFill(XFPageMaster* pm1)
 */
 void LwpPageLayout::ParseBackGround(XFPageMaster* pm1)
 {
-    if (this->IsPatternFill())
+    if (IsPatternFill())
     {
         ParsePatternFill(pm1);
     }
@@ -267,8 +267,8 @@ void LwpPageLayout::ParseBackColor(XFPageMaster* pm1)
 void LwpPageLayout::ParseFootNoteSeparator(XFPageMaster * pm1)
 {
     //Get the footnoteoptions for the root document
-    LwpDocument* pDocument = m_pFoundry->GetDocument();
-    if(pDocument)
+    LwpDocument* pDocument = m_pFoundry ? m_pFoundry->GetDocument() : nullptr;
+    if (pDocument)
     {
         LwpObjectID* pFontnodeId = pDocument->GetValidFootnoteOpts();
 
@@ -506,24 +506,24 @@ void LwpPageLayout::ResetXFColumns()
 
 LwpHeaderLayout* LwpPageLayout::GetHeaderLayout()
 {
-    LwpVirtualLayout* pLay = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-    while(pLay)
+    rtl::Reference<LwpVirtualLayout> xLay(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+    while (xLay.is())
     {
-        if( pLay->GetLayoutType() == LWP_HEADER_LAYOUT )
-            return ( static_cast<LwpHeaderLayout*> (pLay) );
-        pLay = dynamic_cast<LwpVirtualLayout*> (pLay->GetNext().obj().get());
+        if (xLay->GetLayoutType() == LWP_HEADER_LAYOUT)
+            return dynamic_cast<LwpHeaderLayout*>(xLay.get());
+        xLay.set(dynamic_cast<LwpVirtualLayout*>(xLay->GetNext().obj().get()));
     }
     return NULL;
 }
 
 LwpFooterLayout* LwpPageLayout::GetFooterLayout()
 {
-    LwpVirtualLayout* pLay = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-    while(pLay)
+    rtl::Reference<LwpVirtualLayout> xLay(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+    while (xLay.is())
     {
-        if( pLay->GetLayoutType() == LWP_FOOTER_LAYOUT )
-            return ( static_cast<LwpFooterLayout*> (pLay) );
-        pLay = dynamic_cast<LwpVirtualLayout*> (pLay->GetNext().obj().get());
+        if (xLay->GetLayoutType() == LWP_FOOTER_LAYOUT)
+            return dynamic_cast<LwpFooterLayout*>(xLay.get());
+        xLay.set(dynamic_cast<LwpVirtualLayout*>(xLay->GetNext().obj().get()));
     }
     return NULL;
 }
@@ -536,19 +536,19 @@ LwpPageLayout* LwpPageLayout::GetOddChildLayout()
 {
     if(IsComplex())
     {
-        LwpVirtualLayout* pLay = dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get());
-        while(pLay)
+        rtl::Reference<LwpVirtualLayout> xLay(dynamic_cast<LwpVirtualLayout*>(GetChildHead().obj().get()));
+        while (xLay.is())
         {
-            if( pLay->GetLayoutType() == LWP_PAGE_LAYOUT )
+            if (xLay->GetLayoutType() == LWP_PAGE_LAYOUT)
             {
-                LwpPageLayout* pPageLayout = static_cast<LwpPageLayout*> (pLay);
+                LwpPageLayout* pPageLayout = static_cast<LwpPageLayout*>(xLay.get());
                 LwpUseWhen* pUseWhen = pPageLayout->GetUseWhen();
                 if(pUseWhen && pUseWhen->IsUseOnAllOddPages())
                 {
                     return pPageLayout;
                 }
             }
-            pLay = dynamic_cast<LwpVirtualLayout*> (pLay->GetNext().obj().get());
+            xLay.set(dynamic_cast<LwpVirtualLayout*>(xLay->GetNext().obj().get()));
         }
     }
     return NULL;
@@ -578,7 +578,9 @@ double LwpPageLayout::GetMarginWidth()
 sal_Int32 LwpPageLayout::GetPageNumber(sal_uInt16 nLayoutNumber)
 {
     sal_Int16 nPageNumber = -1;
-    LwpFoundry* pFoundry = this->GetFoundry();
+    LwpFoundry* pFoundry = GetFoundry();
+    if (!pFoundry)
+        return nPageNumber;
     LwpDocument* pDoc = pFoundry->GetDocument();
     LwpDLVListHeadTailHolder* pHeadTail = dynamic_cast<LwpDLVListHeadTailHolder*>(pDoc->GetPageHintsID().obj().get());
     if(!pHeadTail) return nPageNumber;
@@ -587,7 +589,7 @@ sal_Int32 LwpPageLayout::GetPageNumber(sal_uInt16 nLayoutNumber)
     LwpPageHint* pPageHint = dynamic_cast<LwpPageHint*>(pHeadTail->GetHead().obj().get());
     while(pPageHint)
     {
-        if(this->GetObjectID() == pPageHint->GetPageLayoutID())
+        if(GetObjectID() == pPageHint->GetPageLayoutID())
         {
             sal_uInt16 nNumber = pPageHint->GetPageNumber();
             if(nLayoutNumber==FIRST_LAYOUTPAGENO && pPageHint->GetLayoutPageNumber()==1)
@@ -831,7 +833,7 @@ void LwpHeaderLayout::ParseShadow(XFHeaderStyle* pHeaderStyle)
 */
 void LwpHeaderLayout::ParsePatternFill(XFHeaderStyle* pHeaderStyle)
 {
-    XFBGImage* pXFBGImage = this->GetFillPattern();
+    XFBGImage* pXFBGImage = GetFillPattern();
     if (pXFBGImage)
     {
         pHeaderStyle->SetBackImage(pXFBGImage);
@@ -843,7 +845,7 @@ void LwpHeaderLayout::ParsePatternFill(XFHeaderStyle* pHeaderStyle)
 */
 void LwpHeaderLayout::ParseBackGround(XFHeaderStyle* pHeaderStyle)
 {
-    if (this->IsPatternFill())
+    if (IsPatternFill())
     {
         ParsePatternFill(pHeaderStyle);
     }
@@ -884,7 +886,7 @@ void LwpHeaderLayout::RegisterStyle(XFMasterPage* mp1)
 
         //Call the RegisterStyle first to register the styles in header paras, and then XFConvert()
         pStory->SetFoundry(m_pFoundry);
-        pStory->RegisterStyle();
+        pStory->DoRegisterStyle();
         //, 06/27/2005
         //register child layout style for framelayout,
         RegisterChildStyle();
@@ -994,7 +996,7 @@ void LwpFooterLayout::ParseShadow(XFFooterStyle* pFooterStyle)
 */
 void LwpFooterLayout::ParsePatternFill(XFFooterStyle* pFooterStyle)
 {
-    XFBGImage* pXFBGImage = this->GetFillPattern();
+    XFBGImage* pXFBGImage = GetFillPattern();
     if (pXFBGImage)
     {
         pFooterStyle->SetBackImage(pXFBGImage);
@@ -1006,7 +1008,7 @@ void LwpFooterLayout::ParsePatternFill(XFFooterStyle* pFooterStyle)
 */
 void LwpFooterLayout::ParseBackGround(XFFooterStyle* pFooterStyle)
 {
-    if (this->IsPatternFill())
+    if (IsPatternFill())
     {
         ParsePatternFill(pFooterStyle);
     }
@@ -1037,8 +1039,7 @@ void LwpFooterLayout::RegisterStyle(XFMasterPage* mp1)
         pChangeMgr->SetHeadFootFribMap(true);
 
         pStory->SetFoundry(m_pFoundry);
-        pStory->RegisterStyle();
-        //, 06/27/2005
+        pStory->DoRegisterStyle();
         //register child layout style for framelayout,
         RegisterChildStyle();
         //End
diff --git a/lotuswordpro/source/filter/lwppara.cxx b/lotuswordpro/source/filter/lwppara.cxx
index 0f6f8bc..3c82d3d 100644
--- a/lotuswordpro/source/filter/lwppara.cxx
+++ b/lotuswordpro/source/filter/lwppara.cxx
@@ -253,6 +253,8 @@ void LwpPara::Parse(IXFStream* pOutputStream)
 {
     m_pXFContainer = new XFContentContainer;
     XFConvert(m_pXFContainer);
+    if (!m_pXFContainer)
+        return;
     m_pXFContainer->ToXml(pOutputStream);
     m_pXFContainer->Reset();
     delete m_pXFContainer;
@@ -277,6 +279,7 @@ void LwpPara::XFConvert(XFContentContainer* pCont)
 
     //Create an XFPara for this VO_PARA
     XFParagraph *pPara = new XFParagraph;
+    rtl::Reference<XFContentContainer> xHolder(pPara);
     pPara->SetStyleName(m_StyleName);
 
     if(!m_SectionStyleName.isEmpty())
@@ -288,7 +291,7 @@ void LwpPara::XFConvert(XFContentContainer* pCont)
         m_pXFContainer = pSection;
     }
 
-    if (m_bHasBullet &&  m_pSilverBullet)
+    if (m_bHasBullet && m_pSilverBullet)
     {
         XFContentContainer* pListItem = AddBulletList(m_pXFContainer);
         if (pListItem)
@@ -296,9 +299,9 @@ void LwpPara::XFConvert(XFContentContainer* pCont)
             pListItem->Add(pPara);
         }
     }
-    else
+    else if (m_pXFContainer)
     {
-        LwpBulletStyleMgr* pBulletStyleMgr = this->GetBulletStyleMgr();
+        LwpBulletStyleMgr* pBulletStyleMgr = GetBulletStyleMgr();
         if (pBulletStyleMgr)
         {
             pBulletStyleMgr->SetCurrentSilverBullet(LwpObjectID());
@@ -310,7 +313,7 @@ void LwpPara::XFConvert(XFContentContainer* pCont)
     m_Fribs.SetXFPara(pPara);
     m_Fribs.XFConvert();
 
-    if (m_pBreaks)
+    if (m_pBreaks && m_pXFContainer)
         AddBreakAfter(m_pXFContainer);
 }
 
@@ -353,13 +356,14 @@ void LwpPara::RegisterStyle()
   //2 reg para style
     if (!m_pFoundry)
         return;
-    XFParaStyle* pBaseStyle = static_cast<XFParaStyle*>(m_pFoundry->GetStyleManager()->GetStyle(m_ParaStyle));
-    if (pBaseStyle == NULL) return;
+    XFParaStyle* pBaseStyle = dynamic_cast<XFParaStyle*>(m_pFoundry->GetStyleManager()->GetStyle(m_ParaStyle));
+    if (pBaseStyle == nullptr) return;
     m_StyleName = pBaseStyle->GetStyleName();//such intf to be added
     m_ParentStyleName = m_StyleName;
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
 
-    if (GetParaStyle()->GetIndent())
+    LwpParaStyle* pParaStyle = GetParaStyle();
+    if (pParaStyle && pParaStyle->GetIndent())
     {
         std::unique_ptr<LwpIndentOverride> pIndentOverride(GetParaStyle()->GetIndent()->clone());
         delete m_pIndentOverride;
@@ -386,45 +390,52 @@ void LwpPara::RegisterStyle()
             {
             case PP_LOCAL_ALIGN:
             {
-                if (!rParaStyle.GetAlignment())
-                    OverrideAlignment(NULL,static_cast<LwpParaAlignProperty*>(pProps)->GetAlignment(),pOverStyle);
-                else
+                LwpAlignmentOverride *pAlignment = static_cast<LwpParaAlignProperty*>(pProps)->GetAlignment();
+                if (pAlignment)
                 {
-                    boost::scoped_ptr<LwpAlignmentOverride> const pAlign(
-                            rParaStyle.GetAlignment()->clone());
-                    OverrideAlignment(pAlign.get(),
-                            static_cast<LwpParaAlignProperty*>(pProps)->GetAlignment(),
-                            pOverStyle);
+                    if (!rParaStyle.GetAlignment())
+                        OverrideAlignment(nullptr, pAlignment, pOverStyle);
+                    else
+                    {
+                        boost::scoped_ptr<LwpAlignmentOverride> const pAlign(
+                                rParaStyle.GetAlignment()->clone());
+                        OverrideAlignment(pAlign.get(),
+                                pAlignment,
+                                pOverStyle);
+                    }
                 }
-            }
                 break;
+            }
             case PP_LOCAL_INDENT:
             {
                 noIndent = false;
-                if (!rParaStyle.GetIndent())
-                    OverrideIndent(NULL,static_cast<LwpParaIndentProperty*>(pProps)->GetIndent(),pOverStyle);
-
-                else
+                LwpIndentOverride *pIndent = static_cast<LwpParaIndentProperty*>(pProps)->GetIndent();
+                if (pIndent)
                 {
-                    OverrideIndent(m_pIndentOverride,static_cast<LwpParaIndentProperty*>(pProps)->GetIndent(),pOverStyle);
+                    if (!rParaStyle.GetIndent())
+                        OverrideIndent(nullptr, pIndent, pOverStyle);
+                    else
+                        OverrideIndent(m_pIndentOverride, pIndent, pOverStyle);
                 }
-            }
                 break;
+            }
             case PP_LOCAL_SPACING:
             {
                 noSpacing = false;
-                if (!rParaStyle.GetSpacing())
-                    OverrideSpacing(NULL,static_cast<LwpParaSpacingProperty*>(pProps)->GetSpacing(),pOverStyle);
-                else
+                LwpSpacingOverride *pSpacing = static_cast<LwpParaSpacingProperty*>(pProps)->GetSpacing();
+                if (pSpacing)
                 {
-                    boost::scoped_ptr<LwpSpacingOverride> const
-                        pSpacing(rParaStyle.GetSpacing()->clone());
-                    OverrideSpacing(pSpacing.get(),
-                            static_cast<LwpParaSpacingProperty*>(pProps)->GetSpacing(),
-                            pOverStyle);
+                    if (!rParaStyle.GetSpacing())
+                        OverrideSpacing(nullptr, pSpacing, pOverStyle);
+                    else
+                    {
+                        boost::scoped_ptr<LwpSpacingOverride> const
+                            pNewSpacing(rParaStyle.GetSpacing()->clone());
+                        OverrideSpacing(pNewSpacing.get(), pSpacing, pOverStyle);
+                    }
                 }
-            }
                 break;
+            }
             case PP_LOCAL_BORDER:
             {
                 OverrideParaBorder(pProps, pOverStyle);
@@ -553,7 +564,7 @@ void LwpPara::RegisterStyle()
 
     //add by
     //register bullet style
-    LwpBulletStyleMgr* pBulletStyleMgr = this->GetBulletStyleMgr();
+    LwpBulletStyleMgr* pBulletStyleMgr = GetBulletStyleMgr();
     if (pBulletStyleMgr)
     {
         // if has bullet or numbering
@@ -575,11 +586,9 @@ void LwpPara::RegisterStyle()
                 if (m_pSilverBullet->IsBulletOrdered())
                 {
                     OUString aPreBullStyleName;
-                    LwpNumberingOverride* pNumbering = this->GetParaNumbering();
+                    LwpNumberingOverride* pNumbering = GetParaNumbering();
                     sal_uInt16 nPosition = pNumbering->GetPosition();
                     bool bLesser = m_pSilverBullet->IsLesserLevel(nPosition);
-                    /*sal_Bool bResetSection =*/ m_pSilverBullet->IsNewSection(nPosition);
-                    bool bHeading;
                     LwpPara* pPara = this;
                     LwpPara* pPrePara = NULL;
                     LwpSilverBullet* pParaSilverBullet = NULL;
@@ -590,7 +599,7 @@ void LwpPara::RegisterStyle()
                     {
                         nFoundBound++;
                     }
-                    bHeading = pNumbering->IsHeading();
+                    bool bHeading = pNumbering->IsHeading();
 
                     while(true)
                     {
@@ -605,7 +614,7 @@ void LwpPara::RegisterStyle()
                         pParaSilverBullet = pPara->GetSilverBullet();
                         pNumbering = pPara->GetParaNumbering();
 
-                        if (pPara->GetObjectID() != this->GetObjectID())
+                        if (pPara->GetObjectID() != GetObjectID())
                         {
                             if (!pParaSilverBullet)
                             {
@@ -695,7 +704,7 @@ void LwpPara::RegisterStyle()
                         if (!pPrePara)
                         {
                             LwpStory* pStory = pPara->GetStory();
-                            pPrePara = pStory->GetLastParaOfPreviousStory();
+                            pPrePara = pStory ? pStory->GetLastParaOfPreviousStory() : nullptr;
 
                             if (!pPrePara)
                             {
@@ -714,7 +723,7 @@ void LwpPara::RegisterStyle()
                     else
                     {
                         m_bBullContinue = false;
-                        if (this->IsInCell())
+                        if (IsInCell())
                         {
                             XFListStyle* pOldStyle = static_cast<XFListStyle*>(pXFStyleManager->FindStyle(m_aBulletStyleName));
                             if (pOldStyle)
@@ -725,7 +734,7 @@ void LwpPara::RegisterStyle()
                         }
                     }
 
-                    LwpStory* pMyStory = this->GetStory();
+                    LwpStory* pMyStory = GetStory();
                     if (pMyStory)
                     {
                         if (pMyStory->IsBullStyleUsedBefore(m_aBulletStyleName, m_pParaNumbering->GetPosition()))
@@ -763,13 +772,13 @@ void LwpPara::RegisterStyle()
     //register tab style
     if(m_Fribs.HasFrib(FRIB_TAG_TAB))
     {
-        XFParaStyle* pParaStyle = new XFParaStyle;
-        *pParaStyle = *GetXFParaStyle();
+        XFParaStyle* pNewParaStyle = new XFParaStyle;
+        *pNewParaStyle = *GetXFParaStyle();
         //pOverStyle->SetStyleName("");
-        this->RegisterTabStyle(pParaStyle);
+        RegisterTabStyle(pNewParaStyle);
         if (!m_ParentStyleName.isEmpty())
-                    pParaStyle->SetParentStyleName(m_ParentStyleName);
-        m_StyleName = pXFStyleManager->AddStyle(pParaStyle).m_pStyle->GetStyleName();
+                    pNewParaStyle->SetParentStyleName(m_ParentStyleName);
+        m_StyleName = pXFStyleManager->AddStyle(pNewParaStyle).m_pStyle->GetStyleName();
     }
 
     //register master page;
@@ -874,7 +883,7 @@ void LwpPara::ParseDropcapContent()
  */
 void LwpPara::AddBreakBefore(XFContentContainer* pCont)
 {
-    if (!m_pBreaks)
+    if (!m_pBreaks || !pCont)
         return;
     if (m_pBreaks->IsPageBreakBefore())
     {
diff --git a/lotuswordpro/source/filter/lwppara.hxx b/lotuswordpro/source/filter/lwppara.hxx
index eaf8c15..ddeb4f9 100644
--- a/lotuswordpro/source/filter/lwppara.hxx
+++ b/lotuswordpro/source/filter/lwppara.hxx
@@ -346,6 +346,8 @@ inline OUString LwpPara::GetBulletStyleName() const
 }
 inline void LwpPara::AddXFContent(XFContent* pCont)
 {
+    if (!m_pXFContainer)
+        throw std::runtime_error("paragraph lacks container");
     m_pXFContainer->Add(pCont);
 }
 inline void LwpPara::SetXFContainer(XFContentContainer* pCont)
diff --git a/lotuswordpro/source/filter/lwppara1.cxx b/lotuswordpro/source/filter/lwppara1.cxx
index bba1506..059b28e 100644
--- a/lotuswordpro/source/filter/lwppara1.cxx
+++ b/lotuswordpro/source/filter/lwppara1.cxx
@@ -224,7 +224,7 @@ void LwpPara::GetParaNumber(sal_uInt16 nPosition, ParaNumbering* pParaNumbering)
                     if (pPreFrib)
                     {
                         if ((pPreFrib->GetType() == FRIB_TAG_TEXT) &&
-                            (pPreFrib->GetModifiers()->aTxtAttrOverride.GetHideLevels() == nHideLevels))
+                            (pPreFrib->GetModifiers() && pPreFrib->GetModifiers()->aTxtAttrOverride.GetHideLevels() == nHideLevels))
                         {
                             pParaNumbering->pPrefix = static_cast<LwpFribText*>(pPreFrib);
                         }
@@ -241,7 +241,7 @@ void LwpPara::GetParaNumber(sal_uInt16 nPosition, ParaNumbering* pParaNumbering)
                         {
                             if (
                                  (pFrib->GetNext() && pFrib->GetNext()->GetType() == FRIB_TAG_TEXT) ||
-                                 (pFrib->GetModifiers()->aTxtAttrOverride.GetHideLevels() == nHideLevels)
+                                 (pFrib->GetModifiers() && pFrib->GetModifiers()->aTxtAttrOverride.GetHideLevels() == nHideLevels)
                                )
                             {
                                 pParaNumbering->pSuffix = static_cast<LwpFribText*>(pFrib);
@@ -347,7 +347,7 @@ LwpParaStyle* LwpPara::GetParaStyle()
 void LwpPara::OverrideParaBorder(LwpParaProperty* pProps, XFParaStyle* pOverStyle)
 {
     // get paraborder in parastyle
-    LwpParaStyle* pParaStyle = this->GetParaStyle();
+    LwpParaStyle* pParaStyle = GetParaStyle();
     if (!pParaStyle)
     {
         return;
@@ -379,7 +379,7 @@ void LwpPara::OverrideParaBorder(LwpParaProperty* pProps, XFParaStyle* pOverStyl
 void LwpPara::OverrideParaBreaks(LwpParaProperty* pProps, XFParaStyle* pOverStyle)
 {
     // get breaks in parastyle
-    LwpParaStyle* pParaStyle = this->GetParaStyle();
+    LwpParaStyle* pParaStyle = GetParaStyle();
     if (!pParaStyle)
     {
         return;
@@ -445,7 +445,7 @@ void LwpPara::OverrideParaBreaks(LwpParaProperty* pProps, XFParaStyle* pOverStyl
 void LwpPara::OverrideParaBullet(LwpParaProperty* pProps)
 {
     // get bulletoverride in parastyle
-    LwpParaStyle* pParaStyle = this->GetParaStyle();
+    LwpParaStyle* pParaStyle = GetParaStyle();
     if (!pParaStyle)
     {
         return;
@@ -522,7 +522,7 @@ void LwpPara::OverrideParaBullet(LwpParaProperty* pProps)
 void LwpPara::OverrideParaNumbering(LwpParaProperty* pProps)
 {
     // get numbering override in parastyle
-    LwpParaStyle* pParaStyle = this->GetParaStyle();
+    LwpParaStyle* pParaStyle = GetParaStyle();
     if (!pParaStyle)
     {
         return;
@@ -628,8 +628,10 @@ bool LwpPara::ComparePagePosition(LwpVirtualLayout * pPreLayout, LwpVirtualLayou
 bool LwpPara::IsInCell()
 {
     LwpStory *pStory = GetStory();
-    LwpVirtualLayout* pLayout = pStory ? pStory->GetLayout(NULL) : NULL;
-    if(pLayout && pLayout->IsCell())
+    if (!pStory)
+        return false;
+    rtl::Reference<LwpVirtualLayout> xLayout(pStory->GetLayout(nullptr));
+    if (xLayout.is() && xLayout->IsCell())
         return true;
     return false;
 }
diff --git a/lotuswordpro/source/filter/lwpparaproperty.cxx b/lotuswordpro/source/filter/lwpparaproperty.cxx
index 9c8be79..fd99f47 100644
--- a/lotuswordpro/source/filter/lwpparaproperty.cxx
+++ b/lotuswordpro/source/filter/lwpparaproperty.cxx
@@ -146,8 +146,8 @@ LwpParaAlignProperty::LwpParaAlignProperty(LwpObjectStream* pFile)
     LwpObjectID align;
     align.ReadIndexed(pFile);
 
-    LwpAlignmentPiece *pAlignmentPiece = dynamic_cast<LwpAlignmentPiece*>(align.obj(VO_ALIGNMENTPIECE).get());
-    m_pAlignment = pAlignmentPiece ? dynamic_cast<LwpAlignmentOverride*>(pAlignmentPiece->GetOverride()) : NULL;
+    rtl::Reference<LwpAlignmentPiece> xAlignmentPiece(dynamic_cast<LwpAlignmentPiece*>(align.obj(VO_ALIGNMENTPIECE).get()));
+    m_pAlignment = xAlignmentPiece.is() ? dynamic_cast<LwpAlignmentOverride*>(xAlignmentPiece->GetOverride()) : nullptr;
 
 }
 
diff --git a/lotuswordpro/source/filter/lwpparastyle.cxx b/lotuswordpro/source/filter/lwpparastyle.cxx
index 244189f..89b622f 100644
--- a/lotuswordpro/source/filter/lwpparastyle.cxx
+++ b/lotuswordpro/source/filter/lwpparastyle.cxx
@@ -158,8 +158,6 @@ void LwpParaStyle::Read()
 void LwpParaStyle::Apply(XFParaStyle *pParaStyle)
 {
     assert(pParaStyle);
-    if (!pParaStyle)
-        return;
 
     LwpVirtualPiece *pPiece = NULL;
     //alignment:
@@ -681,6 +679,9 @@ void LwpParaStyle::ApplyTab(XFParaStyle *pParaStyle, LwpTabOverride *pTabOverRid
 
 void LwpParaStyle::RegisterStyle()
 {
+    if (!m_pFoundry)
+        throw std::runtime_error("missing Foundry");
+
     XFParaStyle* pStyle = new XFParaStyle();
 
     //Set name
diff --git a/lotuswordpro/source/filter/lwpproplist.cxx b/lotuswordpro/source/filter/lwpproplist.cxx
index f79022f..07920fb 100644
--- a/lotuswordpro/source/filter/lwpproplist.cxx
+++ b/lotuswordpro/source/filter/lwpproplist.cxx
@@ -71,7 +71,7 @@ LwpPropListElement::LwpPropListElement(LwpObjectHeader &objHdr, LwpSvStream *pSt
 
 LwpPropListElement* LwpPropListElement::GetNext()
 {
-    return static_cast<LwpPropListElement*>(LwpDLVList::GetNext().obj().get());
+    return dynamic_cast<LwpPropListElement*>(LwpDLVList::GetNext().obj().get());
 }
 
 void LwpPropListElement::Read()
@@ -117,7 +117,7 @@ void LwpPropList::Read(LwpObjectStream* pObjStrm)
 
 LwpPropListElement* LwpPropList::GetFirst()
 {
-    return static_cast<LwpPropListElement*>(LwpDLVListHead::GetFirst().obj().get());
+    return dynamic_cast<LwpPropListElement*>(LwpDLVListHead::GetFirst().obj().get());
 }
 
 OUString LwpPropList::EnumNamedProperty(OUString& name,OUString& value)
@@ -131,11 +131,10 @@ OUString LwpPropList::EnumNamedProperty(OUString& name,OUString& value)
             value = pElement->GetValue().str();
             name  = pElement->GetName().str();
             pElement = pElement->GetNext();
-            return  pElement->GetName().str();
+            if(pElement)
+                return  pElement->GetName().str();
         }
-        else
-            return OUString("");
-
+        return OUString("");
     }
     else
     {
diff --git a/lotuswordpro/source/filter/lwprowlayout.cxx b/lotuswordpro/source/filter/lwprowlayout.cxx
index 32f052e..5354c00 100644
--- a/lotuswordpro/source/filter/lwprowlayout.cxx
+++ b/lotuswordpro/source/filter/lwprowlayout.cxx
@@ -309,7 +309,7 @@ sal_Int32 LwpRowLayout::FindMarkConnCell(sal_uInt8 nStartCol,sal_uInt8 nEndCol)
     sal_uInt16 nSpannRows = 1;
     sal_Int32 nMarkConnCell = -1;
 
-    for (sal_uInt16 i=0;i<m_ConnCellList.size();i++)
+    for (size_t i=0;i<m_ConnCellList.size();i++)
     {
         if (m_ConnCellList[i]->GetColID()>=nEndCol)
             break;
@@ -334,7 +334,7 @@ sal_Int32 LwpRowLayout::FindNextMarkConnCell(sal_uInt16 nMarkConnCell,sal_uInt8
 {
     sal_uInt16 nMaxRows = m_ConnCellList[nMarkConnCell]->GetNumrows();
 
-    for (sal_uInt16 i=nMarkConnCell+1;i<m_ConnCellList.size();i++)
+    for (size_t i=nMarkConnCell+1;i<m_ConnCellList.size();i++)
     {
         if (m_ConnCellList[i]->GetColID()>=nEndCol)
             break;
@@ -366,11 +366,14 @@ sal_uInt16 LwpRowLayout::GetCurMaxSpannedRows(sal_uInt8 nStartCol,sal_uInt8 nEnd
  */
 void LwpRowLayout::ConvertCommonRow(XFTable* pXFTable,sal_uInt8 nStartCol,sal_uInt8 nEndCol)
 {
+    LwpTableLayout* pTableLayout = GetParentTableLayout();
+    if (!pTableLayout)
+        return;
+
     XFRow* pRow = new XFRow;
     pRow->SetStyleName(m_StyleName);
 
     XFCell * pCell = NULL;
-    LwpTableLayout* pTableLayout = GetParentTableLayout();
     LwpTable* pTable = pTableLayout->GetTable();
     sal_uInt8 nCellStartCol,nCellEndCol;
 
@@ -446,7 +449,7 @@ void LwpRowLayout::CollectMergeInfo()
 void LwpRowLayout::SetCellSplit(sal_uInt16 nEffectRows)
 {
     LwpConnectedCellLayout* pConnCell;
-    for (sal_uInt32 i=0; i<m_ConnCellList.size(); i++)
+    for (size_t i=0; i<m_ConnCellList.size(); i++)
     {
         pConnCell = m_ConnCellList[i];
         sal_uInt16 nRowSpan = pConnCell->GetRowID()+pConnCell->GetNumrows();
diff --git a/lotuswordpro/source/filter/lwpsdwgrouploaderv0102.cxx b/lotuswordpro/source/filter/lwpsdwgrouploaderv0102.cxx
index aabda03..34dae90 100644
--- a/lotuswordpro/source/filter/lwpsdwgrouploaderv0102.cxx
+++ b/lotuswordpro/source/filter/lwpsdwgrouploaderv0102.cxx
@@ -131,11 +131,11 @@ void LwpSdwGroupLoaderV0102::BeginDrawObjects(std::vector< rtl::Reference<XFFram
     m_pStream->SeekRel(2);
 
     //for calculating transformation params.
-    LwpFrameLayout* pMyFrameLayout = static_cast<LwpFrameLayout*>(m_pGraphicObj->GetLayout(NULL));
-    if (pMyFrameLayout)
+    rtl::Reference<LwpFrameLayout> xMyFrameLayout(dynamic_cast<LwpFrameLayout*>(m_pGraphicObj->GetLayout(nullptr).get()));
+    if (xMyFrameLayout.is())
     {
-        LwpLayoutScale* pMyScale = pMyFrameLayout->GetLayoutScale();
-        LwpLayoutGeometry* pFrameGeo = pMyFrameLayout->GetGeometry();
+        LwpLayoutScale* pMyScale = xMyFrameLayout->GetLayoutScale();
+        LwpLayoutGeometry* pFrameGeo = xMyFrameLayout->GetGeometry();
         if (pMyScale && pFrameGeo)
         {
             // original drawing size
@@ -145,10 +145,8 @@ void LwpSdwGroupLoaderV0102::BeginDrawObjects(std::vector< rtl::Reference<XFFram
             double fGrafOrgHeight = (double)nHeight/TWIPS_PER_CM;
 
             // get margin values
-            double fLeftMargin = pMyFrameLayout->GetMarginsValue(MARGIN_LEFT);
-//          double fRightMargin = pMyFrameLayout->GetMarginsValue(MARGIN_RIGHT);
-            double fTopMargin = pMyFrameLayout->GetMarginsValue(MARGIN_TOP);
-//          double fBottomMargin = pMyFrameLayout->GetMarginsValue(MARGIN_BOTTOM);
+            double fLeftMargin = xMyFrameLayout->GetMarginsValue(MARGIN_LEFT);
+            double fTopMargin = xMyFrameLayout->GetMarginsValue(MARGIN_TOP);
 
             // frame size
             double fFrameWidth = LwpTools::ConvertFromUnitsToMetric(pFrameGeo->GetWidth());
@@ -199,7 +197,7 @@ void LwpSdwGroupLoaderV0102::BeginDrawObjects(std::vector< rtl::Reference<XFFram
             }
 
             // placement: centered
-            if (pMyFrameLayout->GetScaleCenter())
+            if (xMyFrameLayout->GetScaleCenter())
             {
                 Rectangle aBoundRect(static_cast<long>(left*m_aTransformData.fScaleX + fLeftMargin),
                     static_cast<long>(top    * m_aTransformData.fScaleY + fTopMargin),
@@ -229,7 +227,7 @@ void LwpSdwGroupLoaderV0102::BeginDrawObjects(std::vector< rtl::Reference<XFFram
     //load draw object
     for (unsigned short i = 0; i < nRecCount; i++)
     {
-        XFFrame* pXFDrawObj = this->CreateDrawObject();
+        XFFrame* pXFDrawObj = CreateDrawObject();
 
         if (pXFDrawObj)
         {
@@ -282,7 +280,7 @@ XFDrawGroup* LwpSdwGroupLoaderV0102::CreateDrawGroupObject(void)
     //load draw object
     for (unsigned short i = 0; i < nRecCount; i++)
     {
-        XFFrame* pXFDrawObj = this->CreateDrawObject();
+        XFFrame* pXFDrawObj = CreateDrawObject();
 
         if (pXFDrawObj)
         {
@@ -373,7 +371,7 @@ XFFrame* LwpSdwGroupLoaderV0102::CreateDrawObject(void)
         // read out the object header
         pDrawObj = new LwpDrawGroup(m_pStream);
 
-        pRetObjct = this->CreateDrawGroupObject();
+        pRetObjct = CreateDrawGroupObject();
 
         // set anchor type
         pRetObjct->SetAnchorType(enumXFAnchorFrame);
diff --git a/lotuswordpro/source/filter/lwpsilverbullet.cxx b/lotuswordpro/source/filter/lwpsilverbullet.cxx
index c0c39e9..e217450 100644
--- a/lotuswordpro/source/filter/lwpsilverbullet.cxx
+++ b/lotuswordpro/source/filter/lwpsilverbullet.cxx
@@ -97,7 +97,10 @@ void LwpSilverBullet::Read()
 
     sal_uInt16 nNumPos = m_pObjStrm->QuickReaduInt16();
 
-    for (sal_uInt8 nC = 0; nC < nNumPos; nC++)
+    if (nNumPos > SAL_N_ELEMENTS(m_pResetPositionFlags))
+        throw std::range_error("corrupt SilverBullet");
+
+    for (sal_uInt16 nC = 0; nC < nNumPos; nC++)
         m_pResetPositionFlags[nC] = m_pObjStrm->QuickReaduInt8();
 
     m_nUseCount = m_pObjStrm->QuickReaduInt32();
@@ -115,9 +118,9 @@ void LwpSilverBullet::RegisterStyle()
     XFListStyle* pListStyle = new XFListStyle();
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
 
-    this->GetBulletPara();
+    GetBulletPara();
 
-    if (this->IsBulletOrdered() && this->HasName())
+    if (IsBulletOrdered() && HasName())
     {
         //todo: find the flag in the file
         bool bCumulative = false;
@@ -133,9 +136,9 @@ void LwpSilverBullet::RegisterStyle()
                 if (pParaNumber->GetStyleID() != NUMCHAR_other)
                 {
                     m_pHideLevels[nPos] = aParaNumbering.nNumLevel;
-                    sal_uInt16 nDisplayLevel = this->GetDisplayLevel(nPos);
+                    sal_uInt16 nDisplayLevel = GetDisplayLevel(nPos);
                     bCumulative = (nDisplayLevel > 1);
-                    OUString aPrefix = this->GetAdditionalName(nPos);
+                    OUString aPrefix = GetAdditionalName(nPos);
 
                     XFNumFmt aFmt;
                     if (!bCumulative && aParaNumbering.pPrefix)
@@ -171,7 +174,7 @@ void LwpSilverBullet::RegisterStyle()
                         aSuffix = aParaNumbering.pSuffix->GetText();
                     }
 
-                    pListStyle->SetListBullet(nPos, GetNumCharByStyleID(pParaNumber).toChar(),
+                    pListStyle->SetListBullet(nPos, GetNumCharByStyleID(pParaNumber),
                         "Times New Roman", aPrefix, aSuffix);
                 }
 
@@ -221,11 +224,9 @@ OUString LwpSilverBullet::GetBulletFontName()
  * @descr:
  * @return:  An UChar32 bulle character.
  */
-UChar32 LwpSilverBullet::GetBulletChar()
+OUString LwpSilverBullet::GetBulletChar()
 {
-    OUString aBulletChar = m_pBulletPara->GetBulletChar();
-
-    return aBulletChar.toChar();
+    return m_pBulletPara->GetBulletChar();
 }
 
 /**
@@ -266,7 +267,6 @@ OUString LwpSilverBullet::GetNumCharByStyleID(LwpFribParaNumber* pParaNumber)
 
     OUString strNumChar("1");
     sal_uInt16 nStyleID = pParaNumber->GetStyleID();
-    UChar32 uC = 0x0000;
 
     switch (nStyleID)
     {
@@ -288,8 +288,7 @@ OUString LwpSilverBullet::GetNumCharByStyleID(LwpFribParaNumber* pParaNumber)
         strNumChar = "i";
         break;
     case NUMCHAR_other:
-        uC = static_cast<UChar32>(pParaNumber->GetNumberChar());
-        strNumChar = OUString(uC);
+        strNumChar = OUString(pParaNumber->GetNumberChar());
         break;
     case NUMCHAR_Chinese1:
         {
@@ -406,11 +405,11 @@ OUString LwpSilverBullet::GetAdditionalName(sal_uInt8 nPos)
 
     if (bDivisionName)
     {
-        aRet += this->GetDivisionName();
+        aRet += GetDivisionName();
     }
     if (bSectionName)
     {
-        aRet += this->GetSectionName();
+        aRet += GetSectionName();
     }
 
     return aRet;
@@ -454,7 +453,7 @@ OUString LwpSilverBullet::GetSectionName()
 
 bool LwpSilverBullet::HasName()
 {
-    LwpAtomHolder& rName = this->GetName();
+    LwpAtomHolder& rName = GetName();
     return (!rName.str().isEmpty());
 }
 /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
diff --git a/lotuswordpro/source/filter/lwpsilverbullet.hxx b/lotuswordpro/source/filter/lwpsilverbullet.hxx
index 27412b0..4127443 100644
--- a/lotuswordpro/source/filter/lwpsilverbullet.hxx
+++ b/lotuswordpro/source/filter/lwpsilverbullet.hxx
@@ -107,7 +107,7 @@ public:
 
     inline OUString GetBulletStyleName() const;
 
-    UChar32 GetBulletChar();
+    OUString GetBulletChar();
 
     OUString GetPrefix() { return OUString(); }
 
diff --git a/lotuswordpro/source/filter/lwpstory.cxx b/lotuswordpro/source/filter/lwpstory.cxx
index 911e9ae..e6ba2d7 100644
--- a/lotuswordpro/source/filter/lwpstory.cxx
+++ b/lotuswordpro/source/filter/lwpstory.cxx
@@ -105,15 +105,15 @@ void LwpStory::XFConvert(XFContentContainer* pCont)
     XFConvertFrameInFrame(pCont);
     //process para list
     XFContentContainer* pParaCont = pCont;
-    LwpPara* pPara = dynamic_cast<LwpPara*> ( GetFirstPara().obj().get() );
-    while(pPara)
+    rtl::Reference<LwpPara> xPara(dynamic_cast<LwpPara*>(GetFirstPara().obj().get()));
+    while (xPara.is())
     {
-        pPara->SetFoundry(m_pFoundry);
-        pPara->XFConvert(pParaCont);
+        xPara->SetFoundry(m_pFoundry);
+        xPara->XFConvert(pParaCont);
 
         //Get the xfcontainer for the next para
-        pParaCont = pPara->GetXFContainer();
-        pPara = dynamic_cast<LwpPara*> ( pPara->GetNext().obj().get() );
+        pParaCont = xPara->GetXFContainer();
+        xPara.set(dynamic_cast<LwpPara*>(xPara->GetNext().obj().get()));
     }
 
     //process frame which anchor is to cell after converter all the para
@@ -121,27 +121,26 @@ void LwpStory::XFConvert(XFContentContainer* pCont)
     XFConvertFrameInHeaderFooter(pCont);
 
     //Release Lwp Objects
-    LwpPara* pCur = dynamic_cast<LwpPara*> (GetFirstPara().obj().get());
-    LwpPara* pNext;
-    while(pCur)
+    rtl::Reference<LwpPara> xCur(dynamic_cast<LwpPara*>(GetFirstPara().obj().get()));
+    rtl::Reference<LwpPara> xNext;
+    while (xCur.is())
     {
-        pCur->Release();
-        pNext = dynamic_cast<LwpPara*> ( pCur->GetNext().obj().get() );
+        xNext.set(dynamic_cast<LwpPara*>(xCur->GetNext().obj().get()));
         LwpGlobalMgr* pGlobal = LwpGlobalMgr::GetInstance();
         LwpObjectFactory* pObjMgr = pGlobal->GetLwpObjFactory();
-        pObjMgr->ReleaseObject(pCur->GetObjectID());
-        pCur = pNext;
+        pObjMgr->ReleaseObject(xCur->GetObjectID());
+        xCur = xNext;
     }
 }
 
 void LwpStory::RegisterStyle()
 {
-    LwpPara* pPara = dynamic_cast<LwpPara*>( GetFirstPara().obj().get() );
-    while(pPara)
+    rtl::Reference<LwpPara> xPara(dynamic_cast<LwpPara*>(GetFirstPara().obj().get()));
+    while (xPara.is())
     {
-        pPara->SetFoundry(m_pFoundry);
-        pPara->RegisterStyle();
-        pPara = dynamic_cast<LwpPara*>(pPara->GetNext().obj().get());
+        xPara->SetFoundry(m_pFoundry);
+        xPara->DoRegisterStyle();
+        xPara.set(dynamic_cast<LwpPara*>(xPara->GetNext().obj().get()));
     }
 }
 
@@ -151,24 +150,7 @@ void LwpStory::Parse(IXFStream* pOutputStream)
     XFConvert(m_pXFContainer);
     m_pXFContainer->ToXml(pOutputStream);
     delete m_pXFContainer;
-    m_pXFContainer = NULL;
-
-    //It seems that, currently, we do not need to process the child story
-    /*LwpObject* pChildStory = GetFirstStory()->obj();
-    if(pChildStory)
-    {
-        pChildStory->SetFoundry(m_pFoundry);
-        pChildStory->Parse(pOutputStream);
-    }*/
-
-    //Don't process the next story
-/*  LwpObject* pNextStory = GetNextStory()->obj();
-    if(pNextStory)
-    {
-        pNextStory->SetFoundry(m_pFoundry);
-        pNextStory->Parse(pOutputStream);
-    }*/
-
+    m_pXFContainer = nullptr;
 }
 
 #include "lwppagelayout.hxx"
@@ -230,20 +212,23 @@ void LwpStory::SortPageLayout()
 {
     //Get all the pagelayout and store in list
     std::vector<LwpPageLayout*>  aLayoutList;
-    LwpVirtualLayout* pLayout = GetLayout(NULL);
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(GetLayout(nullptr));
+    while (xLayout.get())
     {
-        if(pLayout->IsPage())
+        LwpPageLayout *pLayout = xLayout->IsPage()
+            ? dynamic_cast<LwpPageLayout*>(xLayout.get())
+            : nullptr;
+        if (pLayout)
         {
-            LwpLayout::UseWhenType eSectionType = static_cast<LwpPageLayout*>(pLayout)->GetUseWhenType();
-            //for mirror page, the child  is pagelayout
-            LwpVirtualLayout* pParent = pLayout->GetParentLayout();
-            if(eSectionType != LwpLayout::StartWithinColume && pParent && !pParent->IsPage())
+            LwpLayout::UseWhenType eSectionType = pLayout->GetUseWhenType();
+            //for mirror page, the child is pagelayout
+            rtl::Reference<LwpVirtualLayout> xParent = xLayout->GetParentLayout();
+            if(eSectionType != LwpLayout::StartWithinColume && xParent.is() && !xParent->IsPage())
             {
-                aLayoutList.push_back(static_cast<LwpPageLayout*>(pLayout));
+                aLayoutList.push_back(pLayout);
             }
         }
-        pLayout = GetLayout(pLayout);
+        xLayout = GetLayout(xLayout.get());
     }
     // sort the pagelayout according to their position
     std::vector<LwpPageLayout*>::iterator aIt;
@@ -337,26 +322,24 @@ bool LwpStory::IsNeedSection()
 **************************************************************************/
 void LwpStory::XFConvertFrameInCell(XFContentContainer* pCont)
 {
-    LwpVirtualLayout* pLayout = GetLayout(NULL);
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(GetLayout(nullptr));
+    while (xLayout.is())
     {
-        LwpVirtualLayout* pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetChildHead().obj().get());
-        while(pFrameLayout)
+        rtl::Reference<LwpVirtualLayout> xFrameLayout(dynamic_cast<LwpVirtualLayout*>(xLayout->GetChildHead().obj().get()));
+        while (xFrameLayout.is())
         {
-
-            //if(pFrameLayout->IsAnchorCell())
-            if(pFrameLayout->IsAnchorCell() && pFrameLayout->HasContent())
+            if (xFrameLayout->IsAnchorCell() && xFrameLayout->HasContent())
             {
                 //get the first xfpara
                 rtl::Reference<XFContent> first(
                     pCont->FindFirstContent(enumXFContentPara));
                 XFContentContainer* pXFFirtPara = static_cast<XFContentContainer*>(first.get());
                 if(pXFFirtPara)
-                    pFrameLayout->XFConvert(pXFFirtPara);
+                    xFrameLayout->XFConvert(pXFFirtPara);
             }
-            pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pFrameLayout->GetNext().obj().get());
+            xFrameLayout.set(dynamic_cast<LwpVirtualLayout*>(xFrameLayout->GetNext().obj().get()));
         }
-        pLayout = GetLayout(pLayout);
+        xLayout = GetLayout(xLayout.get());
     }
 }
 
@@ -368,22 +351,22 @@ void LwpStory::XFConvertFrameInCell(XFContentContainer* pCont)
 **************************************************************************/
 void LwpStory::XFConvertFrameInPage(XFContentContainer* pCont)
 {
-    LwpVirtualLayout* pLayout = GetLayout(NULL);
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(GetLayout(nullptr));
+    while (xLayout.is())
     {
-        LwpVirtualLayout* pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetChildHead().obj().get());
-        while(pFrameLayout)
+        rtl::Reference<LwpVirtualLayout> xFrameLayout(dynamic_cast<LwpVirtualLayout*>(xLayout->GetChildHead().obj().get()));
+        while (xFrameLayout.is())
         {
-            if((pFrameLayout->IsAnchorPage()
-                &&(pFrameLayout->IsFrame()
-                      ||pFrameLayout->IsSuperTable()
-                      ||pFrameLayout->IsGroupHead())))
+            if((xFrameLayout->IsAnchorPage()
+                &&(xFrameLayout->IsFrame()
+                      || xFrameLayout->IsSuperTable()
+                      || xFrameLayout->IsGroupHead())))
             {
-                pFrameLayout->XFConvert(pCont);
+                xFrameLayout->XFConvert(pCont);
             }
-            pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pFrameLayout->GetNext().obj().get());
+            xFrameLayout.set(dynamic_cast<LwpVirtualLayout*>(xFrameLayout->GetNext().obj().get()));
         }
-        pLayout = GetLayout(pLayout);
+        xLayout = GetLayout(xLayout.get());
     }
 }
 /**************************************************************************
@@ -394,19 +377,19 @@ void LwpStory::XFConvertFrameInPage(XFContentContainer* pCont)
 **************************************************************************/
 void LwpStory::XFConvertFrameInFrame(XFContentContainer* pCont)
 {
-    LwpVirtualLayout* pLayout = GetLayout(NULL);
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(GetLayout(nullptr));
+    while (xLayout.get())
     {
-        LwpVirtualLayout* pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetChildHead().obj().get());
-        while(pFrameLayout)
+        rtl::Reference<LwpVirtualLayout> xFrameLayout(dynamic_cast<LwpVirtualLayout*>(xLayout->GetChildHead().obj().get()));
+        while (xFrameLayout.is())
         {
-            if(pFrameLayout->IsAnchorFrame())
+            if (xFrameLayout->IsAnchorFrame())
             {
-                pFrameLayout->XFConvert(pCont);
+                xFrameLayout->XFConvert(pCont);
             }
-            pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pFrameLayout->GetNext().obj().get());
+            xFrameLayout.set(dynamic_cast<LwpVirtualLayout*>(xFrameLayout->GetNext().obj().get()));
         }
-        pLayout = GetLayout(pLayout);
+        xLayout = GetLayout(xLayout.get());
     }
 }
 /**************************************************************************
@@ -417,24 +400,24 @@ void LwpStory::XFConvertFrameInFrame(XFContentContainer* pCont)
 **************************************************************************/
 void LwpStory::XFConvertFrameInHeaderFooter(XFContentContainer* pCont)
 {
-    LwpVirtualLayout* pLayout = GetLayout(NULL);
-    while(pLayout)
+    rtl::Reference<LwpVirtualLayout> xLayout(GetLayout(nullptr));
+    while (xLayout.is())
     {
-        LwpVirtualLayout* pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pLayout->GetChildHead().obj().get());
-        while(pFrameLayout)
+        rtl::Reference<LwpVirtualLayout> xFrameLayout(dynamic_cast<LwpVirtualLayout*>(xLayout->GetChildHead().obj().get()));
+        while (xFrameLayout.is())
         {
-            if(pFrameLayout->IsAnchorPage() && (pLayout->IsHeader() || pLayout->IsFooter()))
+            if (xFrameLayout->IsAnchorPage() && (xLayout->IsHeader() || xLayout->IsFooter()))
             {
                 //The frame must be included by <text:p>
                 rtl::Reference<XFContent> first(
                     pCont->FindFirstContent(enumXFContentPara));
                 XFContentContainer* pXFFirtPara = static_cast<XFContentContainer*>(first.get());
                 if(pXFFirtPara)
-                    pFrameLayout->XFConvert(pXFFirtPara);
+                    xFrameLayout->XFConvert(pXFFirtPara);
             }
-            pFrameLayout = dynamic_cast<LwpVirtualLayout*>(pFrameLayout->GetNext().obj().get());
+            xFrameLayout.set(dynamic_cast<LwpVirtualLayout*>(xFrameLayout->GetNext().obj().get()));
         }
-        pLayout = GetLayout(pLayout);
+        xLayout = GetLayout(xLayout.get());
     }
 }
 
@@ -454,10 +437,10 @@ XFContentContainer* LwpStory::GetXFContent()
 
 LwpPara* LwpStory::GetLastParaOfPreviousStory()
 {
-    LwpVirtualLayout* pVLayout = this->GetLayout(NULL);
-    if (pVLayout)
+    rtl::Reference<LwpVirtualLayout> xVLayout(GetLayout(nullptr));
+    if (xVLayout.is())
     {
-        return pVLayout->GetLastParaOfPreviousStory();
+        return xVLayout->GetLastParaOfPreviousStory();
     }
 
     return NULL;
diff --git a/lotuswordpro/source/filter/lwpstory.hxx b/lotuswordpro/source/filter/lwpstory.hxx
index a546b9d..c4d42de 100644
--- a/lotuswordpro/source/filter/lwpstory.hxx
+++ b/lotuswordpro/source/filter/lwpstory.hxx
@@ -155,7 +155,7 @@ LwpMiddleLayout* LwpStory::GetTabLayout()
 {
     if(m_pTabLayout)
         return m_pTabLayout;
-    return static_cast<LwpMiddleLayout*>(GetLayout(NULL));
+    return dynamic_cast<LwpMiddleLayout*>(GetLayout(nullptr).get());
 }
 void LwpStory::SetPMModified(bool bPMModified)
 {
diff --git a/lotuswordpro/source/filter/lwptable.hxx b/lotuswordpro/source/filter/lwptable.hxx
index 833716c..dbe7935 100644
--- a/lotuswordpro/source/filter/lwptable.hxx
+++ b/lotuswordpro/source/filter/lwptable.hxx
@@ -124,7 +124,10 @@ public:
     LwpObjectID& GetDefaultCellStyle() {return m_DefaultCellStyle;}
     sal_uInt16 GetRow() {return m_nRow;}
     sal_uInt16 GetColumn() {return m_nColumn;}
-    LwpTableLayout * GetTableLayout(){return static_cast<LwpTableLayout *>(GetLayout(NULL));}
+    rtl::Reference<LwpTableLayout> GetTableLayout()
+    {
+        return rtl::Reference<LwpTableLayout>(dynamic_cast<LwpTableLayout*>(GetLayout(nullptr).get()));
+    }
     bool IsNumberDown();
     virtual bool IsTable() SAL_OVERRIDE { return true;}
     LwpSuperTableLayout* GetSuperTableLayout();
diff --git a/lotuswordpro/source/filter/lwptablelayout.cxx b/lotuswordpro/source/filter/lwptablelayout.cxx
index 6734edb..af3419f 100644
--- a/lotuswordpro/source/filter/lwptablelayout.cxx
+++ b/lotuswordpro/source/filter/lwptablelayout.cxx
@@ -218,13 +218,13 @@ double LwpSuperTableLayout::GetTableWidth()
         LwpTableLayout* pTableLayout = GetTableLayout();
         if(!pTableLayout)
         {
-            assert(false);
+            SAL_WARN("lwp", "missing table layout, early return");
             return 0;
         }
         LwpTable *pTable = pTableLayout->GetTable();
         if(!pTable)
         {
-            assert(false);
+            SAL_WARN("lwp", "missing table, early return");
             return 0;
         }
         double dDefaultWidth = pTable->GetWidth();
@@ -279,7 +279,7 @@ void LwpSuperTableLayout::ApplyShadow(XFTableStyle *pTableStyle)
  */
 void LwpSuperTableLayout::ApplyPatternFill(XFTableStyle* pTableStyle)
 {
-    XFBGImage* pXFBGImage = this->GetFillPattern();
+    XFBGImage* pXFBGImage = GetFillPattern();
     if (pXFBGImage)
     {
         pTableStyle->SetBackImage(pXFBGImage);
@@ -293,7 +293,7 @@ void LwpSuperTableLayout::ApplyPatternFill(XFTableStyle* pTableStyle)
  */
 void LwpSuperTableLayout::ApplyBackGround(XFTableStyle* pTableStyle)
 {
-    if (this->IsPatternFill())
+    if (IsPatternFill())
     {
         ApplyPatternFill(pTableStyle);
     }
@@ -355,7 +355,7 @@ void LwpSuperTableLayout::ApplyAlignment(XFTableStyle * pTableStyle)
 void  LwpSuperTableLayout::XFConvert(XFContentContainer* pCont)
 {
     if ( LwpLayoutRelativityGuts::LAY_INLINE_NEWLINE == GetRelativeType()
-            && !GetContainerLayout()->IsCell())
+            && (!GetContainerLayout().is() || !GetContainerLayout()->IsCell()) )
     {
         LwpTableLayout * pTableLayout = GetTableLayout();
         if (pTableLayout)
@@ -451,6 +451,7 @@ LwpCellLayout * LwpTableLayout::GetCellByRowCol(sal_uInt16 nRow, sal_uInt16 nCol
 
     return m_WordProCellsMap[static_cast<size_t>(nRow)*m_nCols + nCol];
 }
+
 /**
  * @short   traverse all table cells
  * @param
@@ -581,10 +582,16 @@ void LwpTableLayout::RegisterColumns()
     LwpColumnLayout * pColumnLayout = dynamic_cast<LwpColumnLayout *>(rColumnID.obj().get());
     while (pColumnLayout)
     {
-        m_pColumns[pColumnLayout->GetColumnID()] = pColumnLayout;
+        auto nColId = pColumnLayout->GetColumnID();
+        if (nColId >= nCols)
+        {
+            delete [] pWidthCalculated;
+            throw std::range_error("corrupt LwpTableLayout");
+        }
+        m_pColumns[nColId] = pColumnLayout;
         if (!pColumnLayout->IsJustifiable())
         {
-            pWidthCalculated[pColumnLayout->GetColumnID()] = sal_True;
+            pWidthCalculated[nColId] = sal_True;
             dTableWidth -= pColumnLayout->GetWidth();
             nJustifiableColumn --;
         }
@@ -594,7 +601,7 @@ void LwpTableLayout::RegisterColumns()
     }
 
     // if all columns are not justifiable, the rightmost column will be changed to justifiable
-    if(nJustifiableColumn == 0)
+    if (nJustifiableColumn == 0 && nCols != 0)
     {
         nJustifiableColumn ++;
         if (m_pColumns[nCols - 1])
@@ -611,7 +618,7 @@ void LwpTableLayout::RegisterColumns()
     }
 
     // justifiable columns will share the remain width averagely
-    dDefaultColumn = dTableWidth/nJustifiableColumn;
+    dDefaultColumn = nJustifiableColumn ? dTableWidth/nJustifiableColumn : 0;
 
     // register default column style
     XFColStyle *pColStyle = new XFColStyle();
@@ -687,17 +694,14 @@ void LwpTableLayout::RegisterStyle()
 {
     // get super table layout
     LwpSuperTableLayout * pSuper = GetSuperTableLayout();
-    if(!pSuper)
-    {
-        assert(false);
+    if (!pSuper)
         return;
-    }
 
     // get table
     LwpTable * pTable = GetTable();
     if (pTable == NULL)
     {
-        assert(false);
+        SAL_WARN("lwp", "missing table, early return");
         return;
     }
 
@@ -719,7 +723,7 @@ void LwpTableLayout::RegisterStyle()
     // If the table is not "with paragraph above" placement, create an frame style
     // by supertable layout
     if ( LwpLayoutRelativityGuts::LAY_INLINE_NEWLINE == nType
-        && !pSuper->GetContainerLayout()->IsCell())
+        && (!pSuper->GetContainerLayout().is() || !pSuper->GetContainerLayout()->IsCell()) )
     {
         //with para above
 //      pSuper->ApplyBackColor(pTableStyle);
@@ -1108,9 +1112,9 @@ void LwpTableLayout::PutCellVals(LwpFoundry* pFoundry, LwpObjectID aTableID)
 
     try{
 
-        LwpDLVListHeadHolder* pHolder = static_cast<LwpDLVListHeadHolder*>(pFoundry->GetNumberManager().GetTableRangeID().obj().get());
+        LwpDLVListHeadHolder* pHolder = dynamic_cast<LwpDLVListHeadHolder*>(pFoundry->GetNumberManager().GetTableRangeID().obj().get());
 
-        LwpTableRange* pTableRange = static_cast<LwpTableRange*>(pHolder->GetHeadID().obj().get());
+        LwpTableRange* pTableRange = pHolder ? dynamic_cast<LwpTableRange*>(pHolder->GetHeadID().obj().get()) : nullptr;
 
         //Look up the table
         while (NULL!=pTableRange)
@@ -1123,44 +1127,50 @@ void LwpTableLayout::PutCellVals(LwpFoundry* pFoundry, LwpObjectID aTableID)
             pTableRange = pTableRange->GetNext();
         }
 
-        if (pTableRange)
-        {
-            LwpCellRange* pRange = static_cast<LwpCellRange*>(pTableRange->GetCellRangeID().obj().get());
-            LwpFolder* pFolder = static_cast<LwpFolder*>(pRange->GetFolderID().obj().get());
-            LwpObjectID aRowListID = pFolder->GetChildHeadID();
-            LwpRowList* pRowList = static_cast<LwpRowList*>(aRowListID.obj().get());
+        if (!pTableRange)
+            return;
+
+        LwpCellRange* pRange = dynamic_cast<LwpCellRange*>(pTableRange->GetCellRangeID().obj().get());
+        if (!pRange)
+            return;
+
+        LwpFolder* pFolder = dynamic_cast<LwpFolder*>(pRange->GetFolderID().obj().get());
+        if (!pFolder)
+            return;
+
+        LwpObjectID aRowListID = pFolder->GetChildHeadID();
+        LwpRowList* pRowList = dynamic_cast<LwpRowList*>(aRowListID.obj().get());
 
-            //loop the rowlist
-            while( NULL!=pRowList)
+        //loop the rowlist
+        while( nullptr!=pRowList)
+        {
+            sal_uInt16 nRowID =  pRowList->GetRowID();
             {
-                sal_uInt16 nRowID =  pRowList->GetRowID();
+                LwpCellList* pCellList = dynamic_cast<LwpCellList*>(pRowList->GetChildHeadID().obj().get());
+                //loop the cellList
+                while( nullptr!=pCellList)
                 {
-                    LwpCellList* pCellList = static_cast<LwpCellList*>(pRowList->GetChildHeadID().obj().get());
-                    //loop the celllist
-                    while( NULL!=pCellList)
-                    {
-                        {//put cell
-                            sal_uInt16 nColID = pCellList->GetColumnID();
-
-                            XFCell* pCell = GetCellsMap(nRowID,static_cast<sal_uInt8>(nColID));
-                            if (pCell)
-                            {
-                                pCellList->Convert(pCell, this);
-
-                                //process paragraph
-                                PostProcessParagraph(pCell, nRowID, nColID);
-                            }
-                            else
-                            {
-                                //Hidden cell would not be in cellsmap
-                                assert(false);
-                            }
+                    {//put cell
+                        sal_uInt16 nColID = pCellList->GetColumnID();
+
+                        XFCell* pCell = GetCellsMap(nRowID,static_cast<sal_uInt8>(nColID));
+                        if (pCell)
+                        {
+                            pCellList->Convert(pCell, this);
+
+                            //process paragraph
+                            PostProcessParagraph(pCell, nRowID, nColID);
+                        }
+                        else
+                        {
+                            //Hidden cell would not be in cellsmap
+                            assert(false);
                         }
-                        pCellList = static_cast<LwpCellList*>(pCellList->GetNextID().obj().get());
                     }
+                    pCellList = dynamic_cast<LwpCellList*>(pCellList->GetNextID().obj().get());
                 }
-                pRowList = static_cast<LwpRowList*>(pRowList->GetNextID().obj().get());
             }
+            pRowList = dynamic_cast<LwpRowList*>(pRowList->GetNextID().obj().get());
         }
 
     }catch (...) {
@@ -1202,24 +1212,31 @@ void LwpTableLayout::PostProcessParagraph(XFCell *pCell, sal_uInt16 nRowID, sal_
             }
 
             XFParaStyle * pStyle = pXFStyleManager->FindParaStyle(pXFPara->GetStyleName());
-            if (pStyle->GetNumberRight()  || bColorMod)
+            if ((pStyle && pStyle->GetNumberRight()) || bColorMod)
             {
                 XFParaStyle* pOverStyle = new XFParaStyle;
-                *pOverStyle = *pStyle;
 
-                if (pStyle->GetNumberRight())
-                    pOverStyle->SetAlignType(enumXFAlignEnd);
+                if (pStyle)
+                {
+                    *pOverStyle = *pStyle;
+
+                    if (pStyle->GetNumberRight())
+                        pOverStyle->SetAlignType(enumXFAlignEnd);
+                }
 
                 if (bColorMod)
                 {
-                    rtl::Reference<XFFont> pFont = pOverStyle->GetFont();
-                    XFColor aColor = pFont->GetColor();
-                    if ( aColor == aNullColor )
+                    rtl::Reference<XFFont> xFont = pOverStyle->GetFont();
+                    if (xFont.is())
                     {
-                        rtl::Reference<XFFont> pNewFont = new XFFont;
-                        aColor = pNumStyle->GetColor();
-                        pNewFont->SetColor(aColor);
-                        pOverStyle->SetFont(pNewFont);
+                        XFColor aColor = xFont->GetColor();
+                        if ( aColor == aNullColor )
+                        {
+                            rtl::Reference<XFFont> pNewFont = new XFFont;
+                            aColor = pNumStyle->GetColor();
+                            pNewFont->SetColor(aColor);
+                            pOverStyle->SetFont(pNewFont);
+                        }
                     }
                 }
 
diff --git a/lotuswordpro/source/filter/lwptabrack.cxx b/lotuswordpro/source/filter/lwptabrack.cxx
index 5c3eb44..487d387 100644
--- a/lotuswordpro/source/filter/lwptabrack.cxx
+++ b/lotuswordpro/source/filter/lwptabrack.cxx
@@ -61,6 +61,8 @@
 #include "lwpobjstrm.hxx"
 #include "lwpslvlist.hxx"
 
+#include <stdexcept>
+
 LwpTab::LwpTab()
 {
     m_nX = 0;
@@ -86,11 +88,12 @@ LwpTabRack::LwpTabRack(LwpObjectHeader objHdr, LwpSvStream* pStrm):LwpObject(obj
 
 void LwpTabRack::Read()
 {
-//  LwpObjectID     m_NextID;
     m_NextID.ReadIndexed(m_pObjStrm);
 
     m_nNumTabs = m_pObjStrm->QuickReaduInt16();
-    for( int i=0; i<m_nNumTabs; i++ )
+    if (m_nNumTabs > MaxTabs)
+        throw std::range_error("corrupt LwpTabRack");
+    for (int i=0; i<m_nNumTabs; ++i)
     {
         m_aTabs[i].Read(m_pObjStrm);
         m_pObjStrm->SkipExtra();
diff --git a/lotuswordpro/source/filter/lwptblcell.cxx b/lotuswordpro/source/filter/lwptblcell.cxx
index cf0cddc..e5db489 100644
--- a/lotuswordpro/source/filter/lwptblcell.cxx
+++ b/lotuswordpro/source/filter/lwptblcell.cxx
@@ -107,7 +107,7 @@ void  LwpCellList::Parse(IXFStream* /*pOutputStream*/)
 void LwpCellList::Convert(XFCell * pCell, LwpTableLayout* /*pCellsMap*/)
 {
     LwpObjectID aValueID = GetValueID();
-    LwpNumericValue* pValue = static_cast<LwpNumericValue*>(aValueID.obj().get());
+    LwpNumericValue* pValue = dynamic_cast<LwpNumericValue*>(aValueID.obj().get());
     if (pValue)
     {
         pCell->SetValue( pValue->GetValue() );
diff --git a/lotuswordpro/source/filter/lwptblcell.hxx b/lotuswordpro/source/filter/lwptblcell.hxx
index 1bbe061..98956fd 100644
--- a/lotuswordpro/source/filter/lwptblcell.hxx
+++ b/lotuswordpro/source/filter/lwptblcell.hxx
@@ -152,7 +152,7 @@ public:
     void Parse(IXFStream* pOutputStream) SAL_OVERRIDE;
     LwpObjectID GetCellRangeID(){return cpCellRange;}
     LwpObjectID GetTableID(){ return cqTable;}
-    LwpTableRange* GetNext() { return static_cast<LwpTableRange*>(LwpDLVList::GetNext().obj().get());}
+    LwpTableRange* GetNext() { return dynamic_cast<LwpTableRange*>(LwpDLVList::GetNext().obj().get());}
 protected:
     LwpObjectID cqTable;
     LwpObjectID cpCellRange;
diff --git a/lotuswordpro/source/filter/lwptblformula.cxx b/lotuswordpro/source/filter/lwptblformula.cxx
index 4f6bca0..396b0bc 100644
--- a/lotuswordpro/source/filter/lwptblformula.cxx
+++ b/lotuswordpro/source/filter/lwptblformula.cxx
@@ -201,8 +201,13 @@ bool LwpFormulaInfo::ReadExpression()
 //  Len = m_pObjStrm->QuickReaduInt16();
     m_pObjStrm->SeekRel(2);
 
-    while ((TokenType = m_pObjStrm->QuickReaduInt16()) != TK_END)
+    bool bError = false;
+    while ((TokenType = m_pObjStrm->QuickReaduInt16(&bError)) != TK_END)
     {
+
+        if (bError)
+            throw std::runtime_error("error reading expression");
+
         // Get the disk length of this token
         DiskLength = m_pObjStrm->QuickReaduInt16();
 
@@ -252,19 +257,29 @@ bool LwpFormulaInfo::ReadExpression()
             case TK_NOT:
                 m_pObjStrm->SeekRel(DiskLength); // extensible for future
 
+                if (m_aStack.size() >= 2)
                 {//binary operator
                     LwpFormulaOp* pOp = new LwpFormulaOp(TokenType);
                     pOp->AddArg(m_aStack.back()); m_aStack.pop_back();
                     pOp->AddArg(m_aStack.back()); m_aStack.pop_back();
                     m_aStack.push_back(pOp);
                 }
+                else
+                {
+                    readSucceeded = false;
+                }
                 break;
             case TK_UNARY_MINUS:
+                if (!m_aStack.empty())
                 {
                     LwpFormulaUnaryOp* pOp = new LwpFormulaUnaryOp(TokenType);
                     pOp->AddArg(m_aStack.back()); m_aStack.pop_back();
                     m_aStack.push_back(pOp);
                 }
+                else
+                {
+                    readSucceeded = false;
+                }
                 break;
             default:
                 // We don't know what to do with this token, so eat it.
@@ -368,14 +383,14 @@ void LwpFormulaInfo::Read()
 {
     LwpCellList::Read();
     {
-        LwpRowList* pRowList = static_cast<LwpRowList*>(cParent.obj().get());
+        LwpRowList* pRowList = dynamic_cast<LwpRowList*>(cParent.obj().get());
         if (pRowList)
         {
             m_nFormulaRow = pRowList->GetRowID();
         }
         else
         {
-            assert(false);
+            SAL_WARN("lwp", "missing row list");
         }
     }
 //  sal_uInt8 cFlags = (sal_uInt8) m_pObjStrm->QuickReaduInt16(); // written as a sal_uInt16
diff --git a/lotuswordpro/source/filter/lwptoc.cxx b/lotuswordpro/source/filter/lwptoc.cxx
index 2020e93..e817f6a 100644
--- a/lotuswordpro/source/filter/lwptoc.cxx
+++ b/lotuswordpro/source/filter/lwptoc.cxx
@@ -106,17 +106,22 @@ void LwpTocSuperLayout::Read()
 
     m_SearchItems.Read(m_pObjStrm);
 
-    sal_uInt16 i;
     sal_uInt16 count = m_pObjStrm->QuickReaduInt16();
-    for (i = 0; (i < MAX_LEVELS) && (count > 0); i++, count--)
+    if (count > MAX_LEVELS)
+        throw std::range_error("corrupt LwpTocSuperLayout");
+    for (sal_uInt16 i = 0; i < count; ++i)
         m_DestName[i].Read(m_pObjStrm);
 
     count = m_pObjStrm->QuickReaduInt16();
-    for (i = 0; (i < MAX_LEVELS) && (count > 0); i++, count--)
+    if (count > MAX_LEVELS)
+        throw std::range_error("corrupt LwpTocSuperLayout");
+    for (sal_uInt16 i = 0; i < count; ++i)
         m_DestPGName[i].Read(m_pObjStrm);
 
     count = m_pObjStrm->QuickReaduInt16();
-    for (i = 0; i < count; i++)
+    if (count > MAX_LEVELS)
+        throw std::range_error("corrupt LwpTocSuperLayout");
+    for (sal_uInt16 i = 0; i < count; ++i)
         m_nFlags[i] = m_pObjStrm->QuickReaduInt32();
 
     m_pObjStrm->SkipExtra();
@@ -130,9 +135,11 @@ void LwpTocSuperLayout::RegisterStyle()
     LwpSuperTableLayout::RegisterStyle();
 
     // Get font info of default text style and set into tab style
-    XFParaStyle* pBaseStyle = static_cast<XFParaStyle*>(m_pFoundry->GetStyleManager()->GetStyle(*m_pFoundry->GetDefaultTextStyle()));
+    const LwpObjectID *pDefaultTextStyle = m_pFoundry ? m_pFoundry->GetDefaultTextStyle() : nullptr;
+    XFParaStyle* pBaseStyle = pDefaultTextStyle ? dynamic_cast<XFParaStyle*>(m_pFoundry->GetStyleManager()->GetStyle(*pDefaultTextStyle)) : nullptr;
     XFTextStyle*pTextStyle = new XFTextStyle;
-    pTextStyle->SetFont(pBaseStyle->GetFont()); // who delete this font?????
+    if (pBaseStyle)
+        pTextStyle->SetFont(pBaseStyle->GetFont()); // who delete this font?????
     XFStyleManager* pXFStyleManager = LwpGlobalMgr::GetInstance()->GetXFStyleManager();
     m_TabStyleName = pXFStyleManager->AddStyle(pTextStyle).m_pStyle->GetStyleName();
 
@@ -241,8 +248,12 @@ void  LwpTocSuperLayout::XFConvert(XFContentContainer* pCont)
     // add TOC content
     LwpSuperTableLayout::XFConvert(pToc);
 
+    rtl::Reference<LwpVirtualLayout> xContainer(GetContainerLayout());
+    if (!xContainer.is())
+        return;
+
     // if current TOC is located in a cell, we must add a frame between upper level container and TOC
-    if ( !GetContainerLayout()->IsCell() )
+    if (!xContainer->IsCell())
     {
         pCont->Add(pToc);
     }
@@ -276,7 +287,10 @@ void  LwpTocSuperLayout::XFConvertFrame(XFContentContainer* pCont, sal_Int32 nSt
             XFContentContainer * pTableContainer = pXFFrame;
             // if *this is a TOCSuperTableLayout and it's located in a cell
             // add the frame to upper level and add TOCSuperTableLayout into the frame
-            if ( GetContainerLayout()->IsCell() )
+            rtl::Reference<LwpVirtualLayout> xContainer(GetContainerLayout());
+            if (!xContainer.is())
+                return;
+            if (xContainer->IsCell())
             {
                 pTableContainer = pCont; // TOC contain table directly
                 pXFFrame->Add(pCont);
@@ -285,7 +299,7 @@ void  LwpTocSuperLayout::XFConvertFrame(XFContentContainer* pCont, sal_Int32 nSt
             else
             {
                 //add frame to the container
-                pCont ->Add(pXFFrame);
+                pCont->Add(pXFFrame);
             }
             pTableLayout->XFConvert(pTableContainer);
         }
diff --git a/lotuswordpro/source/filter/lwptools.cxx b/lotuswordpro/source/filter/lwptools.cxx
index 7015651..e231683 100644
--- a/lotuswordpro/source/filter/lwptools.cxx
+++ b/lotuswordpro/source/filter/lwptools.cxx
@@ -84,12 +84,10 @@ using namespace ::osl;
 /**
  * @descr       read lwp unicode string from stream to OUString per aEncoding
 */
-sal_uInt16 LwpTools::QuickReadUnicode(LwpObjectStream* pObjStrm,
+void LwpTools::QuickReadUnicode(LwpObjectStream* pObjStrm,
         OUString& str, sal_uInt16 strlen, rtl_TextEncoding aEncoding)
         //strlen: length of bytes
 {
-
-    sal_uInt16 readLen = 0;
     OUStringBuffer strBuf(128);
 
     if( !IsUnicodePacked(pObjStrm, strlen) )
@@ -104,11 +102,9 @@ sal_uInt16 LwpTools::QuickReadUnicode(LwpObjectStream* pObjStrm,
             buf[len] = '\0';
             strBuf.append( OUString(buf, len, aEncoding) );
             strlen -= len;
-            readLen += len;
             if(!len) break;
         }
         str = strBuf.makeStringAndClear();
-        return readLen;
     }
     else
     {
@@ -120,6 +116,7 @@ sal_uInt16 LwpTools::QuickReadUnicode(LwpObjectStream* pObjStrm,
         bool flag = false;  //switch if unicode part reached
         sal_uInt16 sublen = 0;
 
+        sal_uInt16 readLen = 0;
         while(readLen<strlen)
         {
             if(!flag)   //Not unicode string
@@ -178,7 +175,6 @@ sal_uInt16 LwpTools::QuickReadUnicode(LwpObjectStream* pObjStrm,
             }
         }
         str = strBuf.makeStringAndClear();
-        return readLen;
     }
 }
 
diff --git a/lotuswordpro/source/filter/lwptools.hxx b/lotuswordpro/source/filter/lwptools.hxx
index f240214..ce63b14 100644
--- a/lotuswordpro/source/filter/lwptools.hxx
+++ b/lotuswordpro/source/filter/lwptools.hxx
@@ -90,7 +90,7 @@ class LwpTools
 {
 
 public:
-    static sal_uInt16 QuickReadUnicode( LwpObjectStream* pObjStrm,
+    static void QuickReadUnicode( LwpObjectStream* pObjStrm,
         OUString& str, sal_uInt16 strlen,  rtl_TextEncoding aEncoding );
     static bool IsUnicodePacked(LwpObjectStream* pObjStrm, sal_uInt16 len);
 
diff --git a/lotuswordpro/source/filter/lwpvpointer.cxx b/lotuswordpro/source/filter/lwpvpointer.cxx
index 796e0d4..9d1a7dc 100644
--- a/lotuswordpro/source/filter/lwpvpointer.cxx
+++ b/lotuswordpro/source/filter/lwpvpointer.cxx
@@ -77,7 +77,7 @@ void LwpVersionedPointer::RegisterStyle()
     if( pObj.is() )
     {
         pObj->SetFoundry(m_pFoundry);
-        pObj->RegisterStyle();
+        pObj->DoRegisterStyle();
     }
 }
 
diff --git a/lotuswordpro/source/filter/tocread.cxx b/lotuswordpro/source/filter/tocread.cxx
index bab3006..3fb2f9e 100644
--- a/lotuswordpro/source/filter/tocread.cxx
+++ b/lotuswordpro/source/filter/tocread.cxx
@@ -118,13 +118,15 @@ CBenTOCReader::ReadLabel(unsigned long * pTOCOffset, unsigned long * pTOCSize)
     assert(Flags == 0x0101 || Flags == 0x0);
 
     cBlockSize = UtGetIntelWord(pCurrLabel) * 1024; pCurrLabel += 2;
+    if (cBlockSize == 0)
+        return BenErr_NotBentoContainer;
 
     // Check major version
     if (UtGetIntelWord(pCurrLabel) != BEN_CURR_MAJOR_VERSION)
         return BenErr_UnknownBentoFormatVersion;
     pCurrLabel += 2;
 
-    UtGetIntelWord(pCurrLabel); pCurrLabel += 2;    // Minor version
+    pCurrLabel += 2;    // Minor version
 
     *pTOCOffset = UtGetIntelDWord(pCurrLabel); pCurrLabel += 4;
     *pTOCSize = UtGetIntelDWord(pCurrLabel);
diff --git a/lotuswordpro/source/filter/xfilter/xfcell.cxx b/lotuswordpro/source/filter/xfilter/xfcell.cxx
index ac79dda..7dde717 100644
--- a/lotuswordpro/source/filter/xfilter/xfcell.cxx
+++ b/lotuswordpro/source/filter/xfilter/xfcell.cxx
@@ -58,6 +58,9 @@
  * Table cell.
  ************************************************************************/
 #include "xfcell.hxx"
+
+#include <stdexcept>
+
 #include "xfparagraph.hxx"
 #include "xftable.hxx"
 #include "xfrow.hxx"
@@ -91,9 +94,13 @@ void    XFCell::Add(XFContent *pContent)
         assert(false);
         return;
     }
+    if (!pContent)
+    {
+        throw std::runtime_error("no content");
+    }
     if( pContent->GetContentType() == enumXFContentTable )
     {
-        XFTable *pTable = static_cast<XFTable*>(pContent);
+        XFTable *pTable = dynamic_cast<XFTable*>(pContent);
         if( !pTable )
             return;
         //the sub table will fill all the cell, there can't be other contents.
diff --git a/lotuswordpro/source/filter/xfilter/xfdrawgroup.hxx b/lotuswordpro/source/filter/xfilter/xfdrawgroup.hxx
index d97ae14..722fce1 100644
--- a/lotuswordpro/source/filter/xfilter/xfdrawgroup.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfdrawgroup.hxx
@@ -87,13 +87,13 @@ public:
     virtual void ToXml(IXFStream *pStrm) SAL_OVERRIDE;
 
 private:
-    XFContentContainer  m_aChildren;
+    rtl::Reference<XFContentContainer>  m_aChildren;
 };
 
 inline void XFDrawGroup::Add(XFFrame *pFrame)
 {
     if( pFrame )
-        m_aChildren.Add(pFrame);
+        m_aChildren->Add(pFrame);
 }
 
 inline void XFDrawGroup::ToXml(IXFStream *pStrm)
@@ -105,7 +105,7 @@ inline void XFDrawGroup::ToXml(IXFStream *pStrm)
 
     pStrm->StartElement( "draw:g" );
 
-    m_aChildren.ToXml(pStrm);
+    m_aChildren->ToXml(pStrm);
 
     pStrm->EndElement( "draw:g" );
 
diff --git a/lotuswordpro/source/filter/xfilter/xfendnote.hxx b/lotuswordpro/source/filter/xfilter/xfendnote.hxx
index 1f44edc..d50803f 100644
--- a/lotuswordpro/source/filter/xfilter/xfendnote.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfendnote.hxx
@@ -81,7 +81,7 @@ public:
 private:
     OUString   m_strID;
     OUString   m_strLabel;
-    XFContentContainer  m_aContents;
+    rtl::Reference<XFContentContainer>  m_aContents;
 };
 
 inline XFEndNote::XFEndNote()
diff --git a/lotuswordpro/source/filter/xfilter/xfheader.hxx b/lotuswordpro/source/filter/xfilter/xfheader.hxx
index 9a4773a..5fc150c 100644
--- a/lotuswordpro/source/filter/xfilter/xfheader.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfheader.hxx
@@ -81,7 +81,7 @@ public:
         pStrm->EndElement( "style:header" );
     }
 private:
-    XFContentContainer  m_aContents;
+    rtl::Reference<XFContentContainer>  m_aContents;
 };
 
 #endif
diff --git a/lotuswordpro/source/filter/xfilter/xfinputlist.hxx b/lotuswordpro/source/filter/xfilter/xfinputlist.hxx
index c903c5a..e10c948 100644
--- a/lotuswordpro/source/filter/xfilter/xfinputlist.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfinputlist.hxx
@@ -99,7 +99,7 @@ inline void XFInputList::ToXml(IXFStream *pStrm)
     pAttrList->AddAttribute( "text:value", " " );
     pStrm->StartElement( "text:label" );
     pStrm->EndElement( "text:label" );
-    for(sal_uInt32 i=0; i< m_list.size();i++)
+    for(size_t i=0; i< m_list.size();i++)
     {
         pAttrList->Clear();
         pAttrList->AddAttribute( "text:value", m_list[i] );
diff --git a/lotuswordpro/source/filter/xfilter/xflineheight.hxx b/lotuswordpro/source/filter/xfilter/xflineheight.hxx
index d6c35b4..21af420 100644
--- a/lotuswordpro/source/filter/xfilter/xflineheight.hxx
+++ b/lotuswordpro/source/filter/xfilter/xflineheight.hxx
@@ -119,7 +119,7 @@ inline void XFLineHeight::SetSpace(double value)
 inline void XFLineHeight::Reset()
 {
     m_eType = enumLHNone;
-    memset(&m_Value, 0, sizeof(m_Value));
+    m_Value.m_fValue = 0;
 }
 
 inline enumLHType XFLineHeight::GetType()
diff --git a/lotuswordpro/source/filter/xfilter/xfliststyle.cxx b/lotuswordpro/source/filter/xfilter/xfliststyle.cxx
index 14d28b2..9ef5222 100644
--- a/lotuswordpro/source/filter/xfilter/xfliststyle.cxx
+++ b/lotuswordpro/source/filter/xfilter/xfliststyle.cxx
@@ -118,8 +118,7 @@ void    XFListLevelBullet::ToXml(IXFStream *pStrm)
     //text:style-name,ignore now.
     m_aNumFmt.ToXml(pStrm);
     //bullet-char
-    OUString   bullet(m_chBullet);
-    pAttrList->AddAttribute( "text:bullet-char", bullet );
+    pAttrList->AddAttribute( "text:bullet-char", m_chBullet );
 
     pStrm->StartElement( "text:list-level-style-bullet" );
 
@@ -269,7 +268,7 @@ void    XFListStyle::SetListPosition(sal_Int32 level,
 }
 
 void    XFListStyle::SetListBullet(sal_Int32 level,
-                                   UChar32 bullet,
+                                   OUString const & bullet,
                                    const OUString& fontname,
                                    const OUString& prefix,
                                    const OUString& suffix
diff --git a/lotuswordpro/source/filter/xfilter/xfliststyle.hxx b/lotuswordpro/source/filter/xfilter/xfliststyle.hxx
index d8ea1b5..d9fb0a0 100644
--- a/lotuswordpro/source/filter/xfilter/xfliststyle.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfliststyle.hxx
@@ -141,12 +141,11 @@ class XFListLevelBullet : public XFListLevel
 {
 public:
     XFListLevelBullet()
-        : m_chBullet(0)
     {
         m_eListType = enumXFListLevelBullet;
     }
 
-    void    SetBulletChar(UChar32 ch)
+    void    SetBulletChar(OUString const & ch)
     {
         m_chBullet = ch;
     }
@@ -166,7 +165,7 @@ public:
     virtual void    ToXml(IXFStream *pStrm) SAL_OVERRIDE;
 private:
     XFNumFmt    m_aNumFmt;
-    int32_t     m_chBullet;
+    OUString m_chBullet;
     OUString m_strFontName;
 };
 
@@ -203,7 +202,7 @@ public:
                     );
 
     void    SetListBullet(sal_Int32 level,
-                            UChar32 bullet_char,
+                            OUString const & bullet_char,
                             const OUString& fontname = "",
                             const OUString& prefix = "",
                             const OUString& suffix = ""
diff --git a/lotuswordpro/source/filter/xfilter/xfpagemaster.hxx b/lotuswordpro/source/filter/xfilter/xfpagemaster.hxx
index 3788d08..7adccdf 100644
--- a/lotuswordpro/source/filter/xfilter/xfpagemaster.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfpagemaster.hxx
@@ -149,7 +149,7 @@ private:
 
 inline void XFPageMaster::SetPageUsage(enumXFPageUsage usage)
 {
-    this->m_eUsage = usage;
+    m_eUsage = usage;
 }
 
 inline void XFPageMaster::SetPrintOrient(bool bUseWidth)
diff --git a/lotuswordpro/source/filter/xfilter/xfparastyle.cxx b/lotuswordpro/source/filter/xfilter/xfparastyle.cxx
index 8364d1a..e47b04b 100644
--- a/lotuswordpro/source/filter/xfilter/xfparastyle.cxx
+++ b/lotuswordpro/source/filter/xfilter/xfparastyle.cxx
@@ -143,6 +143,8 @@ XFParaStyle& XFParaStyle::operator=(const XFParaStyle& other)
         m_nFlag = other.m_nFlag;
         m_eAlignType = other.m_eAlignType;
         m_eLastLineAlign = other.m_eLastLineAlign;
+        m_bJustSingleWord = other.m_bJustSingleWord;
+        m_bKeepWithNext = other.m_bKeepWithNext;
         m_fTextIndent = other.m_fTextIndent;
         m_bNumberLines = other.m_bNumberLines;
         m_nLineNumberRestart = other.m_nLineNumberRestart;
diff --git a/lotuswordpro/source/filter/xfilter/xfstylecont.cxx b/lotuswordpro/source/filter/xfilter/xfstylecont.cxx
index b5f4434..7480024 100644
--- a/lotuswordpro/source/filter/xfilter/xfstylecont.cxx
+++ b/lotuswordpro/source/filter/xfilter/xfstylecont.cxx
@@ -70,26 +70,13 @@ XFStyleContainer::XFStyleContainer(const OUString& strStyleNamePrefix)
 {
 }
 
-XFStyleContainer::XFStyleContainer(const XFStyleContainer& other):
-    m_aStyles(other.m_aStyles), m_strStyleNamePrefix(other.m_strStyleNamePrefix)
-{
-}
-
-XFStyleContainer& XFStyleContainer::operator=(const XFStyleContainer& other)
-{
-    this->m_strStyleNamePrefix = other.m_strStyleNamePrefix;
-    this->m_aStyles = other.m_aStyles;
-    return *this;
-}
-
 XFStyleContainer::~XFStyleContainer()
 {
     std::vector<IXFStyle*>::iterator it;
     for( it = m_aStyles.begin(); it != m_aStyles.end(); ++it )
     {
         IXFStyle *pStyle = *it;
-        if( pStyle )
-            delete pStyle;
+        delete pStyle;
     }
 }
 
@@ -100,8 +87,7 @@ void    XFStyleContainer::Reset()
     for( it = m_aStyles.begin(); it != m_aStyles.end(); ++it )
     {
         IXFStyle *pStyle = *it;
-        if( pStyle )
-            delete pStyle;
+        delete pStyle;
     }
     m_aStyles.clear();
 }
@@ -159,9 +145,7 @@ IXFStyle*   XFStyleContainer::FindSameStyle(IXFStyle *pStyle)
     for( it = m_aStyles.begin(); it != m_aStyles.end(); ++it )
     {
         IXFStyle *pConStyle = *it;
-        if( !pConStyle )
-            continue;
-
+        assert(pConStyle);
         if( pConStyle->Equal(pStyle) )
             return pConStyle;
     }
@@ -175,9 +159,7 @@ IXFStyle*   XFStyleContainer::FindStyle(const OUString& name)
     for( it = m_aStyles.begin(); it != m_aStyles.end(); ++it )
     {
         IXFStyle *pConStyle = *it;
-        if( !pConStyle )
-            continue;
-
+        assert(pConStyle);
         if( pConStyle->GetStyleName() == name )
             return pConStyle;
     }
@@ -202,11 +184,7 @@ void    XFStyleContainer::ToXml(IXFStream *pStrm)
     for( it = m_aStyles.begin(); it != m_aStyles.end(); ++it )
     {
         IXFStyle *pStyle = *it;
-
         assert(pStyle);
-        if( !pStyle )
-            continue;
-
         pStyle->ToXml(pStrm);
     }
 }
diff --git a/lotuswordpro/source/filter/xfilter/xfstylecont.hxx b/lotuswordpro/source/filter/xfilter/xfstylecont.hxx
index 59af93e4..046d00c 100644
--- a/lotuswordpro/source/filter/xfilter/xfstylecont.hxx
+++ b/lotuswordpro/source/filter/xfilter/xfstylecont.hxx
@@ -87,9 +87,9 @@ public:
 
     XFStyleContainer(const OUString& strStyleNamePrefix);
 
-    XFStyleContainer(const XFStyleContainer& other);
+    XFStyleContainer(const XFStyleContainer& other) = delete;
 
-    XFStyleContainer& operator=(const XFStyleContainer& other);
+    XFStyleContainer& operator=(const XFStyleContainer& other) = delete;
 
     virtual ~XFStyleContainer();
 
diff --git a/lotuswordpro/source/filter/xfilter/xfstylemanager.cxx b/lotuswordpro/source/filter/xfilter/xfstylemanager.cxx
index 5503805..c185389 100644
--- a/lotuswordpro/source/filter/xfilter/xfstylemanager.cxx
+++ b/lotuswordpro/source/filter/xfilter/xfstylemanager.cxx
@@ -111,8 +111,6 @@ IXFStyleRet XFStyleManager::AddStyle(IXFStyle *pStyle)
     assert(pStyle);
     OUString   name;
 
-    if( !pStyle )
-        return aRet;
     name = pStyle->GetStyleName();
 
     if( pStyle->GetStyleFamily() == enumXFStyleText )
diff --git a/lotuswordpro/source/filter/xfilter/xftable.cxx b/lotuswordpro/source/filter/xfilter/xftable.cxx
index bc8c294..652e9e7 100644
--- a/lotuswordpro/source/filter/xfilter/xftable.cxx
+++ b/lotuswordpro/source/filter/xfilter/xftable.cxx
@@ -87,11 +87,9 @@ void    XFTable::SetColumnStyle(sal_Int32 col, const OUString& style)
     m_aColumns[col] = style;
 }
 
-void    XFTable::AddRow(XFRow *pRow)
+void XFTable::AddRow(XFRow *pRow)
 {
     assert(pRow);
-    if( !pRow )
-        return;
 
     int row = pRow->GetRow();
 
@@ -106,11 +104,13 @@ void    XFTable::AddRow(XFRow *pRow)
     m_aRows[row] = pRow;
 }
 
-void    XFTable::AddHeaderRow(XFRow *pRow)
+void XFTable::AddHeaderRow(XFRow *pRow)
 {
-    if( !pRow )
+    if( !pRow)
+        return;
+    if (!m_aHeaderRows.is())
         return;
-    m_aHeaderRows.Add(pRow);
+    m_aHeaderRows->Add(pRow);
 }
 
 OUString XFTable::GetTableName()
@@ -209,10 +209,10 @@ void    XFTable::ToXml(IXFStream *pStrm)
         }
     }
 
-    if( m_aHeaderRows.GetCount()>0 )
+    if (m_aHeaderRows.is() && m_aHeaderRows->GetCount()>0)
     {
         pStrm->StartElement( "table:table-header-rows" );
-        m_aHeaderRows.ToXml(pStrm);
+        m_aHeaderRows->ToXml(pStrm);
         pStrm->EndElement( "table:table-header-rows" );
     }
     //output rows:
diff --git a/lotuswordpro/source/filter/xfilter/xftable.hxx b/lotuswordpro/source/filter/xfilter/xftable.hxx
index 9dffb6f..d3a6ade 100644
--- a/lotuswordpro/source/filter/xfilter/xftable.hxx
+++ b/lotuswordpro/source/filter/xfilter/xftable.hxx
@@ -117,7 +117,7 @@ private:
     OUString   m_strName;
     bool    m_bSubTable;
     XFCell      *m_pOwnerCell;
-    XFContentContainer  m_aHeaderRows;
+    rtl::Reference<XFContentContainer>  m_aHeaderRows;
     std::map<sal_uInt16, XFRow*>  m_aRows;
     std::map<sal_Int32,OUString>   m_aColumns;
     OUString   m_strDefCellStyle;
diff --git a/sax/source/tools/converter.cxx b/sax/source/tools/converter.cxx
index 3712622..ca0d7c3 100644
--- a/sax/source/tools/converter.cxx
+++ b/sax/source/tools/converter.cxx
@@ -1250,7 +1250,7 @@ bool Converter::convertDuration(util::Duration& rDuration,
 
 
 static void
-lcl_AppendTimezone(OUStringBuffer & i_rBuffer, sal_Int16 const nOffset)
+lcl_AppendTimezone(OUStringBuffer & i_rBuffer, int const nOffset)
 {
     if (0 == nOffset)
     {
@@ -1435,7 +1435,7 @@ lcl_MaxDaysPerMonth(const sal_Int32 nMonth, const sal_Int32 nYear)
 static void lcl_ConvertToUTC(
         sal_Int16 & o_rYear, sal_uInt16 & o_rMonth, sal_uInt16 & o_rDay,
         sal_uInt16 & o_rHours, sal_uInt16 & o_rMinutes,
-        sal_Int16 const nSourceOffset)
+        int const nSourceOffset)
 {
     sal_Int16 nOffsetHours(abs(nSourceOffset) / 60);
     sal_Int16 const nOffsetMinutes(abs(nSourceOffset) % 60);
-- 
2.7.1

