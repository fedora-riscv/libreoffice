From a7699355d355a1817fc16b4832f96a3a9e17d5df Mon Sep 17 00:00:00 2001
From: Kohei Yoshida <kohei.yoshida@collabora.com>
Date: Thu, 1 May 2014 12:16:12 -0400
Subject: [PATCH] fdo#77806: Use the common block position set for start and
 end listening.

Else an invalid iterator may result, which would eventually leads to a
crash.

Change-Id: Ie909de61244d661c72a3450cc69b29fbb218a248
(cherry picked from commit 7fbe0f56192f7e106c560646d37fbb93b69b0446)
Reviewed-on: https://gerrit.libreoffice.org/9225
Tested-by: Markus Mohrhard <markus.mohrhard@googlemail.com>
Reviewed-by: Markus Mohrhard <markus.mohrhard@googlemail.com>
---
 sc/inc/listenercontext.hxx              | 7 +++++--
 sc/source/core/data/column.cxx          | 9 +++++++--
 sc/source/core/data/listenercontext.cxx | 9 +++++++++
 sc/source/core/tool/token.cxx           | 8 ++++++--
 4 files changed, 27 insertions(+), 6 deletions(-)

diff --git a/sc/inc/listenercontext.hxx b/sc/inc/listenercontext.hxx
index 501f1d2..c485246 100644
--- a/sc/inc/listenercontext.hxx
+++ b/sc/inc/listenercontext.hxx
@@ -15,6 +15,7 @@
 
 #include <boost/noncopyable.hpp>
 #include <boost/scoped_ptr.hpp>
+#include <boost/shared_ptr.hpp>
 
 class ScDocument;
 class ScTokenArray;
@@ -27,9 +28,10 @@ class ColumnBlockPositionSet;
 class StartListeningContext : boost::noncopyable
 {
     ScDocument& mrDoc;
-    boost::scoped_ptr<ColumnBlockPositionSet> mpSet;
+    boost::shared_ptr<ColumnBlockPositionSet> mpSet;
 public:
     StartListeningContext(ScDocument& rDoc);
+    StartListeningContext(ScDocument& rDoc, const boost::shared_ptr<ColumnBlockPositionSet>& pSet);
     ScDocument& getDoc();
 
     ColumnBlockPosition* getBlockPosition(SCTAB nTab, SCCOL nCol);
@@ -39,12 +41,13 @@ class EndListeningContext : boost::noncopyable
 {
     ScDocument& mrDoc;
     ColumnSpanSet maSet;
-    boost::scoped_ptr<ColumnBlockPositionSet> mpPosSet;
+    boost::shared_ptr<ColumnBlockPositionSet> mpPosSet;
     ScTokenArray* mpOldCode;
     ScAddress maPosDelta; // Add this to get the old position prior to the move.
 
 public:
     EndListeningContext(ScDocument& rDoc, ScTokenArray* pOldCode = NULL);
+    EndListeningContext(ScDocument& rDoc, const boost::shared_ptr<ColumnBlockPositionSet>& pSet, ScTokenArray* pOldCode = NULL);
 
     void setPositionDelta( const ScAddress& rDelta );
 
diff --git a/sc/source/core/data/column.cxx b/sc/source/core/data/column.cxx
index 99d2626..6c3e2a9 100644
--- a/sc/source/core/data/column.cxx
+++ b/sc/source/core/data/column.cxx
@@ -2239,9 +2239,14 @@ class UpdateRefOnNonCopy : std::unary_function<sc::FormulaGroupEntry, void>
             // Perform end-listening, start-listening, and dirtying on all
             // formula cells in the group.
 
-            sc::StartListeningContext aStartCxt(mpCxt->mrDoc);
+            // Make sure that the start and end listening contexts share the
+            // same block position set, else an invalid iterator may ensue.
+            boost::shared_ptr<sc::ColumnBlockPositionSet> pPosSet(
+                new sc::ColumnBlockPositionSet(mpCxt->mrDoc));
+
+            sc::StartListeningContext aStartCxt(mpCxt->mrDoc, pPosSet);
+            sc::EndListeningContext aEndCxt(mpCxt->mrDoc, pPosSet, pOldCode.get());
 
-            sc::EndListeningContext aEndCxt(mpCxt->mrDoc, pOldCode.get());
             aEndCxt.setPositionDelta(
                 ScAddress(-mpCxt->mnColDelta, -mpCxt->mnRowDelta, -mpCxt->mnTabDelta));
 
diff --git a/sc/source/core/data/listenercontext.cxx b/sc/source/core/data/listenercontext.cxx
index add75a2..dcdffac 100644
--- a/sc/source/core/data/listenercontext.cxx
+++ b/sc/source/core/data/listenercontext.cxx
@@ -16,6 +16,10 @@ namespace sc {
 StartListeningContext::StartListeningContext(ScDocument& rDoc) :
     mrDoc(rDoc), mpSet(new ColumnBlockPositionSet(rDoc)) {}
 
+StartListeningContext::StartListeningContext(
+    ScDocument& rDoc, const boost::shared_ptr<ColumnBlockPositionSet>& pSet) :
+    mrDoc(rDoc), mpSet(pSet) {}
+
 ScDocument& StartListeningContext::getDoc()
 {
     return mrDoc;
@@ -30,6 +34,11 @@ EndListeningContext::EndListeningContext(ScDocument& rDoc, ScTokenArray* pOldCod
     mrDoc(rDoc), maSet(false), mpPosSet(new ColumnBlockPositionSet(rDoc)),
     mpOldCode(pOldCode), maPosDelta(0,0,0) {}
 
+EndListeningContext::EndListeningContext(
+    ScDocument& rDoc, const boost::shared_ptr<ColumnBlockPositionSet>& pSet, ScTokenArray* pOldCode) :
+    mrDoc(rDoc), maSet(false), mpPosSet(pSet),
+    mpOldCode(pOldCode), maPosDelta(0,0,0) {}
+
 void EndListeningContext::setPositionDelta( const ScAddress& rDelta )
 {
     maPosDelta = rDelta;
diff --git a/sc/source/core/tool/token.cxx b/sc/source/core/tool/token.cxx
index 9089a62..65ed7ad 100644
--- a/sc/source/core/tool/token.cxx
+++ b/sc/source/core/tool/token.cxx
@@ -2799,13 +2799,17 @@ sc::RefUpdateResult ScTokenArray::AdjustReferenceOnShift( const sc::RefUpdateCon
 sc::RefUpdateResult ScTokenArray::AdjustReferenceOnMove(
     const sc::RefUpdateContext& rCxt, const ScAddress& rOldPos, const ScAddress& rNewPos )
 {
+    sc::RefUpdateResult aRes;
+
+    if (!rCxt.mnColDelta && !rCxt.mnRowDelta && !rCxt.mnTabDelta)
+        // The cell hasn't moved at all.
+        return aRes;
+
     // When moving, the range is the destination range. We need to use the old
     // range prior to the move for hit analysis.
     ScRange aOldRange = rCxt.maRange;
     aOldRange.Move(-rCxt.mnColDelta, -rCxt.mnRowDelta, -rCxt.mnTabDelta);
 
-    sc::RefUpdateResult aRes;
-
     FormulaToken** p = pCode;
     FormulaToken** pEnd = p + static_cast<size_t>(nLen);
     for (; p != pEnd; ++p)
-- 
1.9.0

