diff --git a/l10ntools.orig/source/tagtest.cxx b/l10ntools/source/tagtest.cxx
index 58a1299..62c59ad 100644
--- a/l10ntools.orig/source/tagtest.cxx
+++ b/l10ntools/source/tagtest.cxx
@@ -668,7 +668,8 @@ void SimpleParser::Parse( String PaSource )
     aSource = PaSource;
     nPos = 0;
     aLastToken.Erase();
-    aNextTag = TokenInfo( TAG_NOMORETAGS, TOK_INVALIDPOS );
+    TokenInfo aFoo( TAG_NOMORETAGS, TOK_INVALIDPOS );
+    aNextTag = aFoo;
     aTokenList.clear();
 };
 
@@ -679,7 +680,8 @@ TokenInfo SimpleParser::GetNextToken( ParserMessageList &rErrorList )
     if ( aNextTag.nId != TAG_NOMORETAGS )
     {
         aResult = aNextTag;
-        aNextTag = TokenInfo( TAG_NOMORETAGS, TOK_INVALIDPOS );
+        TokenInfo aFoo( TAG_NOMORETAGS, TOK_INVALIDPOS );
+        aNextTag = aFoo;
     }
     else
     {
@@ -718,15 +720,22 @@ TokenInfo SimpleParser::GetNextToken( ParserMessageList &rErrorList )
             while ( aLastToken.GetChar(nNonBlankStartPos) == ' ' )
                 nNonBlankStartPos++;
             if ( aLastToken.GetChar(nNonBlankStartPos) == '/' )
-                aResult = TokenInfo( TAG_COMMONEND, nTokenStartPos, aLastToken, rErrorList );
+            {
+                TokenInfo aFoo( TAG_COMMONEND, nTokenStartPos, aLastToken, rErrorList );
+                aResult = aFoo;
+            }
             else
             {
-                aResult = TokenInfo( TAG_COMMONSTART, nTokenStartPos, aLastToken, rErrorList );
+                TokenInfo aBar( TAG_COMMONSTART, nTokenStartPos, aLastToken, rErrorList );
+                aResult = aBar;
                 nNonBlankEndPos = aLastToken.Len() -3;
                 while ( aLastToken.GetChar(nNonBlankEndPos) == ' ' )
                     nNonBlankEndPos--;
                 if ( aLastToken.GetChar( nNonBlankEndPos ) == '/' )
-                    aNextTag = TokenInfo( TAG_COMMONEND, nTokenStartPos, String::CreateFromAscii("\\</").Append(aResult.GetTagName()).AppendAscii("\\>"), rErrorList );
+                {
+                    TokenInfo aFoo( TAG_COMMONEND, nTokenStartPos, String::CreateFromAscii("\\</").Append(aResult.GetTagName()).AppendAscii("\\>"), rErrorList );
+                    aNextTag = aFoo;
+                }
             }
         }
         else
@@ -735,12 +744,16 @@ TokenInfo SimpleParser::GetNextToken( ParserMessageList &rErrorList )
             while ( aKnownTags[i].nTag != TAG_UNKNOWN_TAG &&
                 aLastToken != aKnownTags[i].GetName() )
                 i++;
-            aResult = TokenInfo( aKnownTags[i].nTag, nTokenStartPos );
+            TokenInfo aFoo( aKnownTags[i].nTag, nTokenStartPos );
+            aResult = aFoo;
         }
     }
 
     if ( aResult.nId == TAG_UNKNOWN_TAG )
-        aResult = TokenInfo( TAG_UNKNOWN_TAG, nTokenStartPos, aLastToken );
+    {
+        TokenInfo aFoo( TAG_UNKNOWN_TAG, nTokenStartPos, aLastToken );
+        aResult = aFoo;
+    }
     aTokenList.insert( aResult );
     return aResult;
 }
@@ -825,7 +838,8 @@ void TokenParser::Parse( const String &aCode, ParserMessageList* pList )
     aParser.Parse( aCode );
 
     //erstes Symbol holen
-    aTag = aParser.GetNextToken( *pErrorList );
+    TokenInfo aFoo(aParser.GetNextToken( *pErrorList ));
+    aTag = aFoo;
 
     nPfCaseOptions = 0;
     nAppCaseOptions = 0;
@@ -1305,7 +1319,8 @@ sal_Bool TokenParser::match( const TokenInfo &aCurrentToken, const TokenInfo &rE
                && aCurrentToken.GetTagName().Equals( aExpectedToken.GetTagName() ) )
              || aCurrentToken.nId != TAG_COMMONEND )
         {
-            aTag = aParser.GetNextToken( *pErrorList );
+            TokenInfo aFoo(aParser.GetNextToken( *pErrorList ));
+            aTag = aFoo;
             return sal_True;
         }
     }
@@ -1335,7 +1350,8 @@ void TokenParser::ParseError( sal_uInt16 nErrNr, ByteString aErrMsg, const Token
     pErrorList->AddError( nErrNr, aErrMsg, rTag);
 
     // Das Fehlerhafte Tag ueberspringen
-    aTag = aParser.GetNextToken( *pErrorList );
+    TokenInfo aFoo(aParser.GetNextToken( *pErrorList ));
+    aTag = aFoo;
 }
 
 
